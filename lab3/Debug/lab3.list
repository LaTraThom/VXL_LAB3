
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e58  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002f64  08002f64  00012f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f88  08002f88  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08002f88  08002f88  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f88  08002f88  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f88  08002f88  00012f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f8c  08002f8c  00012f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08002f90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000088  08003018  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08003018  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b54  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c40  00000000  00000000  00029c05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0002b848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002c2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001702a  00000000  00000000  0002cc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c312  00000000  00000000  00043c5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082848  00000000  00000000  0004ff6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d27b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002900  00000000  00000000  000d2808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f4c 	.word	0x08002f4c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08002f4c 	.word	0x08002f4c

0800014c <isButton2Pressed>:
		return 1;
	}
	return 0;
}

int isButton2Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton2Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton2Pressed+0x16>
		button2_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton2Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton2Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	200000a8 	.word	0x200000a8

08000170 <isButton3Pressed>:
		return 1;
	}
	return 0;
}

int isButton3Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton3Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton3Pressed+0x16>
		button3_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton3Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton3Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	200000ac 	.word	0x200000ac

08000194 <subKeyProcess>:
		return 1;
	}
	return 0;
}

void subKeyProcess(int button_id){
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
	//TODO
    switch (button_id) {
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	2b03      	cmp	r3, #3
 80001a0:	d011      	beq.n	80001c6 <subKeyProcess+0x32>
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	2b03      	cmp	r3, #3
 80001a6:	dc12      	bgt.n	80001ce <subKeyProcess+0x3a>
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	2b01      	cmp	r3, #1
 80001ac:	d003      	beq.n	80001b6 <subKeyProcess+0x22>
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	2b02      	cmp	r3, #2
 80001b2:	d004      	beq.n	80001be <subKeyProcess+0x2a>
            break;
        case 3:
            button3_flag = 1;
            break;
        default:
            break;
 80001b4:	e00b      	b.n	80001ce <subKeyProcess+0x3a>
            button1_flag = 1;
 80001b6:	4b09      	ldr	r3, [pc, #36]	; (80001dc <subKeyProcess+0x48>)
 80001b8:	2201      	movs	r2, #1
 80001ba:	601a      	str	r2, [r3, #0]
            break;
 80001bc:	e008      	b.n	80001d0 <subKeyProcess+0x3c>
            button2_flag = 1;
 80001be:	4b08      	ldr	r3, [pc, #32]	; (80001e0 <subKeyProcess+0x4c>)
 80001c0:	2201      	movs	r2, #1
 80001c2:	601a      	str	r2, [r3, #0]
            break;
 80001c4:	e004      	b.n	80001d0 <subKeyProcess+0x3c>
            button3_flag = 1;
 80001c6:	4b07      	ldr	r3, [pc, #28]	; (80001e4 <subKeyProcess+0x50>)
 80001c8:	2201      	movs	r2, #1
 80001ca:	601a      	str	r2, [r3, #0]
            break;
 80001cc:	e000      	b.n	80001d0 <subKeyProcess+0x3c>
            break;
 80001ce:	bf00      	nop
    }
}
 80001d0:	bf00      	nop
 80001d2:	370c      	adds	r7, #12
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	200000a4 	.word	0x200000a4
 80001e0:	200000a8 	.word	0x200000a8
 80001e4:	200000ac 	.word	0x200000ac

080001e8 <getKeyInput>:

void getKeyInput(){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
    // Xử lý button 1
    KeyReg2_1 = KeyReg1_1;
 80001ec:	4b6b      	ldr	r3, [pc, #428]	; (800039c <getKeyInput+0x1b4>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a6b      	ldr	r2, [pc, #428]	; (80003a0 <getKeyInput+0x1b8>)
 80001f2:	6013      	str	r3, [r2, #0]
    KeyReg1_1 = KeyReg0_1;
 80001f4:	4b6b      	ldr	r3, [pc, #428]	; (80003a4 <getKeyInput+0x1bc>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a68      	ldr	r2, [pc, #416]	; (800039c <getKeyInput+0x1b4>)
 80001fa:	6013      	str	r3, [r2, #0]
    KeyReg0_1 = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 80001fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000200:	4869      	ldr	r0, [pc, #420]	; (80003a8 <getKeyInput+0x1c0>)
 8000202:	f001 fe77 	bl	8001ef4 <HAL_GPIO_ReadPin>
 8000206:	4603      	mov	r3, r0
 8000208:	461a      	mov	r2, r3
 800020a:	4b66      	ldr	r3, [pc, #408]	; (80003a4 <getKeyInput+0x1bc>)
 800020c:	601a      	str	r2, [r3, #0]

    if ((KeyReg1_1 == KeyReg0_1) && (KeyReg1_1 == KeyReg2_1)) {
 800020e:	4b63      	ldr	r3, [pc, #396]	; (800039c <getKeyInput+0x1b4>)
 8000210:	681a      	ldr	r2, [r3, #0]
 8000212:	4b64      	ldr	r3, [pc, #400]	; (80003a4 <getKeyInput+0x1bc>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	429a      	cmp	r2, r3
 8000218:	d12f      	bne.n	800027a <getKeyInput+0x92>
 800021a:	4b60      	ldr	r3, [pc, #384]	; (800039c <getKeyInput+0x1b4>)
 800021c:	681a      	ldr	r2, [r3, #0]
 800021e:	4b60      	ldr	r3, [pc, #384]	; (80003a0 <getKeyInput+0x1b8>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	429a      	cmp	r2, r3
 8000224:	d129      	bne.n	800027a <getKeyInput+0x92>
        if (KeyReg2_1 != KeyReg3_1) {
 8000226:	4b5e      	ldr	r3, [pc, #376]	; (80003a0 <getKeyInput+0x1b8>)
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	4b60      	ldr	r3, [pc, #384]	; (80003ac <getKeyInput+0x1c4>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	429a      	cmp	r2, r3
 8000230:	d00f      	beq.n	8000252 <getKeyInput+0x6a>
            KeyReg3_1 = KeyReg2_1;
 8000232:	4b5b      	ldr	r3, [pc, #364]	; (80003a0 <getKeyInput+0x1b8>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	4a5d      	ldr	r2, [pc, #372]	; (80003ac <getKeyInput+0x1c4>)
 8000238:	6013      	str	r3, [r2, #0]
            if (KeyReg3_1 == PRESSED_STATE) {
 800023a:	4b5c      	ldr	r3, [pc, #368]	; (80003ac <getKeyInput+0x1c4>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d11b      	bne.n	800027a <getKeyInput+0x92>
                TimeOutForKeyPress1 = 500;
 8000242:	4b5b      	ldr	r3, [pc, #364]	; (80003b0 <getKeyInput+0x1c8>)
 8000244:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000248:	601a      	str	r2, [r3, #0]
                subKeyProcess(1);
 800024a:	2001      	movs	r0, #1
 800024c:	f7ff ffa2 	bl	8000194 <subKeyProcess>
 8000250:	e013      	b.n	800027a <getKeyInput+0x92>
            }
        } else {
            TimeOutForKeyPress1--;
 8000252:	4b57      	ldr	r3, [pc, #348]	; (80003b0 <getKeyInput+0x1c8>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	3b01      	subs	r3, #1
 8000258:	4a55      	ldr	r2, [pc, #340]	; (80003b0 <getKeyInput+0x1c8>)
 800025a:	6013      	str	r3, [r2, #0]
            if (TimeOutForKeyPress1 == 0) {
 800025c:	4b54      	ldr	r3, [pc, #336]	; (80003b0 <getKeyInput+0x1c8>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d10a      	bne.n	800027a <getKeyInput+0x92>
                TimeOutForKeyPress1 = 500;
 8000264:	4b52      	ldr	r3, [pc, #328]	; (80003b0 <getKeyInput+0x1c8>)
 8000266:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800026a:	601a      	str	r2, [r3, #0]
                if (KeyReg3_1 == PRESSED_STATE) {
 800026c:	4b4f      	ldr	r3, [pc, #316]	; (80003ac <getKeyInput+0x1c4>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d102      	bne.n	800027a <getKeyInput+0x92>
                    subKeyProcess(1);
 8000274:	2001      	movs	r0, #1
 8000276:	f7ff ff8d 	bl	8000194 <subKeyProcess>
            }
        }
    }

    // Xử lý button 2
    KeyReg2_2 = KeyReg1_2;
 800027a:	4b4e      	ldr	r3, [pc, #312]	; (80003b4 <getKeyInput+0x1cc>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a4e      	ldr	r2, [pc, #312]	; (80003b8 <getKeyInput+0x1d0>)
 8000280:	6013      	str	r3, [r2, #0]
    KeyReg1_2 = KeyReg0_2;
 8000282:	4b4e      	ldr	r3, [pc, #312]	; (80003bc <getKeyInput+0x1d4>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a4b      	ldr	r2, [pc, #300]	; (80003b4 <getKeyInput+0x1cc>)
 8000288:	6013      	str	r3, [r2, #0]
    KeyReg0_2 = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 800028a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800028e:	4846      	ldr	r0, [pc, #280]	; (80003a8 <getKeyInput+0x1c0>)
 8000290:	f001 fe30 	bl	8001ef4 <HAL_GPIO_ReadPin>
 8000294:	4603      	mov	r3, r0
 8000296:	461a      	mov	r2, r3
 8000298:	4b48      	ldr	r3, [pc, #288]	; (80003bc <getKeyInput+0x1d4>)
 800029a:	601a      	str	r2, [r3, #0]

    if ((KeyReg1_2 == KeyReg0_2) && (KeyReg1_2 == KeyReg2_2)) {
 800029c:	4b45      	ldr	r3, [pc, #276]	; (80003b4 <getKeyInput+0x1cc>)
 800029e:	681a      	ldr	r2, [r3, #0]
 80002a0:	4b46      	ldr	r3, [pc, #280]	; (80003bc <getKeyInput+0x1d4>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	429a      	cmp	r2, r3
 80002a6:	d12f      	bne.n	8000308 <getKeyInput+0x120>
 80002a8:	4b42      	ldr	r3, [pc, #264]	; (80003b4 <getKeyInput+0x1cc>)
 80002aa:	681a      	ldr	r2, [r3, #0]
 80002ac:	4b42      	ldr	r3, [pc, #264]	; (80003b8 <getKeyInput+0x1d0>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	429a      	cmp	r2, r3
 80002b2:	d129      	bne.n	8000308 <getKeyInput+0x120>
        if (KeyReg2_2 != KeyReg3_2) {
 80002b4:	4b40      	ldr	r3, [pc, #256]	; (80003b8 <getKeyInput+0x1d0>)
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	4b41      	ldr	r3, [pc, #260]	; (80003c0 <getKeyInput+0x1d8>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	429a      	cmp	r2, r3
 80002be:	d00f      	beq.n	80002e0 <getKeyInput+0xf8>
            KeyReg3_2 = KeyReg2_2;
 80002c0:	4b3d      	ldr	r3, [pc, #244]	; (80003b8 <getKeyInput+0x1d0>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a3e      	ldr	r2, [pc, #248]	; (80003c0 <getKeyInput+0x1d8>)
 80002c6:	6013      	str	r3, [r2, #0]
            if (KeyReg3_2 == PRESSED_STATE) {
 80002c8:	4b3d      	ldr	r3, [pc, #244]	; (80003c0 <getKeyInput+0x1d8>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d11b      	bne.n	8000308 <getKeyInput+0x120>
                TimeOutForKeyPress2 = 500;
 80002d0:	4b3c      	ldr	r3, [pc, #240]	; (80003c4 <getKeyInput+0x1dc>)
 80002d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80002d6:	601a      	str	r2, [r3, #0]
                subKeyProcess(2);
 80002d8:	2002      	movs	r0, #2
 80002da:	f7ff ff5b 	bl	8000194 <subKeyProcess>
 80002de:	e013      	b.n	8000308 <getKeyInput+0x120>
            }
        } else {
            TimeOutForKeyPress2--;
 80002e0:	4b38      	ldr	r3, [pc, #224]	; (80003c4 <getKeyInput+0x1dc>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	3b01      	subs	r3, #1
 80002e6:	4a37      	ldr	r2, [pc, #220]	; (80003c4 <getKeyInput+0x1dc>)
 80002e8:	6013      	str	r3, [r2, #0]
            if (TimeOutForKeyPress2 == 0) {
 80002ea:	4b36      	ldr	r3, [pc, #216]	; (80003c4 <getKeyInput+0x1dc>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d10a      	bne.n	8000308 <getKeyInput+0x120>
                TimeOutForKeyPress2 = 500;
 80002f2:	4b34      	ldr	r3, [pc, #208]	; (80003c4 <getKeyInput+0x1dc>)
 80002f4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80002f8:	601a      	str	r2, [r3, #0]
                if (KeyReg3_2 == PRESSED_STATE) {
 80002fa:	4b31      	ldr	r3, [pc, #196]	; (80003c0 <getKeyInput+0x1d8>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d102      	bne.n	8000308 <getKeyInput+0x120>
                    subKeyProcess(2);
 8000302:	2002      	movs	r0, #2
 8000304:	f7ff ff46 	bl	8000194 <subKeyProcess>
            }
        }
    }

    // Xử lý button 3
    KeyReg2_3 = KeyReg1_3;
 8000308:	4b2f      	ldr	r3, [pc, #188]	; (80003c8 <getKeyInput+0x1e0>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a2f      	ldr	r2, [pc, #188]	; (80003cc <getKeyInput+0x1e4>)
 800030e:	6013      	str	r3, [r2, #0]
    KeyReg1_3 = KeyReg0_3;
 8000310:	4b2f      	ldr	r3, [pc, #188]	; (80003d0 <getKeyInput+0x1e8>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a2c      	ldr	r2, [pc, #176]	; (80003c8 <getKeyInput+0x1e0>)
 8000316:	6013      	str	r3, [r2, #0]
    KeyReg0_3 = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000318:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800031c:	4822      	ldr	r0, [pc, #136]	; (80003a8 <getKeyInput+0x1c0>)
 800031e:	f001 fde9 	bl	8001ef4 <HAL_GPIO_ReadPin>
 8000322:	4603      	mov	r3, r0
 8000324:	461a      	mov	r2, r3
 8000326:	4b2a      	ldr	r3, [pc, #168]	; (80003d0 <getKeyInput+0x1e8>)
 8000328:	601a      	str	r2, [r3, #0]

    if ((KeyReg1_3 == KeyReg0_3) && (KeyReg1_3 == KeyReg2_3)) {
 800032a:	4b27      	ldr	r3, [pc, #156]	; (80003c8 <getKeyInput+0x1e0>)
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	4b28      	ldr	r3, [pc, #160]	; (80003d0 <getKeyInput+0x1e8>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	429a      	cmp	r2, r3
 8000334:	d12f      	bne.n	8000396 <getKeyInput+0x1ae>
 8000336:	4b24      	ldr	r3, [pc, #144]	; (80003c8 <getKeyInput+0x1e0>)
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	4b24      	ldr	r3, [pc, #144]	; (80003cc <getKeyInput+0x1e4>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	429a      	cmp	r2, r3
 8000340:	d129      	bne.n	8000396 <getKeyInput+0x1ae>
        if (KeyReg2_3 != KeyReg3_3) {
 8000342:	4b22      	ldr	r3, [pc, #136]	; (80003cc <getKeyInput+0x1e4>)
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	4b23      	ldr	r3, [pc, #140]	; (80003d4 <getKeyInput+0x1ec>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	429a      	cmp	r2, r3
 800034c:	d00f      	beq.n	800036e <getKeyInput+0x186>
            KeyReg3_3 = KeyReg2_3;
 800034e:	4b1f      	ldr	r3, [pc, #124]	; (80003cc <getKeyInput+0x1e4>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4a20      	ldr	r2, [pc, #128]	; (80003d4 <getKeyInput+0x1ec>)
 8000354:	6013      	str	r3, [r2, #0]
            if (KeyReg3_3 == PRESSED_STATE) {
 8000356:	4b1f      	ldr	r3, [pc, #124]	; (80003d4 <getKeyInput+0x1ec>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d11b      	bne.n	8000396 <getKeyInput+0x1ae>
                TimeOutForKeyPress3 = 500;
 800035e:	4b1e      	ldr	r3, [pc, #120]	; (80003d8 <getKeyInput+0x1f0>)
 8000360:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000364:	601a      	str	r2, [r3, #0]
                subKeyProcess(3);
 8000366:	2003      	movs	r0, #3
 8000368:	f7ff ff14 	bl	8000194 <subKeyProcess>
                    subKeyProcess(3);
                }
            }
        }
    }
}
 800036c:	e013      	b.n	8000396 <getKeyInput+0x1ae>
            TimeOutForKeyPress3--;
 800036e:	4b1a      	ldr	r3, [pc, #104]	; (80003d8 <getKeyInput+0x1f0>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	3b01      	subs	r3, #1
 8000374:	4a18      	ldr	r2, [pc, #96]	; (80003d8 <getKeyInput+0x1f0>)
 8000376:	6013      	str	r3, [r2, #0]
            if (TimeOutForKeyPress3 == 0) {
 8000378:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <getKeyInput+0x1f0>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d10a      	bne.n	8000396 <getKeyInput+0x1ae>
                TimeOutForKeyPress3 = 500;
 8000380:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <getKeyInput+0x1f0>)
 8000382:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000386:	601a      	str	r2, [r3, #0]
                if (KeyReg3_3 == PRESSED_STATE) {
 8000388:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <getKeyInput+0x1ec>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d102      	bne.n	8000396 <getKeyInput+0x1ae>
                    subKeyProcess(3);
 8000390:	2003      	movs	r0, #3
 8000392:	f7ff feff 	bl	8000194 <subKeyProcess>
}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	20000004 	.word	0x20000004
 80003a0:	20000008 	.word	0x20000008
 80003a4:	20000000 	.word	0x20000000
 80003a8:	40011000 	.word	0x40011000
 80003ac:	2000000c 	.word	0x2000000c
 80003b0:	20000030 	.word	0x20000030
 80003b4:	20000014 	.word	0x20000014
 80003b8:	20000018 	.word	0x20000018
 80003bc:	20000010 	.word	0x20000010
 80003c0:	2000001c 	.word	0x2000001c
 80003c4:	20000034 	.word	0x20000034
 80003c8:	20000024 	.word	0x20000024
 80003cc:	20000028 	.word	0x20000028
 80003d0:	20000020 	.word	0x20000020
 80003d4:	2000002c 	.word	0x2000002c
 80003d8:	20000038 	.word	0x20000038

080003dc <fsm_automatic>:
#include "global.h"
int RED_TIME = 5000;
int YELLOW_TIME = 2000;
int GREEN_TIME = 3000;
int status = INIT;
void fsm_automatic(){
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
	switch (status){
 80003e0:	4bb1      	ldr	r3, [pc, #708]	; (80006a8 <fsm_automatic+0x2cc>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	3b01      	subs	r3, #1
 80003e6:	2b04      	cmp	r3, #4
 80003e8:	f200 8152 	bhi.w	8000690 <fsm_automatic+0x2b4>
 80003ec:	a201      	add	r2, pc, #4	; (adr r2, 80003f4 <fsm_automatic+0x18>)
 80003ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f2:	bf00      	nop
 80003f4:	08000409 	.word	0x08000409
 80003f8:	080004cd 	.word	0x080004cd
 80003fc:	08000535 	.word	0x08000535
 8000400:	080005b1 	.word	0x080005b1
 8000404:	08000617 	.word	0x08000617
		case INIT:
			HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, SET);
 8000408:	2201      	movs	r2, #1
 800040a:	2102      	movs	r1, #2
 800040c:	48a7      	ldr	r0, [pc, #668]	; (80006ac <fsm_automatic+0x2d0>)
 800040e:	f001 fd88 	bl	8001f22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, SET);
 8000412:	2201      	movs	r2, #1
 8000414:	2104      	movs	r1, #4
 8000416:	48a5      	ldr	r0, [pc, #660]	; (80006ac <fsm_automatic+0x2d0>)
 8000418:	f001 fd83 	bl	8001f22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_YELLOW_GPIO_Port, LED_3_YELLOW_Pin, SET);
 800041c:	2201      	movs	r2, #1
 800041e:	2108      	movs	r1, #8
 8000420:	48a2      	ldr	r0, [pc, #648]	; (80006ac <fsm_automatic+0x2d0>)
 8000422:	f001 fd7e 	bl	8001f22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_RED_GPIO_Port, LED_4_RED_Pin, SET);
 8000426:	2201      	movs	r2, #1
 8000428:	2110      	movs	r1, #16
 800042a:	48a0      	ldr	r0, [pc, #640]	; (80006ac <fsm_automatic+0x2d0>)
 800042c:	f001 fd79 	bl	8001f22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GREEN_GPIO_Port, LED_5_GREEN_Pin, SET);
 8000430:	2201      	movs	r2, #1
 8000432:	2120      	movs	r1, #32
 8000434:	489d      	ldr	r0, [pc, #628]	; (80006ac <fsm_automatic+0x2d0>)
 8000436:	f001 fd74 	bl	8001f22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_YELLOW_GPIO_Port, LED_6_YELLOW_Pin, SET);
 800043a:	2201      	movs	r2, #1
 800043c:	2140      	movs	r1, #64	; 0x40
 800043e:	489b      	ldr	r0, [pc, #620]	; (80006ac <fsm_automatic+0x2d0>)
 8000440:	f001 fd6f 	bl	8001f22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_7_RED_GPIO_Port, LED_7_RED_Pin, SET);
 8000444:	2201      	movs	r2, #1
 8000446:	2180      	movs	r1, #128	; 0x80
 8000448:	4898      	ldr	r0, [pc, #608]	; (80006ac <fsm_automatic+0x2d0>)
 800044a:	f001 fd6a 	bl	8001f22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_8_GREEN_GPIO_Port, LED_8_GREEN_Pin, SET);
 800044e:	2201      	movs	r2, #1
 8000450:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000454:	4895      	ldr	r0, [pc, #596]	; (80006ac <fsm_automatic+0x2d0>)
 8000456:	f001 fd64 	bl	8001f22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_9_YELLOW_GPIO_Port, LED_9_YELLOW_Pin, SET);
 800045a:	2201      	movs	r2, #1
 800045c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000460:	4892      	ldr	r0, [pc, #584]	; (80006ac <fsm_automatic+0x2d0>)
 8000462:	f001 fd5e 	bl	8001f22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_10_RED_GPIO_Port, LED_10_RED_Pin, SET);
 8000466:	2201      	movs	r2, #1
 8000468:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800046c:	488f      	ldr	r0, [pc, #572]	; (80006ac <fsm_automatic+0x2d0>)
 800046e:	f001 fd58 	bl	8001f22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_11_GREEN_GPIO_Port, LED_11_GREEN_Pin, SET);
 8000472:	2201      	movs	r2, #1
 8000474:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000478:	488c      	ldr	r0, [pc, #560]	; (80006ac <fsm_automatic+0x2d0>)
 800047a:	f001 fd52 	bl	8001f22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_12_YELLOW_GPIO_Port, LED_12_YELLOW_Pin, SET);
 800047e:	2201      	movs	r2, #1
 8000480:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000484:	4889      	ldr	r0, [pc, #548]	; (80006ac <fsm_automatic+0x2d0>)
 8000486:	f001 fd4c 	bl	8001f22 <HAL_GPIO_WritePin>
			status =  AUTO_RED_GREEN;
 800048a:	4b87      	ldr	r3, [pc, #540]	; (80006a8 <fsm_automatic+0x2cc>)
 800048c:	2202      	movs	r2, #2
 800048e:	601a      	str	r2, [r3, #0]
	        time_lane1 = RED_TIME / 1000;
 8000490:	4b87      	ldr	r3, [pc, #540]	; (80006b0 <fsm_automatic+0x2d4>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a87      	ldr	r2, [pc, #540]	; (80006b4 <fsm_automatic+0x2d8>)
 8000496:	fb82 1203 	smull	r1, r2, r2, r3
 800049a:	1192      	asrs	r2, r2, #6
 800049c:	17db      	asrs	r3, r3, #31
 800049e:	1ad3      	subs	r3, r2, r3
 80004a0:	4a85      	ldr	r2, [pc, #532]	; (80006b8 <fsm_automatic+0x2dc>)
 80004a2:	6013      	str	r3, [r2, #0]
	        time_lane2 = GREEN_TIME / 1000;
 80004a4:	4b85      	ldr	r3, [pc, #532]	; (80006bc <fsm_automatic+0x2e0>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a82      	ldr	r2, [pc, #520]	; (80006b4 <fsm_automatic+0x2d8>)
 80004aa:	fb82 1203 	smull	r1, r2, r2, r3
 80004ae:	1192      	asrs	r2, r2, #6
 80004b0:	17db      	asrs	r3, r3, #31
 80004b2:	1ad3      	subs	r3, r2, r3
 80004b4:	4a82      	ldr	r2, [pc, #520]	; (80006c0 <fsm_automatic+0x2e4>)
 80004b6:	6013      	str	r3, [r2, #0]
	        update_buffer();
 80004b8:	f000 fb9e 	bl	8000bf8 <update_buffer>
			setTimer2(1000);
 80004bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004c0:	f000 fee4 	bl	800128c <setTimer2>
			setTimer3(150);
 80004c4:	2096      	movs	r0, #150	; 0x96
 80004c6:	f000 fefb 	bl	80012c0 <setTimer3>
			break;
 80004ca:	e0ea      	b.n	80006a2 <fsm_automatic+0x2c6>
		case AUTO_RED_GREEN:
			traffic_light(RED_GREEN);
 80004cc:	200b      	movs	r0, #11
 80004ce:	f001 f80f 	bl	80014f0 <traffic_light>
			led7_segment();
 80004d2:	f000 fbd1 	bl	8000c78 <led7_segment>
	        if (timer2_flag == 1) {
 80004d6:	4b7b      	ldr	r3, [pc, #492]	; (80006c4 <fsm_automatic+0x2e8>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d110      	bne.n	8000500 <fsm_automatic+0x124>
	        	timer2_flag = 0;
 80004de:	4b79      	ldr	r3, [pc, #484]	; (80006c4 <fsm_automatic+0x2e8>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
	        	time_lane1--;
 80004e4:	4b74      	ldr	r3, [pc, #464]	; (80006b8 <fsm_automatic+0x2dc>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	3b01      	subs	r3, #1
 80004ea:	4a73      	ldr	r2, [pc, #460]	; (80006b8 <fsm_automatic+0x2dc>)
 80004ec:	6013      	str	r3, [r2, #0]
	        	time_lane2--;
 80004ee:	4b74      	ldr	r3, [pc, #464]	; (80006c0 <fsm_automatic+0x2e4>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	3b01      	subs	r3, #1
 80004f4:	4a72      	ldr	r2, [pc, #456]	; (80006c0 <fsm_automatic+0x2e4>)
 80004f6:	6013      	str	r3, [r2, #0]
	        	setTimer2(1000);
 80004f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004fc:	f000 fec6 	bl	800128c <setTimer2>
	        }
			if (time_lane2 == 0) {
 8000500:	4b6f      	ldr	r3, [pc, #444]	; (80006c0 <fsm_automatic+0x2e4>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	f040 80c5 	bne.w	8000694 <fsm_automatic+0x2b8>
				status = AUTO_RED_YELLOW;
 800050a:	4b67      	ldr	r3, [pc, #412]	; (80006a8 <fsm_automatic+0x2cc>)
 800050c:	2203      	movs	r2, #3
 800050e:	601a      	str	r2, [r3, #0]
		        time_lane2 = YELLOW_TIME / 1000;
 8000510:	4b6d      	ldr	r3, [pc, #436]	; (80006c8 <fsm_automatic+0x2ec>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a67      	ldr	r2, [pc, #412]	; (80006b4 <fsm_automatic+0x2d8>)
 8000516:	fb82 1203 	smull	r1, r2, r2, r3
 800051a:	1192      	asrs	r2, r2, #6
 800051c:	17db      	asrs	r3, r3, #31
 800051e:	1ad3      	subs	r3, r2, r3
 8000520:	4a67      	ldr	r2, [pc, #412]	; (80006c0 <fsm_automatic+0x2e4>)
 8000522:	6013      	str	r3, [r2, #0]
				setTimer2(1000);
 8000524:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000528:	f000 feb0 	bl	800128c <setTimer2>
				setTimer3(150);
 800052c:	2096      	movs	r0, #150	; 0x96
 800052e:	f000 fec7 	bl	80012c0 <setTimer3>
			}
			break;
 8000532:	e0af      	b.n	8000694 <fsm_automatic+0x2b8>
		case AUTO_RED_YELLOW:
			traffic_light(RED_YELLOW);
 8000534:	200c      	movs	r0, #12
 8000536:	f000 ffdb 	bl	80014f0 <traffic_light>
			led7_segment();
 800053a:	f000 fb9d 	bl	8000c78 <led7_segment>
	        if (timer2_flag == 1) {
 800053e:	4b61      	ldr	r3, [pc, #388]	; (80006c4 <fsm_automatic+0x2e8>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b01      	cmp	r3, #1
 8000544:	d110      	bne.n	8000568 <fsm_automatic+0x18c>
	        	timer2_flag = 0;
 8000546:	4b5f      	ldr	r3, [pc, #380]	; (80006c4 <fsm_automatic+0x2e8>)
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
	        	time_lane1--;
 800054c:	4b5a      	ldr	r3, [pc, #360]	; (80006b8 <fsm_automatic+0x2dc>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	3b01      	subs	r3, #1
 8000552:	4a59      	ldr	r2, [pc, #356]	; (80006b8 <fsm_automatic+0x2dc>)
 8000554:	6013      	str	r3, [r2, #0]
	        	time_lane2--;
 8000556:	4b5a      	ldr	r3, [pc, #360]	; (80006c0 <fsm_automatic+0x2e4>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	3b01      	subs	r3, #1
 800055c:	4a58      	ldr	r2, [pc, #352]	; (80006c0 <fsm_automatic+0x2e4>)
 800055e:	6013      	str	r3, [r2, #0]
	        	setTimer2(1000);
 8000560:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000564:	f000 fe92 	bl	800128c <setTimer2>
	        }
			if (time_lane2 == 0) {
 8000568:	4b55      	ldr	r3, [pc, #340]	; (80006c0 <fsm_automatic+0x2e4>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	f040 8093 	bne.w	8000698 <fsm_automatic+0x2bc>
				status = AUTO_GREEN_RED;
 8000572:	4b4d      	ldr	r3, [pc, #308]	; (80006a8 <fsm_automatic+0x2cc>)
 8000574:	2204      	movs	r2, #4
 8000576:	601a      	str	r2, [r3, #0]
		        time_lane1 = GREEN_TIME / 1000;
 8000578:	4b50      	ldr	r3, [pc, #320]	; (80006bc <fsm_automatic+0x2e0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a4d      	ldr	r2, [pc, #308]	; (80006b4 <fsm_automatic+0x2d8>)
 800057e:	fb82 1203 	smull	r1, r2, r2, r3
 8000582:	1192      	asrs	r2, r2, #6
 8000584:	17db      	asrs	r3, r3, #31
 8000586:	1ad3      	subs	r3, r2, r3
 8000588:	4a4b      	ldr	r2, [pc, #300]	; (80006b8 <fsm_automatic+0x2dc>)
 800058a:	6013      	str	r3, [r2, #0]
		        time_lane2 = RED_TIME / 1000;
 800058c:	4b48      	ldr	r3, [pc, #288]	; (80006b0 <fsm_automatic+0x2d4>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a48      	ldr	r2, [pc, #288]	; (80006b4 <fsm_automatic+0x2d8>)
 8000592:	fb82 1203 	smull	r1, r2, r2, r3
 8000596:	1192      	asrs	r2, r2, #6
 8000598:	17db      	asrs	r3, r3, #31
 800059a:	1ad3      	subs	r3, r2, r3
 800059c:	4a48      	ldr	r2, [pc, #288]	; (80006c0 <fsm_automatic+0x2e4>)
 800059e:	6013      	str	r3, [r2, #0]
				setTimer2(1000);
 80005a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a4:	f000 fe72 	bl	800128c <setTimer2>
				setTimer3(150);
 80005a8:	2096      	movs	r0, #150	; 0x96
 80005aa:	f000 fe89 	bl	80012c0 <setTimer3>
			}
			break;
 80005ae:	e073      	b.n	8000698 <fsm_automatic+0x2bc>
		case AUTO_GREEN_RED:
			traffic_light(GREEN_RED);
 80005b0:	200d      	movs	r0, #13
 80005b2:	f000 ff9d 	bl	80014f0 <traffic_light>
			led7_segment();
 80005b6:	f000 fb5f 	bl	8000c78 <led7_segment>
	        if (timer2_flag == 1) {
 80005ba:	4b42      	ldr	r3, [pc, #264]	; (80006c4 <fsm_automatic+0x2e8>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d110      	bne.n	80005e4 <fsm_automatic+0x208>
	        	timer2_flag = 0;
 80005c2:	4b40      	ldr	r3, [pc, #256]	; (80006c4 <fsm_automatic+0x2e8>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
	        	time_lane1--;
 80005c8:	4b3b      	ldr	r3, [pc, #236]	; (80006b8 <fsm_automatic+0x2dc>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	3b01      	subs	r3, #1
 80005ce:	4a3a      	ldr	r2, [pc, #232]	; (80006b8 <fsm_automatic+0x2dc>)
 80005d0:	6013      	str	r3, [r2, #0]
	        	time_lane2--;
 80005d2:	4b3b      	ldr	r3, [pc, #236]	; (80006c0 <fsm_automatic+0x2e4>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	3b01      	subs	r3, #1
 80005d8:	4a39      	ldr	r2, [pc, #228]	; (80006c0 <fsm_automatic+0x2e4>)
 80005da:	6013      	str	r3, [r2, #0]
	        	setTimer2(1000);
 80005dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e0:	f000 fe54 	bl	800128c <setTimer2>
	        }
			if (time_lane1 == 0) {
 80005e4:	4b34      	ldr	r3, [pc, #208]	; (80006b8 <fsm_automatic+0x2dc>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d157      	bne.n	800069c <fsm_automatic+0x2c0>
				status = AUTO_YELLOW_RED;
 80005ec:	4b2e      	ldr	r3, [pc, #184]	; (80006a8 <fsm_automatic+0x2cc>)
 80005ee:	2205      	movs	r2, #5
 80005f0:	601a      	str	r2, [r3, #0]
		        time_lane1 = YELLOW_TIME / 1000;
 80005f2:	4b35      	ldr	r3, [pc, #212]	; (80006c8 <fsm_automatic+0x2ec>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a2f      	ldr	r2, [pc, #188]	; (80006b4 <fsm_automatic+0x2d8>)
 80005f8:	fb82 1203 	smull	r1, r2, r2, r3
 80005fc:	1192      	asrs	r2, r2, #6
 80005fe:	17db      	asrs	r3, r3, #31
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	4a2d      	ldr	r2, [pc, #180]	; (80006b8 <fsm_automatic+0x2dc>)
 8000604:	6013      	str	r3, [r2, #0]
				setTimer2(1000);
 8000606:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800060a:	f000 fe3f 	bl	800128c <setTimer2>
				setTimer3(150);
 800060e:	2096      	movs	r0, #150	; 0x96
 8000610:	f000 fe56 	bl	80012c0 <setTimer3>
			}
			break;
 8000614:	e042      	b.n	800069c <fsm_automatic+0x2c0>
		case AUTO_YELLOW_RED:
			traffic_light(YELLOW_RED);
 8000616:	200e      	movs	r0, #14
 8000618:	f000 ff6a 	bl	80014f0 <traffic_light>
			led7_segment();
 800061c:	f000 fb2c 	bl	8000c78 <led7_segment>
	        if (timer2_flag == 1) {
 8000620:	4b28      	ldr	r3, [pc, #160]	; (80006c4 <fsm_automatic+0x2e8>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d110      	bne.n	800064a <fsm_automatic+0x26e>
	        	timer2_flag = 0;
 8000628:	4b26      	ldr	r3, [pc, #152]	; (80006c4 <fsm_automatic+0x2e8>)
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
	        	time_lane1--;
 800062e:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <fsm_automatic+0x2dc>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	3b01      	subs	r3, #1
 8000634:	4a20      	ldr	r2, [pc, #128]	; (80006b8 <fsm_automatic+0x2dc>)
 8000636:	6013      	str	r3, [r2, #0]
	        	time_lane2--;
 8000638:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <fsm_automatic+0x2e4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	3b01      	subs	r3, #1
 800063e:	4a20      	ldr	r2, [pc, #128]	; (80006c0 <fsm_automatic+0x2e4>)
 8000640:	6013      	str	r3, [r2, #0]
	        	setTimer2(1000);
 8000642:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000646:	f000 fe21 	bl	800128c <setTimer2>
	        }
			if (time_lane1 == 0) {
 800064a:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <fsm_automatic+0x2dc>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d126      	bne.n	80006a0 <fsm_automatic+0x2c4>
				status = AUTO_RED_GREEN;
 8000652:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <fsm_automatic+0x2cc>)
 8000654:	2202      	movs	r2, #2
 8000656:	601a      	str	r2, [r3, #0]
		        time_lane1 = RED_TIME / 1000;
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <fsm_automatic+0x2d4>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a15      	ldr	r2, [pc, #84]	; (80006b4 <fsm_automatic+0x2d8>)
 800065e:	fb82 1203 	smull	r1, r2, r2, r3
 8000662:	1192      	asrs	r2, r2, #6
 8000664:	17db      	asrs	r3, r3, #31
 8000666:	1ad3      	subs	r3, r2, r3
 8000668:	4a13      	ldr	r2, [pc, #76]	; (80006b8 <fsm_automatic+0x2dc>)
 800066a:	6013      	str	r3, [r2, #0]
		        time_lane2 = GREEN_TIME / 1000;
 800066c:	4b13      	ldr	r3, [pc, #76]	; (80006bc <fsm_automatic+0x2e0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a10      	ldr	r2, [pc, #64]	; (80006b4 <fsm_automatic+0x2d8>)
 8000672:	fb82 1203 	smull	r1, r2, r2, r3
 8000676:	1192      	asrs	r2, r2, #6
 8000678:	17db      	asrs	r3, r3, #31
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	4a10      	ldr	r2, [pc, #64]	; (80006c0 <fsm_automatic+0x2e4>)
 800067e:	6013      	str	r3, [r2, #0]
				setTimer2(1000);
 8000680:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000684:	f000 fe02 	bl	800128c <setTimer2>
				setTimer3(150);
 8000688:	2096      	movs	r0, #150	; 0x96
 800068a:	f000 fe19 	bl	80012c0 <setTimer3>
			}
			break;
 800068e:	e007      	b.n	80006a0 <fsm_automatic+0x2c4>
		default:
			break;
 8000690:	bf00      	nop
 8000692:	e006      	b.n	80006a2 <fsm_automatic+0x2c6>
			break;
 8000694:	bf00      	nop
 8000696:	e004      	b.n	80006a2 <fsm_automatic+0x2c6>
			break;
 8000698:	bf00      	nop
 800069a:	e002      	b.n	80006a2 <fsm_automatic+0x2c6>
			break;
 800069c:	bf00      	nop
 800069e:	e000      	b.n	80006a2 <fsm_automatic+0x2c6>
			break;
 80006a0:	bf00      	nop
	}
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000048 	.word	0x20000048
 80006ac:	40010800 	.word	0x40010800
 80006b0:	2000003c 	.word	0x2000003c
 80006b4:	10624dd3 	.word	0x10624dd3
 80006b8:	200000d8 	.word	0x200000d8
 80006bc:	20000044 	.word	0x20000044
 80006c0:	200000dc 	.word	0x200000dc
 80006c4:	200000c4 	.word	0x200000c4
 80006c8:	20000040 	.word	0x20000040

080006cc <fsm_manual>:
int MODE = MODE_NORMAL;
int RED_TIME_MODIFY = 5000;
int YELLOW_TIME_MODIFY = 2000;
int GREEN_TIME_MODIFY = 3000;

void fsm_manual() {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
    if (button1_flag == 1) {
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <fsm_manual+0xcc>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d13b      	bne.n	8000750 <fsm_manual+0x84>
    	button1_flag = 0;
 80006d8:	4b2f      	ldr	r3, [pc, #188]	; (8000798 <fsm_manual+0xcc>)
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
        switch (MODE) {
 80006de:	4b2f      	ldr	r3, [pc, #188]	; (800079c <fsm_manual+0xd0>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	3b15      	subs	r3, #21
 80006e4:	2b03      	cmp	r3, #3
 80006e6:	d835      	bhi.n	8000754 <fsm_manual+0x88>
 80006e8:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <fsm_manual+0x24>)
 80006ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ee:	bf00      	nop
 80006f0:	08000701 	.word	0x08000701
 80006f4:	0800071b 	.word	0x0800071b
 80006f8:	0800072f 	.word	0x0800072f
 80006fc:	08000743 	.word	0x08000743
            case MODE_NORMAL:
            	status = MODIFY;
 8000700:	4b27      	ldr	r3, [pc, #156]	; (80007a0 <fsm_manual+0xd4>)
 8000702:	2206      	movs	r2, #6
 8000704:	601a      	str	r2, [r3, #0]
                MODE = MODE_RED_MODIFY;
 8000706:	4b25      	ldr	r3, [pc, #148]	; (800079c <fsm_manual+0xd0>)
 8000708:	2216      	movs	r2, #22
 800070a:	601a      	str	r2, [r3, #0]
                traffic_light(RED_MODIFY);
 800070c:	200f      	movs	r0, #15
 800070e:	f000 feef 	bl	80014f0 <traffic_light>
                setTimer4(250);
 8000712:	20fa      	movs	r0, #250	; 0xfa
 8000714:	f000 fdee 	bl	80012f4 <setTimer4>
                break;
 8000718:	e01d      	b.n	8000756 <fsm_manual+0x8a>
            case MODE_RED_MODIFY:
                MODE = MODE_YELLOW_MODIFY;
 800071a:	4b20      	ldr	r3, [pc, #128]	; (800079c <fsm_manual+0xd0>)
 800071c:	2217      	movs	r2, #23
 800071e:	601a      	str	r2, [r3, #0]
                traffic_light(YELLOW_MODIFY);
 8000720:	2010      	movs	r0, #16
 8000722:	f000 fee5 	bl	80014f0 <traffic_light>
                setTimer4(250);
 8000726:	20fa      	movs	r0, #250	; 0xfa
 8000728:	f000 fde4 	bl	80012f4 <setTimer4>
                break;
 800072c:	e013      	b.n	8000756 <fsm_manual+0x8a>
            case MODE_YELLOW_MODIFY:
                MODE = MODE_GREEN_MODIFY;
 800072e:	4b1b      	ldr	r3, [pc, #108]	; (800079c <fsm_manual+0xd0>)
 8000730:	2218      	movs	r2, #24
 8000732:	601a      	str	r2, [r3, #0]
                traffic_light(GREEN_MODIFY);
 8000734:	2011      	movs	r0, #17
 8000736:	f000 fedb 	bl	80014f0 <traffic_light>
                setTimer4(250);
 800073a:	20fa      	movs	r0, #250	; 0xfa
 800073c:	f000 fdda 	bl	80012f4 <setTimer4>
                break;
 8000740:	e009      	b.n	8000756 <fsm_manual+0x8a>
            case MODE_GREEN_MODIFY:
                MODE = MODE_NORMAL;
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <fsm_manual+0xd0>)
 8000744:	2215      	movs	r2, #21
 8000746:	601a      	str	r2, [r3, #0]
                status = INIT;
 8000748:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <fsm_manual+0xd4>)
 800074a:	2201      	movs	r2, #1
 800074c:	601a      	str	r2, [r3, #0]
                break;
 800074e:	e002      	b.n	8000756 <fsm_manual+0x8a>
            default:
            	break;
        }
    }
 8000750:	bf00      	nop
 8000752:	e000      	b.n	8000756 <fsm_manual+0x8a>
            	break;
 8000754:	bf00      	nop
    	switch (MODE) {
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <fsm_manual+0xd0>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	2b18      	cmp	r3, #24
 800075c:	d012      	beq.n	8000784 <fsm_manual+0xb8>
 800075e:	2b18      	cmp	r3, #24
 8000760:	dc16      	bgt.n	8000790 <fsm_manual+0xc4>
 8000762:	2b16      	cmp	r3, #22
 8000764:	d002      	beq.n	800076c <fsm_manual+0xa0>
 8000766:	2b17      	cmp	r3, #23
 8000768:	d006      	beq.n	8000778 <fsm_manual+0xac>
    			break;
    		case MODE_GREEN_MODIFY:
    			display_modify(GREEN_TIME_MODIFY);
    			break;
    		default:
    			break;
 800076a:	e011      	b.n	8000790 <fsm_manual+0xc4>
    			display_modify(RED_TIME_MODIFY);
 800076c:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <fsm_manual+0xd8>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4618      	mov	r0, r3
 8000772:	f000 fb1b 	bl	8000dac <display_modify>
    			break;
 8000776:	e00c      	b.n	8000792 <fsm_manual+0xc6>
    			display_modify(YELLOW_TIME_MODIFY);
 8000778:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <fsm_manual+0xdc>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4618      	mov	r0, r3
 800077e:	f000 fb15 	bl	8000dac <display_modify>
    			break;
 8000782:	e006      	b.n	8000792 <fsm_manual+0xc6>
    			display_modify(GREEN_TIME_MODIFY);
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <fsm_manual+0xe0>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4618      	mov	r0, r3
 800078a:	f000 fb0f 	bl	8000dac <display_modify>
    			break;
 800078e:	e000      	b.n	8000792 <fsm_manual+0xc6>
    			break;
 8000790:	bf00      	nop
    }
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200000a4 	.word	0x200000a4
 800079c:	2000004c 	.word	0x2000004c
 80007a0:	20000048 	.word	0x20000048
 80007a4:	20000050 	.word	0x20000050
 80007a8:	20000054 	.word	0x20000054
 80007ac:	20000058 	.word	0x20000058

080007b0 <fsm_setting>:
 *      Author: TIEN DUY
 */

#include "global.h"

void fsm_setting() {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	switch (MODE) {
 80007b4:	4b36      	ldr	r3, [pc, #216]	; (8000890 <fsm_setting+0xe0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b18      	cmp	r3, #24
 80007ba:	d042      	beq.n	8000842 <fsm_setting+0x92>
 80007bc:	2b18      	cmp	r3, #24
 80007be:	dc5e      	bgt.n	800087e <fsm_setting+0xce>
 80007c0:	2b16      	cmp	r3, #22
 80007c2:	d002      	beq.n	80007ca <fsm_setting+0x1a>
 80007c4:	2b17      	cmp	r3, #23
 80007c6:	d01e      	beq.n	8000806 <fsm_setting+0x56>
		if (isButton3Pressed()) {
			GREEN_TIME = GREEN_TIME_MODIFY;
		}
		break;
	default:
		break;
 80007c8:	e059      	b.n	800087e <fsm_setting+0xce>
		if (isButton2Pressed()) {
 80007ca:	f7ff fcbf 	bl	800014c <isButton2Pressed>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d00e      	beq.n	80007f2 <fsm_setting+0x42>
		   RED_TIME_MODIFY = RED_TIME_MODIFY + 1000;
 80007d4:	4b2f      	ldr	r3, [pc, #188]	; (8000894 <fsm_setting+0xe4>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80007dc:	4a2d      	ldr	r2, [pc, #180]	; (8000894 <fsm_setting+0xe4>)
 80007de:	6013      	str	r3, [r2, #0]
		   if (RED_TIME_MODIFY > 99000) {
 80007e0:	4b2c      	ldr	r3, [pc, #176]	; (8000894 <fsm_setting+0xe4>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a2c      	ldr	r2, [pc, #176]	; (8000898 <fsm_setting+0xe8>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	dd03      	ble.n	80007f2 <fsm_setting+0x42>
			   RED_TIME_MODIFY = 1000;
 80007ea:	4b2a      	ldr	r3, [pc, #168]	; (8000894 <fsm_setting+0xe4>)
 80007ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007f0:	601a      	str	r2, [r3, #0]
		if (isButton3Pressed()) {
 80007f2:	f7ff fcbd 	bl	8000170 <isButton3Pressed>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d042      	beq.n	8000882 <fsm_setting+0xd2>
			RED_TIME = RED_TIME_MODIFY;
 80007fc:	4b25      	ldr	r3, [pc, #148]	; (8000894 <fsm_setting+0xe4>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a26      	ldr	r2, [pc, #152]	; (800089c <fsm_setting+0xec>)
 8000802:	6013      	str	r3, [r2, #0]
		break;
 8000804:	e03d      	b.n	8000882 <fsm_setting+0xd2>
		if (isButton2Pressed()) {
 8000806:	f7ff fca1 	bl	800014c <isButton2Pressed>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d00e      	beq.n	800082e <fsm_setting+0x7e>
		    YELLOW_TIME_MODIFY = YELLOW_TIME_MODIFY + 1000;
 8000810:	4b23      	ldr	r3, [pc, #140]	; (80008a0 <fsm_setting+0xf0>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000818:	4a21      	ldr	r2, [pc, #132]	; (80008a0 <fsm_setting+0xf0>)
 800081a:	6013      	str	r3, [r2, #0]
		    if (YELLOW_TIME_MODIFY > 99000) {
 800081c:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <fsm_setting+0xf0>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a1d      	ldr	r2, [pc, #116]	; (8000898 <fsm_setting+0xe8>)
 8000822:	4293      	cmp	r3, r2
 8000824:	dd03      	ble.n	800082e <fsm_setting+0x7e>
		    	YELLOW_TIME_MODIFY = 1000;
 8000826:	4b1e      	ldr	r3, [pc, #120]	; (80008a0 <fsm_setting+0xf0>)
 8000828:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800082c:	601a      	str	r2, [r3, #0]
		if (isButton3Pressed()) {
 800082e:	f7ff fc9f 	bl	8000170 <isButton3Pressed>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d026      	beq.n	8000886 <fsm_setting+0xd6>
			YELLOW_TIME = YELLOW_TIME_MODIFY;
 8000838:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <fsm_setting+0xf0>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a19      	ldr	r2, [pc, #100]	; (80008a4 <fsm_setting+0xf4>)
 800083e:	6013      	str	r3, [r2, #0]
		break;
 8000840:	e021      	b.n	8000886 <fsm_setting+0xd6>
		if (isButton2Pressed()) {
 8000842:	f7ff fc83 	bl	800014c <isButton2Pressed>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d00e      	beq.n	800086a <fsm_setting+0xba>
		    GREEN_TIME_MODIFY = GREEN_TIME_MODIFY + 1000;
 800084c:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <fsm_setting+0xf8>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000854:	4a14      	ldr	r2, [pc, #80]	; (80008a8 <fsm_setting+0xf8>)
 8000856:	6013      	str	r3, [r2, #0]
		    if (GREEN_TIME_MODIFY > 99000) {
 8000858:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <fsm_setting+0xf8>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <fsm_setting+0xe8>)
 800085e:	4293      	cmp	r3, r2
 8000860:	dd03      	ble.n	800086a <fsm_setting+0xba>
		    	GREEN_TIME_MODIFY = 1000;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <fsm_setting+0xf8>)
 8000864:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000868:	601a      	str	r2, [r3, #0]
		if (isButton3Pressed()) {
 800086a:	f7ff fc81 	bl	8000170 <isButton3Pressed>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d00a      	beq.n	800088a <fsm_setting+0xda>
			GREEN_TIME = GREEN_TIME_MODIFY;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <fsm_setting+0xf8>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a0c      	ldr	r2, [pc, #48]	; (80008ac <fsm_setting+0xfc>)
 800087a:	6013      	str	r3, [r2, #0]
		break;
 800087c:	e005      	b.n	800088a <fsm_setting+0xda>
		break;
 800087e:	bf00      	nop
 8000880:	e004      	b.n	800088c <fsm_setting+0xdc>
		break;
 8000882:	bf00      	nop
 8000884:	e002      	b.n	800088c <fsm_setting+0xdc>
		break;
 8000886:	bf00      	nop
 8000888:	e000      	b.n	800088c <fsm_setting+0xdc>
		break;
 800088a:	bf00      	nop
	}
}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	2000004c 	.word	0x2000004c
 8000894:	20000050 	.word	0x20000050
 8000898:	000182b8 	.word	0x000182b8
 800089c:	2000003c 	.word	0x2000003c
 80008a0:	20000054 	.word	0x20000054
 80008a4:	20000040 	.word	0x20000040
 80008a8:	20000058 	.word	0x20000058
 80008ac:	20000044 	.word	0x20000044

080008b0 <display7SEG>:
extern int RED_TIME;
extern int GREEN_TIME;
extern int YELLOW_TIME;
int led_buffer[4] = {1,2,3,4};
int led_buffer1[3] = {2,3,4};
void display7SEG(int num) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	if (num == 0) {
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d125      	bne.n	800090a <display7SEG+0x5a>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2110      	movs	r1, #16
 80008c2:	48cc      	ldr	r0, [pc, #816]	; (8000bf4 <display7SEG+0x344>)
 80008c4:	f001 fb2d 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2120      	movs	r1, #32
 80008cc:	48c9      	ldr	r0, [pc, #804]	; (8000bf4 <display7SEG+0x344>)
 80008ce:	f001 fb28 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2140      	movs	r1, #64	; 0x40
 80008d6:	48c7      	ldr	r0, [pc, #796]	; (8000bf4 <display7SEG+0x344>)
 80008d8:	f001 fb23 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	2180      	movs	r1, #128	; 0x80
 80008e0:	48c4      	ldr	r0, [pc, #784]	; (8000bf4 <display7SEG+0x344>)
 80008e2:	f001 fb1e 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ec:	48c1      	ldr	r0, [pc, #772]	; (8000bf4 <display7SEG+0x344>)
 80008ee:	f001 fb18 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008f8:	48be      	ldr	r0, [pc, #760]	; (8000bf4 <display7SEG+0x344>)
 80008fa:	f001 fb12 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 80008fe:	2201      	movs	r2, #1
 8000900:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000904:	48bb      	ldr	r0, [pc, #748]	; (8000bf4 <display7SEG+0x344>)
 8000906:	f001 fb0c 	bl	8001f22 <HAL_GPIO_WritePin>
	}
	if (num == 1) {
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d125      	bne.n	800095c <display7SEG+0xac>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000910:	2201      	movs	r2, #1
 8000912:	2110      	movs	r1, #16
 8000914:	48b7      	ldr	r0, [pc, #732]	; (8000bf4 <display7SEG+0x344>)
 8000916:	f001 fb04 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	2120      	movs	r1, #32
 800091e:	48b5      	ldr	r0, [pc, #724]	; (8000bf4 <display7SEG+0x344>)
 8000920:	f001 faff 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	2140      	movs	r1, #64	; 0x40
 8000928:	48b2      	ldr	r0, [pc, #712]	; (8000bf4 <display7SEG+0x344>)
 800092a:	f001 fafa 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 800092e:	2201      	movs	r2, #1
 8000930:	2180      	movs	r1, #128	; 0x80
 8000932:	48b0      	ldr	r0, [pc, #704]	; (8000bf4 <display7SEG+0x344>)
 8000934:	f001 faf5 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000938:	2201      	movs	r2, #1
 800093a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800093e:	48ad      	ldr	r0, [pc, #692]	; (8000bf4 <display7SEG+0x344>)
 8000940:	f001 faef 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000944:	2201      	movs	r2, #1
 8000946:	f44f 7100 	mov.w	r1, #512	; 0x200
 800094a:	48aa      	ldr	r0, [pc, #680]	; (8000bf4 <display7SEG+0x344>)
 800094c:	f001 fae9 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000950:	2201      	movs	r2, #1
 8000952:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000956:	48a7      	ldr	r0, [pc, #668]	; (8000bf4 <display7SEG+0x344>)
 8000958:	f001 fae3 	bl	8001f22 <HAL_GPIO_WritePin>
	}
	if (num == 2) {
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2b02      	cmp	r3, #2
 8000960:	d125      	bne.n	80009ae <display7SEG+0xfe>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2110      	movs	r1, #16
 8000966:	48a3      	ldr	r0, [pc, #652]	; (8000bf4 <display7SEG+0x344>)
 8000968:	f001 fadb 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	2120      	movs	r1, #32
 8000970:	48a0      	ldr	r0, [pc, #640]	; (8000bf4 <display7SEG+0x344>)
 8000972:	f001 fad6 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 8000976:	2201      	movs	r2, #1
 8000978:	2140      	movs	r1, #64	; 0x40
 800097a:	489e      	ldr	r0, [pc, #632]	; (8000bf4 <display7SEG+0x344>)
 800097c:	f001 fad1 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	2180      	movs	r1, #128	; 0x80
 8000984:	489b      	ldr	r0, [pc, #620]	; (8000bf4 <display7SEG+0x344>)
 8000986:	f001 facc 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000990:	4898      	ldr	r0, [pc, #608]	; (8000bf4 <display7SEG+0x344>)
 8000992:	f001 fac6 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000996:	2201      	movs	r2, #1
 8000998:	f44f 7100 	mov.w	r1, #512	; 0x200
 800099c:	4895      	ldr	r0, [pc, #596]	; (8000bf4 <display7SEG+0x344>)
 800099e:	f001 fac0 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009a8:	4892      	ldr	r0, [pc, #584]	; (8000bf4 <display7SEG+0x344>)
 80009aa:	f001 faba 	bl	8001f22 <HAL_GPIO_WritePin>
	}
	if (num == 3) {
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2b03      	cmp	r3, #3
 80009b2:	d125      	bne.n	8000a00 <display7SEG+0x150>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2110      	movs	r1, #16
 80009b8:	488e      	ldr	r0, [pc, #568]	; (8000bf4 <display7SEG+0x344>)
 80009ba:	f001 fab2 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	2120      	movs	r1, #32
 80009c2:	488c      	ldr	r0, [pc, #560]	; (8000bf4 <display7SEG+0x344>)
 80009c4:	f001 faad 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2140      	movs	r1, #64	; 0x40
 80009cc:	4889      	ldr	r0, [pc, #548]	; (8000bf4 <display7SEG+0x344>)
 80009ce:	f001 faa8 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	4887      	ldr	r0, [pc, #540]	; (8000bf4 <display7SEG+0x344>)
 80009d8:	f001 faa3 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80009dc:	2201      	movs	r2, #1
 80009de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e2:	4884      	ldr	r0, [pc, #528]	; (8000bf4 <display7SEG+0x344>)
 80009e4:	f001 fa9d 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 80009e8:	2201      	movs	r2, #1
 80009ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ee:	4881      	ldr	r0, [pc, #516]	; (8000bf4 <display7SEG+0x344>)
 80009f0:	f001 fa97 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009fa:	487e      	ldr	r0, [pc, #504]	; (8000bf4 <display7SEG+0x344>)
 80009fc:	f001 fa91 	bl	8001f22 <HAL_GPIO_WritePin>
	}
	if (num == 4) {
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	d125      	bne.n	8000a52 <display7SEG+0x1a2>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000a06:	2201      	movs	r2, #1
 8000a08:	2110      	movs	r1, #16
 8000a0a:	487a      	ldr	r0, [pc, #488]	; (8000bf4 <display7SEG+0x344>)
 8000a0c:	f001 fa89 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2120      	movs	r1, #32
 8000a14:	4877      	ldr	r0, [pc, #476]	; (8000bf4 <display7SEG+0x344>)
 8000a16:	f001 fa84 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2140      	movs	r1, #64	; 0x40
 8000a1e:	4875      	ldr	r0, [pc, #468]	; (8000bf4 <display7SEG+0x344>)
 8000a20:	f001 fa7f 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2180      	movs	r1, #128	; 0x80
 8000a28:	4872      	ldr	r0, [pc, #456]	; (8000bf4 <display7SEG+0x344>)
 8000a2a:	f001 fa7a 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a34:	486f      	ldr	r0, [pc, #444]	; (8000bf4 <display7SEG+0x344>)
 8000a36:	f001 fa74 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a40:	486c      	ldr	r0, [pc, #432]	; (8000bf4 <display7SEG+0x344>)
 8000a42:	f001 fa6e 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a4c:	4869      	ldr	r0, [pc, #420]	; (8000bf4 <display7SEG+0x344>)
 8000a4e:	f001 fa68 	bl	8001f22 <HAL_GPIO_WritePin>
	}
	if (num == 5) {
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b05      	cmp	r3, #5
 8000a56:	d125      	bne.n	8000aa4 <display7SEG+0x1f4>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2110      	movs	r1, #16
 8000a5c:	4865      	ldr	r0, [pc, #404]	; (8000bf4 <display7SEG+0x344>)
 8000a5e:	f001 fa60 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000a62:	2201      	movs	r2, #1
 8000a64:	2120      	movs	r1, #32
 8000a66:	4863      	ldr	r0, [pc, #396]	; (8000bf4 <display7SEG+0x344>)
 8000a68:	f001 fa5b 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2140      	movs	r1, #64	; 0x40
 8000a70:	4860      	ldr	r0, [pc, #384]	; (8000bf4 <display7SEG+0x344>)
 8000a72:	f001 fa56 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2180      	movs	r1, #128	; 0x80
 8000a7a:	485e      	ldr	r0, [pc, #376]	; (8000bf4 <display7SEG+0x344>)
 8000a7c:	f001 fa51 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a86:	485b      	ldr	r0, [pc, #364]	; (8000bf4 <display7SEG+0x344>)
 8000a88:	f001 fa4b 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a92:	4858      	ldr	r0, [pc, #352]	; (8000bf4 <display7SEG+0x344>)
 8000a94:	f001 fa45 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a9e:	4855      	ldr	r0, [pc, #340]	; (8000bf4 <display7SEG+0x344>)
 8000aa0:	f001 fa3f 	bl	8001f22 <HAL_GPIO_WritePin>
	}
	if (num == 6) {
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2b06      	cmp	r3, #6
 8000aa8:	d125      	bne.n	8000af6 <display7SEG+0x246>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2110      	movs	r1, #16
 8000aae:	4851      	ldr	r0, [pc, #324]	; (8000bf4 <display7SEG+0x344>)
 8000ab0:	f001 fa37 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2120      	movs	r1, #32
 8000ab8:	484e      	ldr	r0, [pc, #312]	; (8000bf4 <display7SEG+0x344>)
 8000aba:	f001 fa32 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2140      	movs	r1, #64	; 0x40
 8000ac2:	484c      	ldr	r0, [pc, #304]	; (8000bf4 <display7SEG+0x344>)
 8000ac4:	f001 fa2d 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2180      	movs	r1, #128	; 0x80
 8000acc:	4849      	ldr	r0, [pc, #292]	; (8000bf4 <display7SEG+0x344>)
 8000ace:	f001 fa28 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ad8:	4846      	ldr	r0, [pc, #280]	; (8000bf4 <display7SEG+0x344>)
 8000ada:	f001 fa22 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae4:	4843      	ldr	r0, [pc, #268]	; (8000bf4 <display7SEG+0x344>)
 8000ae6:	f001 fa1c 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af0:	4840      	ldr	r0, [pc, #256]	; (8000bf4 <display7SEG+0x344>)
 8000af2:	f001 fa16 	bl	8001f22 <HAL_GPIO_WritePin>
	}
	if (num == 7) {
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2b07      	cmp	r3, #7
 8000afa:	d125      	bne.n	8000b48 <display7SEG+0x298>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2110      	movs	r1, #16
 8000b00:	483c      	ldr	r0, [pc, #240]	; (8000bf4 <display7SEG+0x344>)
 8000b02:	f001 fa0e 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2120      	movs	r1, #32
 8000b0a:	483a      	ldr	r0, [pc, #232]	; (8000bf4 <display7SEG+0x344>)
 8000b0c:	f001 fa09 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2140      	movs	r1, #64	; 0x40
 8000b14:	4837      	ldr	r0, [pc, #220]	; (8000bf4 <display7SEG+0x344>)
 8000b16:	f001 fa04 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	2180      	movs	r1, #128	; 0x80
 8000b1e:	4835      	ldr	r0, [pc, #212]	; (8000bf4 <display7SEG+0x344>)
 8000b20:	f001 f9ff 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b2a:	4832      	ldr	r0, [pc, #200]	; (8000bf4 <display7SEG+0x344>)
 8000b2c:	f001 f9f9 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000b30:	2201      	movs	r2, #1
 8000b32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b36:	482f      	ldr	r0, [pc, #188]	; (8000bf4 <display7SEG+0x344>)
 8000b38:	f001 f9f3 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b42:	482c      	ldr	r0, [pc, #176]	; (8000bf4 <display7SEG+0x344>)
 8000b44:	f001 f9ed 	bl	8001f22 <HAL_GPIO_WritePin>
	}
	if (num == 8) {
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b08      	cmp	r3, #8
 8000b4c:	d125      	bne.n	8000b9a <display7SEG+0x2ea>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2110      	movs	r1, #16
 8000b52:	4828      	ldr	r0, [pc, #160]	; (8000bf4 <display7SEG+0x344>)
 8000b54:	f001 f9e5 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2120      	movs	r1, #32
 8000b5c:	4825      	ldr	r0, [pc, #148]	; (8000bf4 <display7SEG+0x344>)
 8000b5e:	f001 f9e0 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2140      	movs	r1, #64	; 0x40
 8000b66:	4823      	ldr	r0, [pc, #140]	; (8000bf4 <display7SEG+0x344>)
 8000b68:	f001 f9db 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2180      	movs	r1, #128	; 0x80
 8000b70:	4820      	ldr	r0, [pc, #128]	; (8000bf4 <display7SEG+0x344>)
 8000b72:	f001 f9d6 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b7c:	481d      	ldr	r0, [pc, #116]	; (8000bf4 <display7SEG+0x344>)
 8000b7e:	f001 f9d0 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b88:	481a      	ldr	r0, [pc, #104]	; (8000bf4 <display7SEG+0x344>)
 8000b8a:	f001 f9ca 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b94:	4817      	ldr	r0, [pc, #92]	; (8000bf4 <display7SEG+0x344>)
 8000b96:	f001 f9c4 	bl	8001f22 <HAL_GPIO_WritePin>
	}
	if (num == 9) {
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2b09      	cmp	r3, #9
 8000b9e:	d125      	bne.n	8000bec <display7SEG+0x33c>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2110      	movs	r1, #16
 8000ba4:	4813      	ldr	r0, [pc, #76]	; (8000bf4 <display7SEG+0x344>)
 8000ba6:	f001 f9bc 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2120      	movs	r1, #32
 8000bae:	4811      	ldr	r0, [pc, #68]	; (8000bf4 <display7SEG+0x344>)
 8000bb0:	f001 f9b7 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2140      	movs	r1, #64	; 0x40
 8000bb8:	480e      	ldr	r0, [pc, #56]	; (8000bf4 <display7SEG+0x344>)
 8000bba:	f001 f9b2 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2180      	movs	r1, #128	; 0x80
 8000bc2:	480c      	ldr	r0, [pc, #48]	; (8000bf4 <display7SEG+0x344>)
 8000bc4:	f001 f9ad 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bce:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <display7SEG+0x344>)
 8000bd0:	f001 f9a7 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bda:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <display7SEG+0x344>)
 8000bdc:	f001 f9a1 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000be6:	4803      	ldr	r0, [pc, #12]	; (8000bf4 <display7SEG+0x344>)
 8000be8:	f001 f99b 	bl	8001f22 <HAL_GPIO_WritePin>
	}
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40010c00 	.word	0x40010c00

08000bf8 <update_buffer>:
void update_buffer() {
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
    led_buffer[0] = time_lane1 / 10;
 8000bfc:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <update_buffer+0x70>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a1a      	ldr	r2, [pc, #104]	; (8000c6c <update_buffer+0x74>)
 8000c02:	fb82 1203 	smull	r1, r2, r2, r3
 8000c06:	1092      	asrs	r2, r2, #2
 8000c08:	17db      	asrs	r3, r3, #31
 8000c0a:	1ad3      	subs	r3, r2, r3
 8000c0c:	4a18      	ldr	r2, [pc, #96]	; (8000c70 <update_buffer+0x78>)
 8000c0e:	6013      	str	r3, [r2, #0]
    led_buffer[1] = time_lane1 % 10;
 8000c10:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <update_buffer+0x70>)
 8000c12:	6819      	ldr	r1, [r3, #0]
 8000c14:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <update_buffer+0x74>)
 8000c16:	fb83 2301 	smull	r2, r3, r3, r1
 8000c1a:	109a      	asrs	r2, r3, #2
 8000c1c:	17cb      	asrs	r3, r1, #31
 8000c1e:	1ad2      	subs	r2, r2, r3
 8000c20:	4613      	mov	r3, r2
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	4413      	add	r3, r2
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	1aca      	subs	r2, r1, r3
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <update_buffer+0x78>)
 8000c2c:	605a      	str	r2, [r3, #4]
    led_buffer[2] = time_lane2 / 10;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <update_buffer+0x7c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <update_buffer+0x74>)
 8000c34:	fb82 1203 	smull	r1, r2, r2, r3
 8000c38:	1092      	asrs	r2, r2, #2
 8000c3a:	17db      	asrs	r3, r3, #31
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	4a0c      	ldr	r2, [pc, #48]	; (8000c70 <update_buffer+0x78>)
 8000c40:	6093      	str	r3, [r2, #8]
    led_buffer[3] = time_lane2 % 10;
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <update_buffer+0x7c>)
 8000c44:	6819      	ldr	r1, [r3, #0]
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <update_buffer+0x74>)
 8000c48:	fb83 2301 	smull	r2, r3, r3, r1
 8000c4c:	109a      	asrs	r2, r3, #2
 8000c4e:	17cb      	asrs	r3, r1, #31
 8000c50:	1ad2      	subs	r2, r2, r3
 8000c52:	4613      	mov	r3, r2
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	4413      	add	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	1aca      	subs	r2, r1, r3
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <update_buffer+0x78>)
 8000c5e:	60da      	str	r2, [r3, #12]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	200000d8 	.word	0x200000d8
 8000c6c:	66666667 	.word	0x66666667
 8000c70:	2000005c 	.word	0x2000005c
 8000c74:	200000dc 	.word	0x200000dc

08000c78 <led7_segment>:
void led7_segment() {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	update_buffer();
 8000c7c:	f7ff ffbc 	bl	8000bf8 <update_buffer>
       if (timer3_flag == 1) {
 8000c80:	4b46      	ldr	r3, [pc, #280]	; (8000d9c <led7_segment+0x124>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	f040 8087 	bne.w	8000d98 <led7_segment+0x120>
 		  switch (index_led) {
 8000c8a:	4b45      	ldr	r3, [pc, #276]	; (8000da0 <led7_segment+0x128>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2b03      	cmp	r3, #3
 8000c90:	d872      	bhi.n	8000d78 <led7_segment+0x100>
 8000c92:	a201      	add	r2, pc, #4	; (adr r2, 8000c98 <led7_segment+0x20>)
 8000c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c98:	08000ca9 	.word	0x08000ca9
 8000c9c:	08000cdd 	.word	0x08000cdd
 8000ca0:	08000d11 	.word	0x08000d11
 8000ca4:	08000d45 	.word	0x08000d45
 		  	case 0:
 		  		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2101      	movs	r1, #1
 8000cac:	483d      	ldr	r0, [pc, #244]	; (8000da4 <led7_segment+0x12c>)
 8000cae:	f001 f938 	bl	8001f22 <HAL_GPIO_WritePin>
 		  		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2102      	movs	r1, #2
 8000cb6:	483b      	ldr	r0, [pc, #236]	; (8000da4 <led7_segment+0x12c>)
 8000cb8:	f001 f933 	bl	8001f22 <HAL_GPIO_WritePin>
 		  		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2104      	movs	r1, #4
 8000cc0:	4838      	ldr	r0, [pc, #224]	; (8000da4 <led7_segment+0x12c>)
 8000cc2:	f001 f92e 	bl	8001f22 <HAL_GPIO_WritePin>
 		  		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	2108      	movs	r1, #8
 8000cca:	4836      	ldr	r0, [pc, #216]	; (8000da4 <led7_segment+0x12c>)
 8000ccc:	f001 f929 	bl	8001f22 <HAL_GPIO_WritePin>
 		  		display7SEG(led_buffer[0]);
 8000cd0:	4b35      	ldr	r3, [pc, #212]	; (8000da8 <led7_segment+0x130>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fdeb 	bl	80008b0 <display7SEG>
 		  		break;
 8000cda:	e04e      	b.n	8000d7a <led7_segment+0x102>
 		  	case 1:
 		  		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2101      	movs	r1, #1
 8000ce0:	4830      	ldr	r0, [pc, #192]	; (8000da4 <led7_segment+0x12c>)
 8000ce2:	f001 f91e 	bl	8001f22 <HAL_GPIO_WritePin>
 		  		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2102      	movs	r1, #2
 8000cea:	482e      	ldr	r0, [pc, #184]	; (8000da4 <led7_segment+0x12c>)
 8000cec:	f001 f919 	bl	8001f22 <HAL_GPIO_WritePin>
 		  		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	2104      	movs	r1, #4
 8000cf4:	482b      	ldr	r0, [pc, #172]	; (8000da4 <led7_segment+0x12c>)
 8000cf6:	f001 f914 	bl	8001f22 <HAL_GPIO_WritePin>
 		  		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2108      	movs	r1, #8
 8000cfe:	4829      	ldr	r0, [pc, #164]	; (8000da4 <led7_segment+0x12c>)
 8000d00:	f001 f90f 	bl	8001f22 <HAL_GPIO_WritePin>
 		  		display7SEG(led_buffer[1]);
 8000d04:	4b28      	ldr	r3, [pc, #160]	; (8000da8 <led7_segment+0x130>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fdd1 	bl	80008b0 <display7SEG>
 		  		break;
 8000d0e:	e034      	b.n	8000d7a <led7_segment+0x102>
 		  	case 2:
 		  		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000d10:	2201      	movs	r2, #1
 8000d12:	2101      	movs	r1, #1
 8000d14:	4823      	ldr	r0, [pc, #140]	; (8000da4 <led7_segment+0x12c>)
 8000d16:	f001 f904 	bl	8001f22 <HAL_GPIO_WritePin>
 		  		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	2102      	movs	r1, #2
 8000d1e:	4821      	ldr	r0, [pc, #132]	; (8000da4 <led7_segment+0x12c>)
 8000d20:	f001 f8ff 	bl	8001f22 <HAL_GPIO_WritePin>
 		  		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2104      	movs	r1, #4
 8000d28:	481e      	ldr	r0, [pc, #120]	; (8000da4 <led7_segment+0x12c>)
 8000d2a:	f001 f8fa 	bl	8001f22 <HAL_GPIO_WritePin>
 		  		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	2108      	movs	r1, #8
 8000d32:	481c      	ldr	r0, [pc, #112]	; (8000da4 <led7_segment+0x12c>)
 8000d34:	f001 f8f5 	bl	8001f22 <HAL_GPIO_WritePin>
 		  		display7SEG(led_buffer[2]);
 8000d38:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <led7_segment+0x130>)
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fdb7 	bl	80008b0 <display7SEG>
 		  		break;
 8000d42:	e01a      	b.n	8000d7a <led7_segment+0x102>
 		  	case 3:
 		  		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	2101      	movs	r1, #1
 8000d48:	4816      	ldr	r0, [pc, #88]	; (8000da4 <led7_segment+0x12c>)
 8000d4a:	f001 f8ea 	bl	8001f22 <HAL_GPIO_WritePin>
 		  		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2102      	movs	r1, #2
 8000d52:	4814      	ldr	r0, [pc, #80]	; (8000da4 <led7_segment+0x12c>)
 8000d54:	f001 f8e5 	bl	8001f22 <HAL_GPIO_WritePin>
 		  		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	2104      	movs	r1, #4
 8000d5c:	4811      	ldr	r0, [pc, #68]	; (8000da4 <led7_segment+0x12c>)
 8000d5e:	f001 f8e0 	bl	8001f22 <HAL_GPIO_WritePin>
 		  		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2108      	movs	r1, #8
 8000d66:	480f      	ldr	r0, [pc, #60]	; (8000da4 <led7_segment+0x12c>)
 8000d68:	f001 f8db 	bl	8001f22 <HAL_GPIO_WritePin>
 		  		display7SEG(led_buffer[3]);
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <led7_segment+0x130>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fd9d 	bl	80008b0 <display7SEG>
 		  		break;
 8000d76:	e000      	b.n	8000d7a <led7_segment+0x102>
 		  	default:
 		  		break;
 8000d78:	bf00      	nop
 		  	}
 		  index_led++;
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <led7_segment+0x128>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	4a07      	ldr	r2, [pc, #28]	; (8000da0 <led7_segment+0x128>)
 8000d82:	6013      	str	r3, [r2, #0]
 		  if (index_led > 3) {
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <led7_segment+0x128>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b03      	cmp	r3, #3
 8000d8a:	dd02      	ble.n	8000d92 <led7_segment+0x11a>
 			  index_led = 0;
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <led7_segment+0x128>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 		  }
 		  setTimer3(150);
 8000d92:	2096      	movs	r0, #150	; 0x96
 8000d94:	f000 fa94 	bl	80012c0 <setTimer3>
       }
   }
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	200000cc 	.word	0x200000cc
 8000da0:	200000b0 	.word	0x200000b0
 8000da4:	40010c00 	.word	0x40010c00
 8000da8:	2000005c 	.word	0x2000005c

08000dac <display_modify>:

void display_modify(int value) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
    int digit_high = (value / 1000) / 10;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a8c      	ldr	r2, [pc, #560]	; (8000fe8 <display_modify+0x23c>)
 8000db8:	fb82 1203 	smull	r1, r2, r2, r3
 8000dbc:	1312      	asrs	r2, r2, #12
 8000dbe:	17db      	asrs	r3, r3, #31
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	60fb      	str	r3, [r7, #12]
    int digit_low = (value / 1000) % 10;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a89      	ldr	r2, [pc, #548]	; (8000fec <display_modify+0x240>)
 8000dc8:	fb82 1203 	smull	r1, r2, r2, r3
 8000dcc:	1192      	asrs	r2, r2, #6
 8000dce:	17db      	asrs	r3, r3, #31
 8000dd0:	1ad2      	subs	r2, r2, r3
 8000dd2:	4b87      	ldr	r3, [pc, #540]	; (8000ff0 <display_modify+0x244>)
 8000dd4:	fb83 1302 	smull	r1, r3, r3, r2
 8000dd8:	1099      	asrs	r1, r3, #2
 8000dda:	17d3      	asrs	r3, r2, #31
 8000ddc:	1ac9      	subs	r1, r1, r3
 8000dde:	460b      	mov	r3, r1
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	440b      	add	r3, r1
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	60bb      	str	r3, [r7, #8]
    if (timer4_flag == 1) {
 8000dea:	4b82      	ldr	r3, [pc, #520]	; (8000ff4 <display_modify+0x248>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	f040 80f5 	bne.w	8000fde <display_modify+0x232>
        switch (index_led_manual) {
 8000df4:	4b80      	ldr	r3, [pc, #512]	; (8000ff8 <display_modify+0x24c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b03      	cmp	r3, #3
 8000dfa:	f200 809b 	bhi.w	8000f34 <display_modify+0x188>
 8000dfe:	a201      	add	r2, pc, #4	; (adr r2, 8000e04 <display_modify+0x58>)
 8000e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e04:	08000e15 	.word	0x08000e15
 8000e08:	08000e45 	.word	0x08000e45
 8000e0c:	08000e75 	.word	0x08000e75
 8000e10:	08000ed5 	.word	0x08000ed5
            case 0:
                HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2101      	movs	r1, #1
 8000e18:	4878      	ldr	r0, [pc, #480]	; (8000ffc <display_modify+0x250>)
 8000e1a:	f001 f882 	bl	8001f22 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000e1e:	2201      	movs	r2, #1
 8000e20:	2102      	movs	r1, #2
 8000e22:	4876      	ldr	r0, [pc, #472]	; (8000ffc <display_modify+0x250>)
 8000e24:	f001 f87d 	bl	8001f22 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2104      	movs	r1, #4
 8000e2c:	4873      	ldr	r0, [pc, #460]	; (8000ffc <display_modify+0x250>)
 8000e2e:	f001 f878 	bl	8001f22 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000e32:	2201      	movs	r2, #1
 8000e34:	2108      	movs	r1, #8
 8000e36:	4871      	ldr	r0, [pc, #452]	; (8000ffc <display_modify+0x250>)
 8000e38:	f001 f873 	bl	8001f22 <HAL_GPIO_WritePin>
                display7SEG(digit_high);
 8000e3c:	68f8      	ldr	r0, [r7, #12]
 8000e3e:	f7ff fd37 	bl	80008b0 <display7SEG>
                break;
 8000e42:	e07c      	b.n	8000f3e <display_modify+0x192>
            case 1:
                HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000e44:	2201      	movs	r2, #1
 8000e46:	2101      	movs	r1, #1
 8000e48:	486c      	ldr	r0, [pc, #432]	; (8000ffc <display_modify+0x250>)
 8000e4a:	f001 f86a 	bl	8001f22 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2102      	movs	r1, #2
 8000e52:	486a      	ldr	r0, [pc, #424]	; (8000ffc <display_modify+0x250>)
 8000e54:	f001 f865 	bl	8001f22 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2104      	movs	r1, #4
 8000e5c:	4867      	ldr	r0, [pc, #412]	; (8000ffc <display_modify+0x250>)
 8000e5e:	f001 f860 	bl	8001f22 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2108      	movs	r1, #8
 8000e66:	4865      	ldr	r0, [pc, #404]	; (8000ffc <display_modify+0x250>)
 8000e68:	f001 f85b 	bl	8001f22 <HAL_GPIO_WritePin>
                display7SEG(digit_low);
 8000e6c:	68b8      	ldr	r0, [r7, #8]
 8000e6e:	f7ff fd1f 	bl	80008b0 <display7SEG>
                break;
 8000e72:	e064      	b.n	8000f3e <display_modify+0x192>
            case 2:
                HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2101      	movs	r1, #1
 8000e78:	4860      	ldr	r0, [pc, #384]	; (8000ffc <display_modify+0x250>)
 8000e7a:	f001 f852 	bl	8001f22 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2102      	movs	r1, #2
 8000e82:	485e      	ldr	r0, [pc, #376]	; (8000ffc <display_modify+0x250>)
 8000e84:	f001 f84d 	bl	8001f22 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2104      	movs	r1, #4
 8000e8c:	485b      	ldr	r0, [pc, #364]	; (8000ffc <display_modify+0x250>)
 8000e8e:	f001 f848 	bl	8001f22 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000e92:	2201      	movs	r2, #1
 8000e94:	2108      	movs	r1, #8
 8000e96:	4859      	ldr	r0, [pc, #356]	; (8000ffc <display_modify+0x250>)
 8000e98:	f001 f843 	bl	8001f22 <HAL_GPIO_WritePin>
                if (MODE == MODE_RED_MODIFY) {
 8000e9c:	4b58      	ldr	r3, [pc, #352]	; (8001000 <display_modify+0x254>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b16      	cmp	r3, #22
 8000ea2:	d104      	bne.n	8000eae <display_modify+0x102>
                	display7SEG(led_buffer1[0]);
 8000ea4:	4b57      	ldr	r3, [pc, #348]	; (8001004 <display_modify+0x258>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fd01 	bl	80008b0 <display7SEG>
                }
                if (MODE == MODE_YELLOW_MODIFY) {
 8000eae:	4b54      	ldr	r3, [pc, #336]	; (8001000 <display_modify+0x254>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2b17      	cmp	r3, #23
 8000eb4:	d104      	bne.n	8000ec0 <display_modify+0x114>
                	display7SEG(led_buffer1[1]);
 8000eb6:	4b53      	ldr	r3, [pc, #332]	; (8001004 <display_modify+0x258>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fcf8 	bl	80008b0 <display7SEG>
                }
                if (MODE == MODE_GREEN_MODIFY) {
 8000ec0:	4b4f      	ldr	r3, [pc, #316]	; (8001000 <display_modify+0x254>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b18      	cmp	r3, #24
 8000ec6:	d137      	bne.n	8000f38 <display_modify+0x18c>
                	display7SEG(led_buffer1[2]);
 8000ec8:	4b4e      	ldr	r3, [pc, #312]	; (8001004 <display_modify+0x258>)
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fcef 	bl	80008b0 <display7SEG>
                }
            	break;
 8000ed2:	e031      	b.n	8000f38 <display_modify+0x18c>
            case 3:
                HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	4848      	ldr	r0, [pc, #288]	; (8000ffc <display_modify+0x250>)
 8000eda:	f001 f822 	bl	8001f22 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2102      	movs	r1, #2
 8000ee2:	4846      	ldr	r0, [pc, #280]	; (8000ffc <display_modify+0x250>)
 8000ee4:	f001 f81d 	bl	8001f22 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2104      	movs	r1, #4
 8000eec:	4843      	ldr	r0, [pc, #268]	; (8000ffc <display_modify+0x250>)
 8000eee:	f001 f818 	bl	8001f22 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2108      	movs	r1, #8
 8000ef6:	4841      	ldr	r0, [pc, #260]	; (8000ffc <display_modify+0x250>)
 8000ef8:	f001 f813 	bl	8001f22 <HAL_GPIO_WritePin>
                if (MODE == MODE_RED_MODIFY) {
 8000efc:	4b40      	ldr	r3, [pc, #256]	; (8001000 <display_modify+0x254>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b16      	cmp	r3, #22
 8000f02:	d104      	bne.n	8000f0e <display_modify+0x162>
                	display7SEG(led_buffer1[0]);
 8000f04:	4b3f      	ldr	r3, [pc, #252]	; (8001004 <display_modify+0x258>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fcd1 	bl	80008b0 <display7SEG>
                }
                if (MODE == MODE_YELLOW_MODIFY) {
 8000f0e:	4b3c      	ldr	r3, [pc, #240]	; (8001000 <display_modify+0x254>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b17      	cmp	r3, #23
 8000f14:	d104      	bne.n	8000f20 <display_modify+0x174>
                	display7SEG(led_buffer1[1]);
 8000f16:	4b3b      	ldr	r3, [pc, #236]	; (8001004 <display_modify+0x258>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fcc8 	bl	80008b0 <display7SEG>
                }
                if (MODE == MODE_GREEN_MODIFY) {
 8000f20:	4b37      	ldr	r3, [pc, #220]	; (8001000 <display_modify+0x254>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b18      	cmp	r3, #24
 8000f26:	d109      	bne.n	8000f3c <display_modify+0x190>
                	display7SEG(led_buffer1[2]);
 8000f28:	4b36      	ldr	r3, [pc, #216]	; (8001004 <display_modify+0x258>)
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fcbf 	bl	80008b0 <display7SEG>
                }
            	break;
 8000f32:	e003      	b.n	8000f3c <display_modify+0x190>
            default:
                break;
 8000f34:	bf00      	nop
 8000f36:	e002      	b.n	8000f3e <display_modify+0x192>
            	break;
 8000f38:	bf00      	nop
 8000f3a:	e000      	b.n	8000f3e <display_modify+0x192>
            	break;
 8000f3c:	bf00      	nop
        }
        index_led_manual++;
 8000f3e:	4b2e      	ldr	r3, [pc, #184]	; (8000ff8 <display_modify+0x24c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	3301      	adds	r3, #1
 8000f44:	4a2c      	ldr	r2, [pc, #176]	; (8000ff8 <display_modify+0x24c>)
 8000f46:	6013      	str	r3, [r2, #0]
        if (index_led_manual > 3) {
 8000f48:	4b2b      	ldr	r3, [pc, #172]	; (8000ff8 <display_modify+0x24c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b03      	cmp	r3, #3
 8000f4e:	dd02      	ble.n	8000f56 <display_modify+0x1aa>
            index_led_manual = 0;
 8000f50:	4b29      	ldr	r3, [pc, #164]	; (8000ff8 <display_modify+0x24c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
        }
        if (MODE == MODE_RED_MODIFY) {
 8000f56:	4b2a      	ldr	r3, [pc, #168]	; (8001000 <display_modify+0x254>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2b16      	cmp	r3, #22
 8000f5c:	d110      	bne.n	8000f80 <display_modify+0x1d4>
        	HAL_GPIO_TogglePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin);
 8000f5e:	2102      	movs	r1, #2
 8000f60:	4829      	ldr	r0, [pc, #164]	; (8001008 <display_modify+0x25c>)
 8000f62:	f000 fff6 	bl	8001f52 <HAL_GPIO_TogglePin>
        	HAL_GPIO_TogglePin(LED_4_RED_GPIO_Port, LED_4_RED_Pin);
 8000f66:	2110      	movs	r1, #16
 8000f68:	4827      	ldr	r0, [pc, #156]	; (8001008 <display_modify+0x25c>)
 8000f6a:	f000 fff2 	bl	8001f52 <HAL_GPIO_TogglePin>
        	HAL_GPIO_TogglePin(LED_7_RED_GPIO_Port, LED_7_RED_Pin);
 8000f6e:	2180      	movs	r1, #128	; 0x80
 8000f70:	4825      	ldr	r0, [pc, #148]	; (8001008 <display_modify+0x25c>)
 8000f72:	f000 ffee 	bl	8001f52 <HAL_GPIO_TogglePin>
        	HAL_GPIO_TogglePin(LED_10_RED_GPIO_Port, LED_10_RED_Pin);
 8000f76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f7a:	4823      	ldr	r0, [pc, #140]	; (8001008 <display_modify+0x25c>)
 8000f7c:	f000 ffe9 	bl	8001f52 <HAL_GPIO_TogglePin>
        }
        if (MODE == MODE_YELLOW_MODIFY) {
 8000f80:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <display_modify+0x254>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b17      	cmp	r3, #23
 8000f86:	d111      	bne.n	8000fac <display_modify+0x200>
        	HAL_GPIO_TogglePin(LED_3_YELLOW_GPIO_Port, LED_3_YELLOW_Pin);
 8000f88:	2108      	movs	r1, #8
 8000f8a:	481f      	ldr	r0, [pc, #124]	; (8001008 <display_modify+0x25c>)
 8000f8c:	f000 ffe1 	bl	8001f52 <HAL_GPIO_TogglePin>
        	HAL_GPIO_TogglePin(LED_6_YELLOW_GPIO_Port, LED_6_YELLOW_Pin);
 8000f90:	2140      	movs	r1, #64	; 0x40
 8000f92:	481d      	ldr	r0, [pc, #116]	; (8001008 <display_modify+0x25c>)
 8000f94:	f000 ffdd 	bl	8001f52 <HAL_GPIO_TogglePin>
        	HAL_GPIO_TogglePin(LED_9_YELLOW_GPIO_Port, LED_9_YELLOW_Pin);
 8000f98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f9c:	481a      	ldr	r0, [pc, #104]	; (8001008 <display_modify+0x25c>)
 8000f9e:	f000 ffd8 	bl	8001f52 <HAL_GPIO_TogglePin>
        	HAL_GPIO_TogglePin(LED_12_YELLOW_GPIO_Port, LED_12_YELLOW_Pin);
 8000fa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa6:	4818      	ldr	r0, [pc, #96]	; (8001008 <display_modify+0x25c>)
 8000fa8:	f000 ffd3 	bl	8001f52 <HAL_GPIO_TogglePin>
        }
        if (MODE == MODE_GREEN_MODIFY) {
 8000fac:	4b14      	ldr	r3, [pc, #80]	; (8001000 <display_modify+0x254>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b18      	cmp	r3, #24
 8000fb2:	d111      	bne.n	8000fd8 <display_modify+0x22c>
        	HAL_GPIO_TogglePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin);
 8000fb4:	2104      	movs	r1, #4
 8000fb6:	4814      	ldr	r0, [pc, #80]	; (8001008 <display_modify+0x25c>)
 8000fb8:	f000 ffcb 	bl	8001f52 <HAL_GPIO_TogglePin>
        	HAL_GPIO_TogglePin(LED_5_GREEN_GPIO_Port, LED_5_GREEN_Pin);
 8000fbc:	2120      	movs	r1, #32
 8000fbe:	4812      	ldr	r0, [pc, #72]	; (8001008 <display_modify+0x25c>)
 8000fc0:	f000 ffc7 	bl	8001f52 <HAL_GPIO_TogglePin>
        	HAL_GPIO_TogglePin(LED_8_GREEN_GPIO_Port, LED_8_GREEN_Pin);
 8000fc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fc8:	480f      	ldr	r0, [pc, #60]	; (8001008 <display_modify+0x25c>)
 8000fca:	f000 ffc2 	bl	8001f52 <HAL_GPIO_TogglePin>
        	HAL_GPIO_TogglePin(LED_11_GREEN_GPIO_Port, LED_11_GREEN_Pin);
 8000fce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fd2:	480d      	ldr	r0, [pc, #52]	; (8001008 <display_modify+0x25c>)
 8000fd4:	f000 ffbd 	bl	8001f52 <HAL_GPIO_TogglePin>
        }
        setTimer4(250);
 8000fd8:	20fa      	movs	r0, #250	; 0xfa
 8000fda:	f000 f98b 	bl	80012f4 <setTimer4>
    }
}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	68db8bad 	.word	0x68db8bad
 8000fec:	10624dd3 	.word	0x10624dd3
 8000ff0:	66666667 	.word	0x66666667
 8000ff4:	200000d4 	.word	0x200000d4
 8000ff8:	200000b4 	.word	0x200000b4
 8000ffc:	40010c00 	.word	0x40010c00
 8001000:	2000004c 	.word	0x2000004c
 8001004:	2000006c 	.word	0x2000006c
 8001008:	40010800 	.word	0x40010800

0800100c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001010:	f000 fc86 	bl	8001920 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001014:	f000 f814 	bl	8001040 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001018:	f000 f89a 	bl	8001150 <MX_GPIO_Init>
  MX_TIM2_Init();
 800101c:	f000 f84c 	bl	80010b8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001020:	4806      	ldr	r0, [pc, #24]	; (800103c <main+0x30>)
 8001022:	f001 fbdb 	bl	80027dc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(100);
 8001026:	2064      	movs	r0, #100	; 0x64
 8001028:	f000 f916 	bl	8001258 <setTimer1>
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_automatic();
 800102c:	f7ff f9d6 	bl	80003dc <fsm_automatic>
	  fsm_manual();
 8001030:	f7ff fb4c 	bl	80006cc <fsm_manual>
	  fsm_setting();
 8001034:	f7ff fbbc 	bl	80007b0 <fsm_setting>
	  fsm_automatic();
 8001038:	e7f8      	b.n	800102c <main+0x20>
 800103a:	bf00      	nop
 800103c:	200000e0 	.word	0x200000e0

08001040 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b090      	sub	sp, #64	; 0x40
 8001044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001046:	f107 0318 	add.w	r3, r7, #24
 800104a:	2228      	movs	r2, #40	; 0x28
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f001 ff74 	bl	8002f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
 8001060:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001062:	2302      	movs	r3, #2
 8001064:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001066:	2301      	movs	r3, #1
 8001068:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800106a:	2310      	movs	r3, #16
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800106e:	2300      	movs	r3, #0
 8001070:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001072:	f107 0318 	add.w	r3, r7, #24
 8001076:	4618      	mov	r0, r3
 8001078:	f000 ff84 	bl	8001f84 <HAL_RCC_OscConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001082:	f000 f8e3 	bl	800124c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001086:	230f      	movs	r3, #15
 8001088:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f001 f9f0 	bl	8002484 <HAL_RCC_ClockConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010aa:	f000 f8cf 	bl	800124c <Error_Handler>
  }
}
 80010ae:	bf00      	nop
 80010b0:	3740      	adds	r7, #64	; 0x40
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010be:	f107 0308 	add.w	r3, r7, #8
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010cc:	463b      	mov	r3, r7
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <MX_TIM2_Init+0x94>)
 80010d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <MX_TIM2_Init+0x94>)
 80010de:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80010e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e4:	4b19      	ldr	r3, [pc, #100]	; (800114c <MX_TIM2_Init+0x94>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80010ea:	4b18      	ldr	r3, [pc, #96]	; (800114c <MX_TIM2_Init+0x94>)
 80010ec:	2209      	movs	r2, #9
 80010ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f0:	4b16      	ldr	r3, [pc, #88]	; (800114c <MX_TIM2_Init+0x94>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <MX_TIM2_Init+0x94>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010fc:	4813      	ldr	r0, [pc, #76]	; (800114c <MX_TIM2_Init+0x94>)
 80010fe:	f001 fb1d 	bl	800273c <HAL_TIM_Base_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001108:	f000 f8a0 	bl	800124c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800110c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001110:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001112:	f107 0308 	add.w	r3, r7, #8
 8001116:	4619      	mov	r1, r3
 8001118:	480c      	ldr	r0, [pc, #48]	; (800114c <MX_TIM2_Init+0x94>)
 800111a:	f001 fc9b 	bl	8002a54 <HAL_TIM_ConfigClockSource>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001124:	f000 f892 	bl	800124c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001128:	2300      	movs	r3, #0
 800112a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001130:	463b      	mov	r3, r7
 8001132:	4619      	mov	r1, r3
 8001134:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_TIM2_Init+0x94>)
 8001136:	f001 fe73 	bl	8002e20 <HAL_TIMEx_MasterConfigSynchronization>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001140:	f000 f884 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	200000e0 	.word	0x200000e0

08001150 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001156:	f107 0310 	add.w	r3, r7, #16
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001164:	4b2f      	ldr	r3, [pc, #188]	; (8001224 <MX_GPIO_Init+0xd4>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	4a2e      	ldr	r2, [pc, #184]	; (8001224 <MX_GPIO_Init+0xd4>)
 800116a:	f043 0310 	orr.w	r3, r3, #16
 800116e:	6193      	str	r3, [r2, #24]
 8001170:	4b2c      	ldr	r3, [pc, #176]	; (8001224 <MX_GPIO_Init+0xd4>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	f003 0310 	and.w	r3, r3, #16
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117c:	4b29      	ldr	r3, [pc, #164]	; (8001224 <MX_GPIO_Init+0xd4>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	4a28      	ldr	r2, [pc, #160]	; (8001224 <MX_GPIO_Init+0xd4>)
 8001182:	f043 0304 	orr.w	r3, r3, #4
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b26      	ldr	r3, [pc, #152]	; (8001224 <MX_GPIO_Init+0xd4>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001194:	4b23      	ldr	r3, [pc, #140]	; (8001224 <MX_GPIO_Init+0xd4>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a22      	ldr	r2, [pc, #136]	; (8001224 <MX_GPIO_Init+0xd4>)
 800119a:	f043 0308 	orr.w	r3, r3, #8
 800119e:	6193      	str	r3, [r2, #24]
 80011a0:	4b20      	ldr	r3, [pc, #128]	; (8001224 <MX_GPIO_Init+0xd4>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f003 0308 	and.w	r3, r3, #8
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_RED_Pin|LED_2_GREEN_Pin|LED_3_YELLOW_Pin|LED_4_RED_Pin
 80011ac:	2200      	movs	r2, #0
 80011ae:	f641 71fe 	movw	r1, #8190	; 0x1ffe
 80011b2:	481d      	ldr	r0, [pc, #116]	; (8001228 <MX_GPIO_Init+0xd8>)
 80011b4:	f000 feb5 	bl	8001f22 <HAL_GPIO_WritePin>
                          |LED_5_GREEN_Pin|LED_6_YELLOW_Pin|LED_7_RED_Pin|LED_8_GREEN_Pin
                          |LED_9_YELLOW_Pin|LED_10_RED_Pin|LED_11_GREEN_Pin|LED_12_YELLOW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|EN2_Pin|SEG6_Pin
 80011b8:	2200      	movs	r2, #0
 80011ba:	f640 71ff 	movw	r1, #4095	; 0xfff
 80011be:	481b      	ldr	r0, [pc, #108]	; (800122c <MX_GPIO_Init+0xdc>)
 80011c0:	f000 feaf 	bl	8001f22 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|EN3_Pin|SEG0_Pin|SEG1_Pin
                          |SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 80011c4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80011c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d2:	f107 0310 	add.w	r3, r7, #16
 80011d6:	4619      	mov	r1, r3
 80011d8:	4815      	ldr	r0, [pc, #84]	; (8001230 <MX_GPIO_Init+0xe0>)
 80011da:	f000 fd11 	bl	8001c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_RED_Pin LED_2_GREEN_Pin LED_3_YELLOW_Pin LED_4_RED_Pin
                           LED_5_GREEN_Pin LED_6_YELLOW_Pin LED_7_RED_Pin LED_8_GREEN_Pin
                           LED_9_YELLOW_Pin LED_10_RED_Pin LED_11_GREEN_Pin LED_12_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_1_RED_Pin|LED_2_GREEN_Pin|LED_3_YELLOW_Pin|LED_4_RED_Pin
 80011de:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 80011e2:	613b      	str	r3, [r7, #16]
                          |LED_5_GREEN_Pin|LED_6_YELLOW_Pin|LED_7_RED_Pin|LED_8_GREEN_Pin
                          |LED_9_YELLOW_Pin|LED_10_RED_Pin|LED_11_GREEN_Pin|LED_12_YELLOW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2302      	movs	r3, #2
 80011ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f0:	f107 0310 	add.w	r3, r7, #16
 80011f4:	4619      	mov	r1, r3
 80011f6:	480c      	ldr	r0, [pc, #48]	; (8001228 <MX_GPIO_Init+0xd8>)
 80011f8:	f000 fd02 	bl	8001c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin SEG6_Pin
                           PB11 EN3_Pin SEG0_Pin SEG1_Pin
                           SEG2_Pin SEG3_Pin SEG4_Pin SEG5_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|SEG6_Pin
 80011fc:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001200:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|EN3_Pin|SEG0_Pin|SEG1_Pin
                          |SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001202:	2301      	movs	r3, #1
 8001204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2302      	movs	r3, #2
 800120c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120e:	f107 0310 	add.w	r3, r7, #16
 8001212:	4619      	mov	r1, r3
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_GPIO_Init+0xdc>)
 8001216:	f000 fcf3 	bl	8001c00 <HAL_GPIO_Init>

}
 800121a:	bf00      	nop
 800121c:	3720      	adds	r7, #32
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000
 8001228:	40010800 	.word	0x40010800
 800122c:	40010c00 	.word	0x40010c00
 8001230:	40011000 	.word	0x40011000

08001234 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	timerRun();
 800123c:	f000 f874 	bl	8001328 <timerRun>
	getKeyInput();
 8001240:	f7fe ffd2 	bl	80001e8 <getKeyInput>
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001250:	b672      	cpsid	i
}
 8001252:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001254:	e7fe      	b.n	8001254 <Error_Handler+0x8>
	...

08001258 <setTimer1>:

int timer4_counter = 0;
int timer4_flag = 0;

int TIMER_CYCLE = 10;
void setTimer1(int duration) {
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <setTimer1+0x28>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	fb92 f3f3 	sdiv	r3, r2, r3
 800126a:	4a06      	ldr	r2, [pc, #24]	; (8001284 <setTimer1+0x2c>)
 800126c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <setTimer1+0x30>)
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000078 	.word	0x20000078
 8001284:	200000b8 	.word	0x200000b8
 8001288:	200000bc 	.word	0x200000bc

0800128c <setTimer2>:

void setTimer2(int duration) {
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8001294:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <setTimer2+0x28>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	fb92 f3f3 	sdiv	r3, r2, r3
 800129e:	4a06      	ldr	r2, [pc, #24]	; (80012b8 <setTimer2+0x2c>)
 80012a0:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <setTimer2+0x30>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000078 	.word	0x20000078
 80012b8:	200000c0 	.word	0x200000c0
 80012bc:	200000c4 	.word	0x200000c4

080012c0 <setTimer3>:

void setTimer3(int duration) {
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 80012c8:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <setTimer3+0x28>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80012d2:	4a06      	ldr	r2, [pc, #24]	; (80012ec <setTimer3+0x2c>)
 80012d4:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <setTimer3+0x30>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20000078 	.word	0x20000078
 80012ec:	200000c8 	.word	0x200000c8
 80012f0:	200000cc 	.word	0x200000cc

080012f4 <setTimer4>:

void setTimer4(int duration) {
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	timer4_counter = duration / TIMER_CYCLE;
 80012fc:	4b07      	ldr	r3, [pc, #28]	; (800131c <setTimer4+0x28>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	fb92 f3f3 	sdiv	r3, r2, r3
 8001306:	4a06      	ldr	r2, [pc, #24]	; (8001320 <setTimer4+0x2c>)
 8001308:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <setTimer4+0x30>)
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000078 	.word	0x20000078
 8001320:	200000d0 	.word	0x200000d0
 8001324:	200000d4 	.word	0x200000d4

08001328 <timerRun>:

void timerRun() {
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 800132c:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <timerRun+0x8c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	dd0b      	ble.n	800134c <timerRun+0x24>
		timer1_counter--;
 8001334:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <timerRun+0x8c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	3b01      	subs	r3, #1
 800133a:	4a1e      	ldr	r2, [pc, #120]	; (80013b4 <timerRun+0x8c>)
 800133c:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 800133e:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <timerRun+0x8c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	dc02      	bgt.n	800134c <timerRun+0x24>
			timer1_flag = 1;
 8001346:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <timerRun+0x90>)
 8001348:	2201      	movs	r2, #1
 800134a:	601a      	str	r2, [r3, #0]
		}
	}

	if (timer2_counter > 0) {
 800134c:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <timerRun+0x94>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	dd0b      	ble.n	800136c <timerRun+0x44>
		timer2_counter--;
 8001354:	4b19      	ldr	r3, [pc, #100]	; (80013bc <timerRun+0x94>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	3b01      	subs	r3, #1
 800135a:	4a18      	ldr	r2, [pc, #96]	; (80013bc <timerRun+0x94>)
 800135c:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 800135e:	4b17      	ldr	r3, [pc, #92]	; (80013bc <timerRun+0x94>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	dc02      	bgt.n	800136c <timerRun+0x44>
			timer2_flag = 1;
 8001366:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <timerRun+0x98>)
 8001368:	2201      	movs	r2, #1
 800136a:	601a      	str	r2, [r3, #0]
		}
	}

	if (timer3_counter > 0) {
 800136c:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <timerRun+0x9c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	dd0b      	ble.n	800138c <timerRun+0x64>
		timer3_counter--;
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <timerRun+0x9c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	3b01      	subs	r3, #1
 800137a:	4a12      	ldr	r2, [pc, #72]	; (80013c4 <timerRun+0x9c>)
 800137c:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) {
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <timerRun+0x9c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	dc02      	bgt.n	800138c <timerRun+0x64>
			timer3_flag = 1;
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <timerRun+0xa0>)
 8001388:	2201      	movs	r2, #1
 800138a:	601a      	str	r2, [r3, #0]
		}
	}

	if (timer4_counter > 0) {
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <timerRun+0xa4>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	dd0b      	ble.n	80013ac <timerRun+0x84>
			timer4_counter--;
 8001394:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <timerRun+0xa4>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	3b01      	subs	r3, #1
 800139a:	4a0c      	ldr	r2, [pc, #48]	; (80013cc <timerRun+0xa4>)
 800139c:	6013      	str	r3, [r2, #0]
			if (timer4_counter <= 0) {
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <timerRun+0xa4>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	dc02      	bgt.n	80013ac <timerRun+0x84>
				timer4_flag = 1;
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <timerRun+0xa8>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	601a      	str	r2, [r3, #0]
			}
		}
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	200000b8 	.word	0x200000b8
 80013b8:	200000bc 	.word	0x200000bc
 80013bc:	200000c0 	.word	0x200000c0
 80013c0:	200000c4 	.word	0x200000c4
 80013c4:	200000c8 	.word	0x200000c8
 80013c8:	200000cc 	.word	0x200000cc
 80013cc:	200000d0 	.word	0x200000d0
 80013d0:	200000d4 	.word	0x200000d4

080013d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <HAL_MspInit+0x5c>)
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	4a14      	ldr	r2, [pc, #80]	; (8001430 <HAL_MspInit+0x5c>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6193      	str	r3, [r2, #24]
 80013e6:	4b12      	ldr	r3, [pc, #72]	; (8001430 <HAL_MspInit+0x5c>)
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f2:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <HAL_MspInit+0x5c>)
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	4a0e      	ldr	r2, [pc, #56]	; (8001430 <HAL_MspInit+0x5c>)
 80013f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fc:	61d3      	str	r3, [r2, #28]
 80013fe:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <HAL_MspInit+0x5c>)
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <HAL_MspInit+0x60>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	4a04      	ldr	r2, [pc, #16]	; (8001434 <HAL_MspInit+0x60>)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001426:	bf00      	nop
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	40021000 	.word	0x40021000
 8001434:	40010000 	.word	0x40010000

08001438 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001448:	d113      	bne.n	8001472 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <HAL_TIM_Base_MspInit+0x44>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	4a0b      	ldr	r2, [pc, #44]	; (800147c <HAL_TIM_Base_MspInit+0x44>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	61d3      	str	r3, [r2, #28]
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_TIM_Base_MspInit+0x44>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	201c      	movs	r0, #28
 8001468:	f000 fb93 	bl	8001b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800146c:	201c      	movs	r0, #28
 800146e:	f000 fbac 	bl	8001bca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001472:	bf00      	nop
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40021000 	.word	0x40021000

08001480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <NMI_Handler+0x4>

08001486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <HardFault_Handler+0x4>

0800148c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <MemManage_Handler+0x4>

08001492 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <BusFault_Handler+0x4>

08001498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <UsageFault_Handler+0x4>

0800149e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr

080014aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr

080014b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr

080014c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c6:	f000 fa71 	bl	80019ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014d4:	4802      	ldr	r0, [pc, #8]	; (80014e0 <TIM2_IRQHandler+0x10>)
 80014d6:	f001 f9cd 	bl	8002874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200000e0 	.word	0x200000e0

080014e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr

080014f0 <traffic_light>:
 *      Author: TIEN DUY
 */

#include "traffic_light.h"

void traffic_light(int status_light) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b0b      	subs	r3, #11
 80014fc:	2b06      	cmp	r3, #6
 80014fe:	f200 81e1 	bhi.w	80018c4 <traffic_light+0x3d4>
 8001502:	a201      	add	r2, pc, #4	; (adr r2, 8001508 <traffic_light+0x18>)
 8001504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001508:	08001525 	.word	0x08001525
 800150c:	080015a9 	.word	0x080015a9
 8001510:	0800162d 	.word	0x0800162d
 8001514:	080016b1 	.word	0x080016b1
 8001518:	08001735 	.word	0x08001735
 800151c:	080017b9 	.word	0x080017b9
 8001520:	08001841 	.word	0x08001841
	switch (status_light) {
	case RED_GREEN:
		HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	2102      	movs	r1, #2
 8001528:	48c4      	ldr	r0, [pc, #784]	; (800183c <traffic_light+0x34c>)
 800152a:	f000 fcfa 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	2104      	movs	r1, #4
 8001532:	48c2      	ldr	r0, [pc, #776]	; (800183c <traffic_light+0x34c>)
 8001534:	f000 fcf5 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_YELLOW_GPIO_Port, LED_3_YELLOW_Pin, SET);
 8001538:	2201      	movs	r2, #1
 800153a:	2108      	movs	r1, #8
 800153c:	48bf      	ldr	r0, [pc, #764]	; (800183c <traffic_light+0x34c>)
 800153e:	f000 fcf0 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_4_RED_GPIO_Port, LED_4_RED_Pin, SET);
 8001542:	2201      	movs	r2, #1
 8001544:	2110      	movs	r1, #16
 8001546:	48bd      	ldr	r0, [pc, #756]	; (800183c <traffic_light+0x34c>)
 8001548:	f000 fceb 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_5_GREEN_GPIO_Port, LED_5_GREEN_Pin, SET);
 800154c:	2201      	movs	r2, #1
 800154e:	2120      	movs	r1, #32
 8001550:	48ba      	ldr	r0, [pc, #744]	; (800183c <traffic_light+0x34c>)
 8001552:	f000 fce6 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_6_YELLOW_GPIO_Port, LED_6_YELLOW_Pin, SET);
 8001556:	2201      	movs	r2, #1
 8001558:	2140      	movs	r1, #64	; 0x40
 800155a:	48b8      	ldr	r0, [pc, #736]	; (800183c <traffic_light+0x34c>)
 800155c:	f000 fce1 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_7_RED_GPIO_Port, LED_7_RED_Pin, RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	2180      	movs	r1, #128	; 0x80
 8001564:	48b5      	ldr	r0, [pc, #724]	; (800183c <traffic_light+0x34c>)
 8001566:	f000 fcdc 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_8_GREEN_GPIO_Port, LED_8_GREEN_Pin, RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001570:	48b2      	ldr	r0, [pc, #712]	; (800183c <traffic_light+0x34c>)
 8001572:	f000 fcd6 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_9_YELLOW_GPIO_Port, LED_9_YELLOW_Pin, SET);
 8001576:	2201      	movs	r2, #1
 8001578:	f44f 7100 	mov.w	r1, #512	; 0x200
 800157c:	48af      	ldr	r0, [pc, #700]	; (800183c <traffic_light+0x34c>)
 800157e:	f000 fcd0 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_10_RED_GPIO_Port, LED_10_RED_Pin, SET);
 8001582:	2201      	movs	r2, #1
 8001584:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001588:	48ac      	ldr	r0, [pc, #688]	; (800183c <traffic_light+0x34c>)
 800158a:	f000 fcca 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_11_GREEN_GPIO_Port, LED_11_GREEN_Pin, SET);
 800158e:	2201      	movs	r2, #1
 8001590:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001594:	48a9      	ldr	r0, [pc, #676]	; (800183c <traffic_light+0x34c>)
 8001596:	f000 fcc4 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_12_YELLOW_GPIO_Port, LED_12_YELLOW_Pin, SET);
 800159a:	2201      	movs	r2, #1
 800159c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015a0:	48a6      	ldr	r0, [pc, #664]	; (800183c <traffic_light+0x34c>)
 80015a2:	f000 fcbe 	bl	8001f22 <HAL_GPIO_WritePin>
		break;
 80015a6:	e18e      	b.n	80018c6 <traffic_light+0x3d6>
	case RED_YELLOW:
		HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, RESET);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2102      	movs	r1, #2
 80015ac:	48a3      	ldr	r0, [pc, #652]	; (800183c <traffic_light+0x34c>)
 80015ae:	f000 fcb8 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, SET);
 80015b2:	2201      	movs	r2, #1
 80015b4:	2104      	movs	r1, #4
 80015b6:	48a1      	ldr	r0, [pc, #644]	; (800183c <traffic_light+0x34c>)
 80015b8:	f000 fcb3 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_YELLOW_GPIO_Port, LED_3_YELLOW_Pin, RESET);
 80015bc:	2200      	movs	r2, #0
 80015be:	2108      	movs	r1, #8
 80015c0:	489e      	ldr	r0, [pc, #632]	; (800183c <traffic_light+0x34c>)
 80015c2:	f000 fcae 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_4_RED_GPIO_Port, LED_4_RED_Pin, SET);
 80015c6:	2201      	movs	r2, #1
 80015c8:	2110      	movs	r1, #16
 80015ca:	489c      	ldr	r0, [pc, #624]	; (800183c <traffic_light+0x34c>)
 80015cc:	f000 fca9 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_5_GREEN_GPIO_Port, LED_5_GREEN_Pin, SET);
 80015d0:	2201      	movs	r2, #1
 80015d2:	2120      	movs	r1, #32
 80015d4:	4899      	ldr	r0, [pc, #612]	; (800183c <traffic_light+0x34c>)
 80015d6:	f000 fca4 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_6_YELLOW_GPIO_Port, LED_6_YELLOW_Pin, SET);
 80015da:	2201      	movs	r2, #1
 80015dc:	2140      	movs	r1, #64	; 0x40
 80015de:	4897      	ldr	r0, [pc, #604]	; (800183c <traffic_light+0x34c>)
 80015e0:	f000 fc9f 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_7_RED_GPIO_Port, LED_7_RED_Pin, RESET);
 80015e4:	2200      	movs	r2, #0
 80015e6:	2180      	movs	r1, #128	; 0x80
 80015e8:	4894      	ldr	r0, [pc, #592]	; (800183c <traffic_light+0x34c>)
 80015ea:	f000 fc9a 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_8_GREEN_GPIO_Port, LED_8_GREEN_Pin, SET);
 80015ee:	2201      	movs	r2, #1
 80015f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f4:	4891      	ldr	r0, [pc, #580]	; (800183c <traffic_light+0x34c>)
 80015f6:	f000 fc94 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_9_YELLOW_GPIO_Port, LED_9_YELLOW_Pin, RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001600:	488e      	ldr	r0, [pc, #568]	; (800183c <traffic_light+0x34c>)
 8001602:	f000 fc8e 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_10_RED_GPIO_Port, LED_10_RED_Pin, SET);
 8001606:	2201      	movs	r2, #1
 8001608:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800160c:	488b      	ldr	r0, [pc, #556]	; (800183c <traffic_light+0x34c>)
 800160e:	f000 fc88 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_11_GREEN_GPIO_Port, LED_11_GREEN_Pin, SET);
 8001612:	2201      	movs	r2, #1
 8001614:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001618:	4888      	ldr	r0, [pc, #544]	; (800183c <traffic_light+0x34c>)
 800161a:	f000 fc82 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_12_YELLOW_GPIO_Port, LED_12_YELLOW_Pin, SET);
 800161e:	2201      	movs	r2, #1
 8001620:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001624:	4885      	ldr	r0, [pc, #532]	; (800183c <traffic_light+0x34c>)
 8001626:	f000 fc7c 	bl	8001f22 <HAL_GPIO_WritePin>
		break;
 800162a:	e14c      	b.n	80018c6 <traffic_light+0x3d6>
	case GREEN_RED:
		HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, SET);
 800162c:	2201      	movs	r2, #1
 800162e:	2102      	movs	r1, #2
 8001630:	4882      	ldr	r0, [pc, #520]	; (800183c <traffic_light+0x34c>)
 8001632:	f000 fc76 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, SET);
 8001636:	2201      	movs	r2, #1
 8001638:	2104      	movs	r1, #4
 800163a:	4880      	ldr	r0, [pc, #512]	; (800183c <traffic_light+0x34c>)
 800163c:	f000 fc71 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_YELLOW_GPIO_Port, LED_3_YELLOW_Pin, SET);
 8001640:	2201      	movs	r2, #1
 8001642:	2108      	movs	r1, #8
 8001644:	487d      	ldr	r0, [pc, #500]	; (800183c <traffic_light+0x34c>)
 8001646:	f000 fc6c 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_4_RED_GPIO_Port, LED_4_RED_Pin, RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	2110      	movs	r1, #16
 800164e:	487b      	ldr	r0, [pc, #492]	; (800183c <traffic_light+0x34c>)
 8001650:	f000 fc67 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_5_GREEN_GPIO_Port, LED_5_GREEN_Pin, RESET);
 8001654:	2200      	movs	r2, #0
 8001656:	2120      	movs	r1, #32
 8001658:	4878      	ldr	r0, [pc, #480]	; (800183c <traffic_light+0x34c>)
 800165a:	f000 fc62 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_6_YELLOW_GPIO_Port, LED_6_YELLOW_Pin, SET);
 800165e:	2201      	movs	r2, #1
 8001660:	2140      	movs	r1, #64	; 0x40
 8001662:	4876      	ldr	r0, [pc, #472]	; (800183c <traffic_light+0x34c>)
 8001664:	f000 fc5d 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_7_RED_GPIO_Port, LED_7_RED_Pin, SET);
 8001668:	2201      	movs	r2, #1
 800166a:	2180      	movs	r1, #128	; 0x80
 800166c:	4873      	ldr	r0, [pc, #460]	; (800183c <traffic_light+0x34c>)
 800166e:	f000 fc58 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_8_GREEN_GPIO_Port, LED_8_GREEN_Pin, SET);
 8001672:	2201      	movs	r2, #1
 8001674:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001678:	4870      	ldr	r0, [pc, #448]	; (800183c <traffic_light+0x34c>)
 800167a:	f000 fc52 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_9_YELLOW_GPIO_Port, LED_9_YELLOW_Pin, SET);
 800167e:	2201      	movs	r2, #1
 8001680:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001684:	486d      	ldr	r0, [pc, #436]	; (800183c <traffic_light+0x34c>)
 8001686:	f000 fc4c 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_10_RED_GPIO_Port, LED_10_RED_Pin, RESET);
 800168a:	2200      	movs	r2, #0
 800168c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001690:	486a      	ldr	r0, [pc, #424]	; (800183c <traffic_light+0x34c>)
 8001692:	f000 fc46 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_11_GREEN_GPIO_Port, LED_11_GREEN_Pin, RESET);
 8001696:	2200      	movs	r2, #0
 8001698:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800169c:	4867      	ldr	r0, [pc, #412]	; (800183c <traffic_light+0x34c>)
 800169e:	f000 fc40 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_12_YELLOW_GPIO_Port, LED_12_YELLOW_Pin, SET);
 80016a2:	2201      	movs	r2, #1
 80016a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016a8:	4864      	ldr	r0, [pc, #400]	; (800183c <traffic_light+0x34c>)
 80016aa:	f000 fc3a 	bl	8001f22 <HAL_GPIO_WritePin>
		break;
 80016ae:	e10a      	b.n	80018c6 <traffic_light+0x3d6>
	case YELLOW_RED:
		HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, SET);
 80016b0:	2201      	movs	r2, #1
 80016b2:	2102      	movs	r1, #2
 80016b4:	4861      	ldr	r0, [pc, #388]	; (800183c <traffic_light+0x34c>)
 80016b6:	f000 fc34 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, SET);
 80016ba:	2201      	movs	r2, #1
 80016bc:	2104      	movs	r1, #4
 80016be:	485f      	ldr	r0, [pc, #380]	; (800183c <traffic_light+0x34c>)
 80016c0:	f000 fc2f 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_YELLOW_GPIO_Port, LED_3_YELLOW_Pin, SET);
 80016c4:	2201      	movs	r2, #1
 80016c6:	2108      	movs	r1, #8
 80016c8:	485c      	ldr	r0, [pc, #368]	; (800183c <traffic_light+0x34c>)
 80016ca:	f000 fc2a 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_4_RED_GPIO_Port, LED_4_RED_Pin, RESET);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2110      	movs	r1, #16
 80016d2:	485a      	ldr	r0, [pc, #360]	; (800183c <traffic_light+0x34c>)
 80016d4:	f000 fc25 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_5_GREEN_GPIO_Port, LED_5_GREEN_Pin, SET);
 80016d8:	2201      	movs	r2, #1
 80016da:	2120      	movs	r1, #32
 80016dc:	4857      	ldr	r0, [pc, #348]	; (800183c <traffic_light+0x34c>)
 80016de:	f000 fc20 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_6_YELLOW_GPIO_Port, LED_6_YELLOW_Pin, RESET);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2140      	movs	r1, #64	; 0x40
 80016e6:	4855      	ldr	r0, [pc, #340]	; (800183c <traffic_light+0x34c>)
 80016e8:	f000 fc1b 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_7_RED_GPIO_Port, LED_7_RED_Pin, SET);
 80016ec:	2201      	movs	r2, #1
 80016ee:	2180      	movs	r1, #128	; 0x80
 80016f0:	4852      	ldr	r0, [pc, #328]	; (800183c <traffic_light+0x34c>)
 80016f2:	f000 fc16 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_8_GREEN_GPIO_Port, LED_8_GREEN_Pin, SET);
 80016f6:	2201      	movs	r2, #1
 80016f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016fc:	484f      	ldr	r0, [pc, #316]	; (800183c <traffic_light+0x34c>)
 80016fe:	f000 fc10 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_9_YELLOW_GPIO_Port, LED_9_YELLOW_Pin, SET);
 8001702:	2201      	movs	r2, #1
 8001704:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001708:	484c      	ldr	r0, [pc, #304]	; (800183c <traffic_light+0x34c>)
 800170a:	f000 fc0a 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_10_RED_GPIO_Port, LED_10_RED_Pin, RESET);
 800170e:	2200      	movs	r2, #0
 8001710:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001714:	4849      	ldr	r0, [pc, #292]	; (800183c <traffic_light+0x34c>)
 8001716:	f000 fc04 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_11_GREEN_GPIO_Port, LED_11_GREEN_Pin, SET);
 800171a:	2201      	movs	r2, #1
 800171c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001720:	4846      	ldr	r0, [pc, #280]	; (800183c <traffic_light+0x34c>)
 8001722:	f000 fbfe 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_12_YELLOW_GPIO_Port, LED_12_YELLOW_Pin, RESET);
 8001726:	2200      	movs	r2, #0
 8001728:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800172c:	4843      	ldr	r0, [pc, #268]	; (800183c <traffic_light+0x34c>)
 800172e:	f000 fbf8 	bl	8001f22 <HAL_GPIO_WritePin>
		break;
 8001732:	e0c8      	b.n	80018c6 <traffic_light+0x3d6>
	case RED_MODIFY:
		HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	2102      	movs	r1, #2
 8001738:	4840      	ldr	r0, [pc, #256]	; (800183c <traffic_light+0x34c>)
 800173a:	f000 fbf2 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, SET);
 800173e:	2201      	movs	r2, #1
 8001740:	2104      	movs	r1, #4
 8001742:	483e      	ldr	r0, [pc, #248]	; (800183c <traffic_light+0x34c>)
 8001744:	f000 fbed 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_YELLOW_GPIO_Port, LED_3_YELLOW_Pin, SET);
 8001748:	2201      	movs	r2, #1
 800174a:	2108      	movs	r1, #8
 800174c:	483b      	ldr	r0, [pc, #236]	; (800183c <traffic_light+0x34c>)
 800174e:	f000 fbe8 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_4_RED_GPIO_Port, LED_4_RED_Pin, RESET);
 8001752:	2200      	movs	r2, #0
 8001754:	2110      	movs	r1, #16
 8001756:	4839      	ldr	r0, [pc, #228]	; (800183c <traffic_light+0x34c>)
 8001758:	f000 fbe3 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_5_GREEN_GPIO_Port, LED_5_GREEN_Pin, SET);
 800175c:	2201      	movs	r2, #1
 800175e:	2120      	movs	r1, #32
 8001760:	4836      	ldr	r0, [pc, #216]	; (800183c <traffic_light+0x34c>)
 8001762:	f000 fbde 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_6_YELLOW_GPIO_Port, LED_6_YELLOW_Pin, SET);
 8001766:	2201      	movs	r2, #1
 8001768:	2140      	movs	r1, #64	; 0x40
 800176a:	4834      	ldr	r0, [pc, #208]	; (800183c <traffic_light+0x34c>)
 800176c:	f000 fbd9 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_7_RED_GPIO_Port, LED_7_RED_Pin, RESET);
 8001770:	2200      	movs	r2, #0
 8001772:	2180      	movs	r1, #128	; 0x80
 8001774:	4831      	ldr	r0, [pc, #196]	; (800183c <traffic_light+0x34c>)
 8001776:	f000 fbd4 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_8_GREEN_GPIO_Port, LED_8_GREEN_Pin, SET);
 800177a:	2201      	movs	r2, #1
 800177c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001780:	482e      	ldr	r0, [pc, #184]	; (800183c <traffic_light+0x34c>)
 8001782:	f000 fbce 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_9_YELLOW_GPIO_Port, LED_9_YELLOW_Pin, SET);
 8001786:	2201      	movs	r2, #1
 8001788:	f44f 7100 	mov.w	r1, #512	; 0x200
 800178c:	482b      	ldr	r0, [pc, #172]	; (800183c <traffic_light+0x34c>)
 800178e:	f000 fbc8 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_10_RED_GPIO_Port, LED_10_RED_Pin, RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001798:	4828      	ldr	r0, [pc, #160]	; (800183c <traffic_light+0x34c>)
 800179a:	f000 fbc2 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_11_GREEN_GPIO_Port, LED_11_GREEN_Pin, SET);
 800179e:	2201      	movs	r2, #1
 80017a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017a4:	4825      	ldr	r0, [pc, #148]	; (800183c <traffic_light+0x34c>)
 80017a6:	f000 fbbc 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_12_YELLOW_GPIO_Port, LED_12_YELLOW_Pin, SET);
 80017aa:	2201      	movs	r2, #1
 80017ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017b0:	4822      	ldr	r0, [pc, #136]	; (800183c <traffic_light+0x34c>)
 80017b2:	f000 fbb6 	bl	8001f22 <HAL_GPIO_WritePin>
		break;
 80017b6:	e086      	b.n	80018c6 <traffic_light+0x3d6>
	case YELLOW_MODIFY:
		HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, SET);
 80017b8:	2201      	movs	r2, #1
 80017ba:	2102      	movs	r1, #2
 80017bc:	481f      	ldr	r0, [pc, #124]	; (800183c <traffic_light+0x34c>)
 80017be:	f000 fbb0 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, SET);
 80017c2:	2201      	movs	r2, #1
 80017c4:	2104      	movs	r1, #4
 80017c6:	481d      	ldr	r0, [pc, #116]	; (800183c <traffic_light+0x34c>)
 80017c8:	f000 fbab 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_YELLOW_GPIO_Port, LED_3_YELLOW_Pin, RESET);
 80017cc:	2200      	movs	r2, #0
 80017ce:	2108      	movs	r1, #8
 80017d0:	481a      	ldr	r0, [pc, #104]	; (800183c <traffic_light+0x34c>)
 80017d2:	f000 fba6 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_4_RED_GPIO_Port, LED_4_RED_Pin, SET);
 80017d6:	2201      	movs	r2, #1
 80017d8:	2110      	movs	r1, #16
 80017da:	4818      	ldr	r0, [pc, #96]	; (800183c <traffic_light+0x34c>)
 80017dc:	f000 fba1 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_5_GREEN_GPIO_Port, LED_5_GREEN_Pin, SET);
 80017e0:	2201      	movs	r2, #1
 80017e2:	2120      	movs	r1, #32
 80017e4:	4815      	ldr	r0, [pc, #84]	; (800183c <traffic_light+0x34c>)
 80017e6:	f000 fb9c 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_6_YELLOW_GPIO_Port, LED_6_YELLOW_Pin, RESET);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2140      	movs	r1, #64	; 0x40
 80017ee:	4813      	ldr	r0, [pc, #76]	; (800183c <traffic_light+0x34c>)
 80017f0:	f000 fb97 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_7_RED_GPIO_Port, LED_7_RED_Pin, SET);
 80017f4:	2201      	movs	r2, #1
 80017f6:	2180      	movs	r1, #128	; 0x80
 80017f8:	4810      	ldr	r0, [pc, #64]	; (800183c <traffic_light+0x34c>)
 80017fa:	f000 fb92 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_8_GREEN_GPIO_Port, LED_8_GREEN_Pin, SET);
 80017fe:	2201      	movs	r2, #1
 8001800:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001804:	480d      	ldr	r0, [pc, #52]	; (800183c <traffic_light+0x34c>)
 8001806:	f000 fb8c 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_9_YELLOW_GPIO_Port, LED_9_YELLOW_Pin, RESET);
 800180a:	2200      	movs	r2, #0
 800180c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001810:	480a      	ldr	r0, [pc, #40]	; (800183c <traffic_light+0x34c>)
 8001812:	f000 fb86 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_10_RED_GPIO_Port, LED_10_RED_Pin, SET);
 8001816:	2201      	movs	r2, #1
 8001818:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800181c:	4807      	ldr	r0, [pc, #28]	; (800183c <traffic_light+0x34c>)
 800181e:	f000 fb80 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_11_GREEN_GPIO_Port, LED_11_GREEN_Pin, SET);
 8001822:	2201      	movs	r2, #1
 8001824:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001828:	4804      	ldr	r0, [pc, #16]	; (800183c <traffic_light+0x34c>)
 800182a:	f000 fb7a 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_12_YELLOW_GPIO_Port, LED_12_YELLOW_Pin, RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001834:	4801      	ldr	r0, [pc, #4]	; (800183c <traffic_light+0x34c>)
 8001836:	f000 fb74 	bl	8001f22 <HAL_GPIO_WritePin>
		break;
 800183a:	e044      	b.n	80018c6 <traffic_light+0x3d6>
 800183c:	40010800 	.word	0x40010800
	case GREEN_MODIFY:
		HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, SET);
 8001840:	2201      	movs	r2, #1
 8001842:	2102      	movs	r1, #2
 8001844:	4822      	ldr	r0, [pc, #136]	; (80018d0 <traffic_light+0x3e0>)
 8001846:	f000 fb6c 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	2104      	movs	r1, #4
 800184e:	4820      	ldr	r0, [pc, #128]	; (80018d0 <traffic_light+0x3e0>)
 8001850:	f000 fb67 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_YELLOW_GPIO_Port, LED_3_YELLOW_Pin, SET);
 8001854:	2201      	movs	r2, #1
 8001856:	2108      	movs	r1, #8
 8001858:	481d      	ldr	r0, [pc, #116]	; (80018d0 <traffic_light+0x3e0>)
 800185a:	f000 fb62 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_4_RED_GPIO_Port, LED_4_RED_Pin, SET);
 800185e:	2201      	movs	r2, #1
 8001860:	2110      	movs	r1, #16
 8001862:	481b      	ldr	r0, [pc, #108]	; (80018d0 <traffic_light+0x3e0>)
 8001864:	f000 fb5d 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_5_GREEN_GPIO_Port, LED_5_GREEN_Pin, RESET);
 8001868:	2200      	movs	r2, #0
 800186a:	2120      	movs	r1, #32
 800186c:	4818      	ldr	r0, [pc, #96]	; (80018d0 <traffic_light+0x3e0>)
 800186e:	f000 fb58 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_6_YELLOW_GPIO_Port, LED_6_YELLOW_Pin, SET);
 8001872:	2201      	movs	r2, #1
 8001874:	2140      	movs	r1, #64	; 0x40
 8001876:	4816      	ldr	r0, [pc, #88]	; (80018d0 <traffic_light+0x3e0>)
 8001878:	f000 fb53 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_7_RED_GPIO_Port, LED_7_RED_Pin, SET);
 800187c:	2201      	movs	r2, #1
 800187e:	2180      	movs	r1, #128	; 0x80
 8001880:	4813      	ldr	r0, [pc, #76]	; (80018d0 <traffic_light+0x3e0>)
 8001882:	f000 fb4e 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_8_GREEN_GPIO_Port, LED_8_GREEN_Pin, RESET);
 8001886:	2200      	movs	r2, #0
 8001888:	f44f 7180 	mov.w	r1, #256	; 0x100
 800188c:	4810      	ldr	r0, [pc, #64]	; (80018d0 <traffic_light+0x3e0>)
 800188e:	f000 fb48 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_9_YELLOW_GPIO_Port, LED_9_YELLOW_Pin, SET);
 8001892:	2201      	movs	r2, #1
 8001894:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001898:	480d      	ldr	r0, [pc, #52]	; (80018d0 <traffic_light+0x3e0>)
 800189a:	f000 fb42 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_10_RED_GPIO_Port, LED_10_RED_Pin, SET);
 800189e:	2201      	movs	r2, #1
 80018a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018a4:	480a      	ldr	r0, [pc, #40]	; (80018d0 <traffic_light+0x3e0>)
 80018a6:	f000 fb3c 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_11_GREEN_GPIO_Port, LED_11_GREEN_Pin, RESET);
 80018aa:	2200      	movs	r2, #0
 80018ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018b0:	4807      	ldr	r0, [pc, #28]	; (80018d0 <traffic_light+0x3e0>)
 80018b2:	f000 fb36 	bl	8001f22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_12_YELLOW_GPIO_Port, LED_12_YELLOW_Pin, SET);
 80018b6:	2201      	movs	r2, #1
 80018b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018bc:	4804      	ldr	r0, [pc, #16]	; (80018d0 <traffic_light+0x3e0>)
 80018be:	f000 fb30 	bl	8001f22 <HAL_GPIO_WritePin>
		break;
 80018c2:	e000      	b.n	80018c6 <traffic_light+0x3d6>
	default:
		break;
 80018c4:	bf00      	nop
	}
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40010800 	.word	0x40010800

080018d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018d4:	f7ff fe06 	bl	80014e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018d8:	480b      	ldr	r0, [pc, #44]	; (8001908 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018da:	490c      	ldr	r1, [pc, #48]	; (800190c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018dc:	4a0c      	ldr	r2, [pc, #48]	; (8001910 <LoopFillZerobss+0x16>)
  movs r3, #0
 80018de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e0:	e002      	b.n	80018e8 <LoopCopyDataInit>

080018e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e6:	3304      	adds	r3, #4

080018e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018ec:	d3f9      	bcc.n	80018e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ee:	4a09      	ldr	r2, [pc, #36]	; (8001914 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018f0:	4c09      	ldr	r4, [pc, #36]	; (8001918 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f4:	e001      	b.n	80018fa <LoopFillZerobss>

080018f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f8:	3204      	adds	r2, #4

080018fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018fc:	d3fb      	bcc.n	80018f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018fe:	f001 faf9 	bl	8002ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001902:	f7ff fb83 	bl	800100c <main>
  bx lr
 8001906:	4770      	bx	lr
  ldr r0, =_sdata
 8001908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800190c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001910:	08002f90 	.word	0x08002f90
  ldr r2, =_sbss
 8001914:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001918:	2000012c 	.word	0x2000012c

0800191c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800191c:	e7fe      	b.n	800191c <ADC1_2_IRQHandler>
	...

08001920 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <HAL_Init+0x28>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a07      	ldr	r2, [pc, #28]	; (8001948 <HAL_Init+0x28>)
 800192a:	f043 0310 	orr.w	r3, r3, #16
 800192e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001930:	2003      	movs	r0, #3
 8001932:	f000 f923 	bl	8001b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001936:	200f      	movs	r0, #15
 8001938:	f000 f808 	bl	800194c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800193c:	f7ff fd4a 	bl	80013d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40022000 	.word	0x40022000

0800194c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_InitTick+0x54>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <HAL_InitTick+0x58>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	4619      	mov	r1, r3
 800195e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001962:	fbb3 f3f1 	udiv	r3, r3, r1
 8001966:	fbb2 f3f3 	udiv	r3, r2, r3
 800196a:	4618      	mov	r0, r3
 800196c:	f000 f93b 	bl	8001be6 <HAL_SYSTICK_Config>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e00e      	b.n	8001998 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b0f      	cmp	r3, #15
 800197e:	d80a      	bhi.n	8001996 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001980:	2200      	movs	r2, #0
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	f04f 30ff 	mov.w	r0, #4294967295
 8001988:	f000 f903 	bl	8001b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800198c:	4a06      	ldr	r2, [pc, #24]	; (80019a8 <HAL_InitTick+0x5c>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
 8001994:	e000      	b.n	8001998 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
}
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	2000007c 	.word	0x2000007c
 80019a4:	20000084 	.word	0x20000084
 80019a8:	20000080 	.word	0x20000080

080019ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <HAL_IncTick+0x1c>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b05      	ldr	r3, [pc, #20]	; (80019cc <HAL_IncTick+0x20>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4413      	add	r3, r2
 80019bc:	4a03      	ldr	r2, [pc, #12]	; (80019cc <HAL_IncTick+0x20>)
 80019be:	6013      	str	r3, [r2, #0]
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	20000084 	.word	0x20000084
 80019cc:	20000128 	.word	0x20000128

080019d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return uwTick;
 80019d4:	4b02      	ldr	r3, [pc, #8]	; (80019e0 <HAL_GetTick+0x10>)
 80019d6:	681b      	ldr	r3, [r3, #0]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	20000128 	.word	0x20000128

080019e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a00:	4013      	ands	r3, r2
 8001a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a16:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	60d3      	str	r3, [r2, #12]
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <__NVIC_GetPriorityGrouping+0x18>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	0a1b      	lsrs	r3, r3, #8
 8001a36:	f003 0307 	and.w	r3, r3, #7
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	db0b      	blt.n	8001a72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	f003 021f 	and.w	r2, r3, #31
 8001a60:	4906      	ldr	r1, [pc, #24]	; (8001a7c <__NVIC_EnableIRQ+0x34>)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	095b      	lsrs	r3, r3, #5
 8001a68:	2001      	movs	r0, #1
 8001a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr
 8001a7c:	e000e100 	.word	0xe000e100

08001a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	6039      	str	r1, [r7, #0]
 8001a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	db0a      	blt.n	8001aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	490c      	ldr	r1, [pc, #48]	; (8001acc <__NVIC_SetPriority+0x4c>)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	0112      	lsls	r2, r2, #4
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa8:	e00a      	b.n	8001ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4908      	ldr	r1, [pc, #32]	; (8001ad0 <__NVIC_SetPriority+0x50>)
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	3b04      	subs	r3, #4
 8001ab8:	0112      	lsls	r2, r2, #4
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	440b      	add	r3, r1
 8001abe:	761a      	strb	r2, [r3, #24]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000e100 	.word	0xe000e100
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	; 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f1c3 0307 	rsb	r3, r3, #7
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	bf28      	it	cs
 8001af2:	2304      	movcs	r3, #4
 8001af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3304      	adds	r3, #4
 8001afa:	2b06      	cmp	r3, #6
 8001afc:	d902      	bls.n	8001b04 <NVIC_EncodePriority+0x30>
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3b03      	subs	r3, #3
 8001b02:	e000      	b.n	8001b06 <NVIC_EncodePriority+0x32>
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	f04f 32ff 	mov.w	r2, #4294967295
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43da      	mvns	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	401a      	ands	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	43d9      	mvns	r1, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	4313      	orrs	r3, r2
         );
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3724      	adds	r7, #36	; 0x24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr

08001b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b48:	d301      	bcc.n	8001b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e00f      	b.n	8001b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b4e:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <SysTick_Config+0x40>)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b56:	210f      	movs	r1, #15
 8001b58:	f04f 30ff 	mov.w	r0, #4294967295
 8001b5c:	f7ff ff90 	bl	8001a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <SysTick_Config+0x40>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b66:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <SysTick_Config+0x40>)
 8001b68:	2207      	movs	r2, #7
 8001b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	e000e010 	.word	0xe000e010

08001b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff ff2d 	bl	80019e4 <__NVIC_SetPriorityGrouping>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b086      	sub	sp, #24
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	4603      	mov	r3, r0
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
 8001b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba4:	f7ff ff42 	bl	8001a2c <__NVIC_GetPriorityGrouping>
 8001ba8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	68b9      	ldr	r1, [r7, #8]
 8001bae:	6978      	ldr	r0, [r7, #20]
 8001bb0:	f7ff ff90 	bl	8001ad4 <NVIC_EncodePriority>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bba:	4611      	mov	r1, r2
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff5f 	bl	8001a80 <__NVIC_SetPriority>
}
 8001bc2:	bf00      	nop
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff35 	bl	8001a48 <__NVIC_EnableIRQ>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff ffa2 	bl	8001b38 <SysTick_Config>
 8001bf4:	4603      	mov	r3, r0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b08b      	sub	sp, #44	; 0x2c
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c12:	e148      	b.n	8001ea6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c14:	2201      	movs	r2, #1
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	69fa      	ldr	r2, [r7, #28]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	f040 8137 	bne.w	8001ea0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	4aa3      	ldr	r2, [pc, #652]	; (8001ec4 <HAL_GPIO_Init+0x2c4>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d05e      	beq.n	8001cfa <HAL_GPIO_Init+0xfa>
 8001c3c:	4aa1      	ldr	r2, [pc, #644]	; (8001ec4 <HAL_GPIO_Init+0x2c4>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d875      	bhi.n	8001d2e <HAL_GPIO_Init+0x12e>
 8001c42:	4aa1      	ldr	r2, [pc, #644]	; (8001ec8 <HAL_GPIO_Init+0x2c8>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d058      	beq.n	8001cfa <HAL_GPIO_Init+0xfa>
 8001c48:	4a9f      	ldr	r2, [pc, #636]	; (8001ec8 <HAL_GPIO_Init+0x2c8>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d86f      	bhi.n	8001d2e <HAL_GPIO_Init+0x12e>
 8001c4e:	4a9f      	ldr	r2, [pc, #636]	; (8001ecc <HAL_GPIO_Init+0x2cc>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d052      	beq.n	8001cfa <HAL_GPIO_Init+0xfa>
 8001c54:	4a9d      	ldr	r2, [pc, #628]	; (8001ecc <HAL_GPIO_Init+0x2cc>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d869      	bhi.n	8001d2e <HAL_GPIO_Init+0x12e>
 8001c5a:	4a9d      	ldr	r2, [pc, #628]	; (8001ed0 <HAL_GPIO_Init+0x2d0>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d04c      	beq.n	8001cfa <HAL_GPIO_Init+0xfa>
 8001c60:	4a9b      	ldr	r2, [pc, #620]	; (8001ed0 <HAL_GPIO_Init+0x2d0>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d863      	bhi.n	8001d2e <HAL_GPIO_Init+0x12e>
 8001c66:	4a9b      	ldr	r2, [pc, #620]	; (8001ed4 <HAL_GPIO_Init+0x2d4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d046      	beq.n	8001cfa <HAL_GPIO_Init+0xfa>
 8001c6c:	4a99      	ldr	r2, [pc, #612]	; (8001ed4 <HAL_GPIO_Init+0x2d4>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d85d      	bhi.n	8001d2e <HAL_GPIO_Init+0x12e>
 8001c72:	2b12      	cmp	r3, #18
 8001c74:	d82a      	bhi.n	8001ccc <HAL_GPIO_Init+0xcc>
 8001c76:	2b12      	cmp	r3, #18
 8001c78:	d859      	bhi.n	8001d2e <HAL_GPIO_Init+0x12e>
 8001c7a:	a201      	add	r2, pc, #4	; (adr r2, 8001c80 <HAL_GPIO_Init+0x80>)
 8001c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c80:	08001cfb 	.word	0x08001cfb
 8001c84:	08001cd5 	.word	0x08001cd5
 8001c88:	08001ce7 	.word	0x08001ce7
 8001c8c:	08001d29 	.word	0x08001d29
 8001c90:	08001d2f 	.word	0x08001d2f
 8001c94:	08001d2f 	.word	0x08001d2f
 8001c98:	08001d2f 	.word	0x08001d2f
 8001c9c:	08001d2f 	.word	0x08001d2f
 8001ca0:	08001d2f 	.word	0x08001d2f
 8001ca4:	08001d2f 	.word	0x08001d2f
 8001ca8:	08001d2f 	.word	0x08001d2f
 8001cac:	08001d2f 	.word	0x08001d2f
 8001cb0:	08001d2f 	.word	0x08001d2f
 8001cb4:	08001d2f 	.word	0x08001d2f
 8001cb8:	08001d2f 	.word	0x08001d2f
 8001cbc:	08001d2f 	.word	0x08001d2f
 8001cc0:	08001d2f 	.word	0x08001d2f
 8001cc4:	08001cdd 	.word	0x08001cdd
 8001cc8:	08001cf1 	.word	0x08001cf1
 8001ccc:	4a82      	ldr	r2, [pc, #520]	; (8001ed8 <HAL_GPIO_Init+0x2d8>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d013      	beq.n	8001cfa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cd2:	e02c      	b.n	8001d2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	623b      	str	r3, [r7, #32]
          break;
 8001cda:	e029      	b.n	8001d30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	623b      	str	r3, [r7, #32]
          break;
 8001ce4:	e024      	b.n	8001d30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	3308      	adds	r3, #8
 8001cec:	623b      	str	r3, [r7, #32]
          break;
 8001cee:	e01f      	b.n	8001d30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	330c      	adds	r3, #12
 8001cf6:	623b      	str	r3, [r7, #32]
          break;
 8001cf8:	e01a      	b.n	8001d30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d102      	bne.n	8001d08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d02:	2304      	movs	r3, #4
 8001d04:	623b      	str	r3, [r7, #32]
          break;
 8001d06:	e013      	b.n	8001d30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d105      	bne.n	8001d1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d10:	2308      	movs	r3, #8
 8001d12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69fa      	ldr	r2, [r7, #28]
 8001d18:	611a      	str	r2, [r3, #16]
          break;
 8001d1a:	e009      	b.n	8001d30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d1c:	2308      	movs	r3, #8
 8001d1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69fa      	ldr	r2, [r7, #28]
 8001d24:	615a      	str	r2, [r3, #20]
          break;
 8001d26:	e003      	b.n	8001d30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	623b      	str	r3, [r7, #32]
          break;
 8001d2c:	e000      	b.n	8001d30 <HAL_GPIO_Init+0x130>
          break;
 8001d2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	2bff      	cmp	r3, #255	; 0xff
 8001d34:	d801      	bhi.n	8001d3a <HAL_GPIO_Init+0x13a>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	e001      	b.n	8001d3e <HAL_GPIO_Init+0x13e>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	2bff      	cmp	r3, #255	; 0xff
 8001d44:	d802      	bhi.n	8001d4c <HAL_GPIO_Init+0x14c>
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	e002      	b.n	8001d52 <HAL_GPIO_Init+0x152>
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	3b08      	subs	r3, #8
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	210f      	movs	r1, #15
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	401a      	ands	r2, r3
 8001d64:	6a39      	ldr	r1, [r7, #32]
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 8090 	beq.w	8001ea0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d80:	4b56      	ldr	r3, [pc, #344]	; (8001edc <HAL_GPIO_Init+0x2dc>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	4a55      	ldr	r2, [pc, #340]	; (8001edc <HAL_GPIO_Init+0x2dc>)
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	6193      	str	r3, [r2, #24]
 8001d8c:	4b53      	ldr	r3, [pc, #332]	; (8001edc <HAL_GPIO_Init+0x2dc>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d98:	4a51      	ldr	r2, [pc, #324]	; (8001ee0 <HAL_GPIO_Init+0x2e0>)
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	089b      	lsrs	r3, r3, #2
 8001d9e:	3302      	adds	r3, #2
 8001da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	220f      	movs	r2, #15
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	4013      	ands	r3, r2
 8001dba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a49      	ldr	r2, [pc, #292]	; (8001ee4 <HAL_GPIO_Init+0x2e4>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d00d      	beq.n	8001de0 <HAL_GPIO_Init+0x1e0>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a48      	ldr	r2, [pc, #288]	; (8001ee8 <HAL_GPIO_Init+0x2e8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d007      	beq.n	8001ddc <HAL_GPIO_Init+0x1dc>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a47      	ldr	r2, [pc, #284]	; (8001eec <HAL_GPIO_Init+0x2ec>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d101      	bne.n	8001dd8 <HAL_GPIO_Init+0x1d8>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e004      	b.n	8001de2 <HAL_GPIO_Init+0x1e2>
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e002      	b.n	8001de2 <HAL_GPIO_Init+0x1e2>
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <HAL_GPIO_Init+0x1e2>
 8001de0:	2300      	movs	r3, #0
 8001de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de4:	f002 0203 	and.w	r2, r2, #3
 8001de8:	0092      	lsls	r2, r2, #2
 8001dea:	4093      	lsls	r3, r2
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001df2:	493b      	ldr	r1, [pc, #236]	; (8001ee0 <HAL_GPIO_Init+0x2e0>)
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	089b      	lsrs	r3, r3, #2
 8001df8:	3302      	adds	r3, #2
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d006      	beq.n	8001e1a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e0c:	4b38      	ldr	r3, [pc, #224]	; (8001ef0 <HAL_GPIO_Init+0x2f0>)
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	4937      	ldr	r1, [pc, #220]	; (8001ef0 <HAL_GPIO_Init+0x2f0>)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	608b      	str	r3, [r1, #8]
 8001e18:	e006      	b.n	8001e28 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e1a:	4b35      	ldr	r3, [pc, #212]	; (8001ef0 <HAL_GPIO_Init+0x2f0>)
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	4933      	ldr	r1, [pc, #204]	; (8001ef0 <HAL_GPIO_Init+0x2f0>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d006      	beq.n	8001e42 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e34:	4b2e      	ldr	r3, [pc, #184]	; (8001ef0 <HAL_GPIO_Init+0x2f0>)
 8001e36:	68da      	ldr	r2, [r3, #12]
 8001e38:	492d      	ldr	r1, [pc, #180]	; (8001ef0 <HAL_GPIO_Init+0x2f0>)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	60cb      	str	r3, [r1, #12]
 8001e40:	e006      	b.n	8001e50 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e42:	4b2b      	ldr	r3, [pc, #172]	; (8001ef0 <HAL_GPIO_Init+0x2f0>)
 8001e44:	68da      	ldr	r2, [r3, #12]
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	4929      	ldr	r1, [pc, #164]	; (8001ef0 <HAL_GPIO_Init+0x2f0>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d006      	beq.n	8001e6a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e5c:	4b24      	ldr	r3, [pc, #144]	; (8001ef0 <HAL_GPIO_Init+0x2f0>)
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	4923      	ldr	r1, [pc, #140]	; (8001ef0 <HAL_GPIO_Init+0x2f0>)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	604b      	str	r3, [r1, #4]
 8001e68:	e006      	b.n	8001e78 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e6a:	4b21      	ldr	r3, [pc, #132]	; (8001ef0 <HAL_GPIO_Init+0x2f0>)
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	491f      	ldr	r1, [pc, #124]	; (8001ef0 <HAL_GPIO_Init+0x2f0>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d006      	beq.n	8001e92 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e84:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <HAL_GPIO_Init+0x2f0>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4919      	ldr	r1, [pc, #100]	; (8001ef0 <HAL_GPIO_Init+0x2f0>)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	600b      	str	r3, [r1, #0]
 8001e90:	e006      	b.n	8001ea0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e92:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <HAL_GPIO_Init+0x2f0>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	4915      	ldr	r1, [pc, #84]	; (8001ef0 <HAL_GPIO_Init+0x2f0>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f47f aeaf 	bne.w	8001c14 <HAL_GPIO_Init+0x14>
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	bf00      	nop
 8001eba:	372c      	adds	r7, #44	; 0x2c
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	10320000 	.word	0x10320000
 8001ec8:	10310000 	.word	0x10310000
 8001ecc:	10220000 	.word	0x10220000
 8001ed0:	10210000 	.word	0x10210000
 8001ed4:	10120000 	.word	0x10120000
 8001ed8:	10110000 	.word	0x10110000
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40010000 	.word	0x40010000
 8001ee4:	40010800 	.word	0x40010800
 8001ee8:	40010c00 	.word	0x40010c00
 8001eec:	40011000 	.word	0x40011000
 8001ef0:	40010400 	.word	0x40010400

08001ef4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	887b      	ldrh	r3, [r7, #2]
 8001f06:	4013      	ands	r3, r2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d002      	beq.n	8001f12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	73fb      	strb	r3, [r7, #15]
 8001f10:	e001      	b.n	8001f16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f12:	2300      	movs	r3, #0
 8001f14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr

08001f22 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	807b      	strh	r3, [r7, #2]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f32:	787b      	ldrb	r3, [r7, #1]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f38:	887a      	ldrh	r2, [r7, #2]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f3e:	e003      	b.n	8001f48 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f40:	887b      	ldrh	r3, [r7, #2]
 8001f42:	041a      	lsls	r2, r3, #16
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	611a      	str	r2, [r3, #16]
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b085      	sub	sp, #20
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f64:	887a      	ldrh	r2, [r7, #2]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	041a      	lsls	r2, r3, #16
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	43d9      	mvns	r1, r3
 8001f70:	887b      	ldrh	r3, [r7, #2]
 8001f72:	400b      	ands	r3, r1
 8001f74:	431a      	orrs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	611a      	str	r2, [r3, #16]
}
 8001f7a:	bf00      	nop
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr

08001f84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e26c      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 8087 	beq.w	80020b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fa4:	4b92      	ldr	r3, [pc, #584]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 030c 	and.w	r3, r3, #12
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d00c      	beq.n	8001fca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fb0:	4b8f      	ldr	r3, [pc, #572]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 030c 	and.w	r3, r3, #12
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d112      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x5e>
 8001fbc:	4b8c      	ldr	r3, [pc, #560]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc8:	d10b      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fca:	4b89      	ldr	r3, [pc, #548]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d06c      	beq.n	80020b0 <HAL_RCC_OscConfig+0x12c>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d168      	bne.n	80020b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e246      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fea:	d106      	bne.n	8001ffa <HAL_RCC_OscConfig+0x76>
 8001fec:	4b80      	ldr	r3, [pc, #512]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a7f      	ldr	r2, [pc, #508]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	e02e      	b.n	8002058 <HAL_RCC_OscConfig+0xd4>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10c      	bne.n	800201c <HAL_RCC_OscConfig+0x98>
 8002002:	4b7b      	ldr	r3, [pc, #492]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a7a      	ldr	r2, [pc, #488]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	4b78      	ldr	r3, [pc, #480]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a77      	ldr	r2, [pc, #476]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002014:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	e01d      	b.n	8002058 <HAL_RCC_OscConfig+0xd4>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002024:	d10c      	bne.n	8002040 <HAL_RCC_OscConfig+0xbc>
 8002026:	4b72      	ldr	r3, [pc, #456]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a71      	ldr	r2, [pc, #452]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 800202c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	4b6f      	ldr	r3, [pc, #444]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a6e      	ldr	r2, [pc, #440]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	e00b      	b.n	8002058 <HAL_RCC_OscConfig+0xd4>
 8002040:	4b6b      	ldr	r3, [pc, #428]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a6a      	ldr	r2, [pc, #424]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	4b68      	ldr	r3, [pc, #416]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a67      	ldr	r2, [pc, #412]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002056:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d013      	beq.n	8002088 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002060:	f7ff fcb6 	bl	80019d0 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002068:	f7ff fcb2 	bl	80019d0 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b64      	cmp	r3, #100	; 0x64
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e1fa      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207a:	4b5d      	ldr	r3, [pc, #372]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0f0      	beq.n	8002068 <HAL_RCC_OscConfig+0xe4>
 8002086:	e014      	b.n	80020b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002088:	f7ff fca2 	bl	80019d0 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002090:	f7ff fc9e 	bl	80019d0 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b64      	cmp	r3, #100	; 0x64
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e1e6      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a2:	4b53      	ldr	r3, [pc, #332]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f0      	bne.n	8002090 <HAL_RCC_OscConfig+0x10c>
 80020ae:	e000      	b.n	80020b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d063      	beq.n	8002186 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020be:	4b4c      	ldr	r3, [pc, #304]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 030c 	and.w	r3, r3, #12
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00b      	beq.n	80020e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020ca:	4b49      	ldr	r3, [pc, #292]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	2b08      	cmp	r3, #8
 80020d4:	d11c      	bne.n	8002110 <HAL_RCC_OscConfig+0x18c>
 80020d6:	4b46      	ldr	r3, [pc, #280]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d116      	bne.n	8002110 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020e2:	4b43      	ldr	r3, [pc, #268]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d005      	beq.n	80020fa <HAL_RCC_OscConfig+0x176>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d001      	beq.n	80020fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e1ba      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fa:	4b3d      	ldr	r3, [pc, #244]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4939      	ldr	r1, [pc, #228]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 800210a:	4313      	orrs	r3, r2
 800210c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210e:	e03a      	b.n	8002186 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d020      	beq.n	800215a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002118:	4b36      	ldr	r3, [pc, #216]	; (80021f4 <HAL_RCC_OscConfig+0x270>)
 800211a:	2201      	movs	r2, #1
 800211c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211e:	f7ff fc57 	bl	80019d0 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002126:	f7ff fc53 	bl	80019d0 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e19b      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002138:	4b2d      	ldr	r3, [pc, #180]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0f0      	beq.n	8002126 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002144:	4b2a      	ldr	r3, [pc, #168]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4927      	ldr	r1, [pc, #156]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002154:	4313      	orrs	r3, r2
 8002156:	600b      	str	r3, [r1, #0]
 8002158:	e015      	b.n	8002186 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800215a:	4b26      	ldr	r3, [pc, #152]	; (80021f4 <HAL_RCC_OscConfig+0x270>)
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002160:	f7ff fc36 	bl	80019d0 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002168:	f7ff fc32 	bl	80019d0 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e17a      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800217a:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d03a      	beq.n	8002208 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d019      	beq.n	80021ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800219a:	4b17      	ldr	r3, [pc, #92]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 800219c:	2201      	movs	r2, #1
 800219e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a0:	f7ff fc16 	bl	80019d0 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a8:	f7ff fc12 	bl	80019d0 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e15a      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ba:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0f0      	beq.n	80021a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021c6:	2001      	movs	r0, #1
 80021c8:	f000 fa9a 	bl	8002700 <RCC_Delay>
 80021cc:	e01c      	b.n	8002208 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ce:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d4:	f7ff fbfc 	bl	80019d0 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021da:	e00f      	b.n	80021fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021dc:	f7ff fbf8 	bl	80019d0 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d908      	bls.n	80021fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e140      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000
 80021f4:	42420000 	.word	0x42420000
 80021f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021fc:	4b9e      	ldr	r3, [pc, #632]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1e9      	bne.n	80021dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 80a6 	beq.w	8002362 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002216:	2300      	movs	r3, #0
 8002218:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800221a:	4b97      	ldr	r3, [pc, #604]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10d      	bne.n	8002242 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002226:	4b94      	ldr	r3, [pc, #592]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	4a93      	ldr	r2, [pc, #588]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 800222c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002230:	61d3      	str	r3, [r2, #28]
 8002232:	4b91      	ldr	r3, [pc, #580]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800223e:	2301      	movs	r3, #1
 8002240:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002242:	4b8e      	ldr	r3, [pc, #568]	; (800247c <HAL_RCC_OscConfig+0x4f8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224a:	2b00      	cmp	r3, #0
 800224c:	d118      	bne.n	8002280 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800224e:	4b8b      	ldr	r3, [pc, #556]	; (800247c <HAL_RCC_OscConfig+0x4f8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a8a      	ldr	r2, [pc, #552]	; (800247c <HAL_RCC_OscConfig+0x4f8>)
 8002254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800225a:	f7ff fbb9 	bl	80019d0 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002262:	f7ff fbb5 	bl	80019d0 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b64      	cmp	r3, #100	; 0x64
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e0fd      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002274:	4b81      	ldr	r3, [pc, #516]	; (800247c <HAL_RCC_OscConfig+0x4f8>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0f0      	beq.n	8002262 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d106      	bne.n	8002296 <HAL_RCC_OscConfig+0x312>
 8002288:	4b7b      	ldr	r3, [pc, #492]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	4a7a      	ldr	r2, [pc, #488]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	6213      	str	r3, [r2, #32]
 8002294:	e02d      	b.n	80022f2 <HAL_RCC_OscConfig+0x36e>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x334>
 800229e:	4b76      	ldr	r3, [pc, #472]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	4a75      	ldr	r2, [pc, #468]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80022a4:	f023 0301 	bic.w	r3, r3, #1
 80022a8:	6213      	str	r3, [r2, #32]
 80022aa:	4b73      	ldr	r3, [pc, #460]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	4a72      	ldr	r2, [pc, #456]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80022b0:	f023 0304 	bic.w	r3, r3, #4
 80022b4:	6213      	str	r3, [r2, #32]
 80022b6:	e01c      	b.n	80022f2 <HAL_RCC_OscConfig+0x36e>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	2b05      	cmp	r3, #5
 80022be:	d10c      	bne.n	80022da <HAL_RCC_OscConfig+0x356>
 80022c0:	4b6d      	ldr	r3, [pc, #436]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	4a6c      	ldr	r2, [pc, #432]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80022c6:	f043 0304 	orr.w	r3, r3, #4
 80022ca:	6213      	str	r3, [r2, #32]
 80022cc:	4b6a      	ldr	r3, [pc, #424]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	4a69      	ldr	r2, [pc, #420]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	6213      	str	r3, [r2, #32]
 80022d8:	e00b      	b.n	80022f2 <HAL_RCC_OscConfig+0x36e>
 80022da:	4b67      	ldr	r3, [pc, #412]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	4a66      	ldr	r2, [pc, #408]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80022e0:	f023 0301 	bic.w	r3, r3, #1
 80022e4:	6213      	str	r3, [r2, #32]
 80022e6:	4b64      	ldr	r3, [pc, #400]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	4a63      	ldr	r2, [pc, #396]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80022ec:	f023 0304 	bic.w	r3, r3, #4
 80022f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d015      	beq.n	8002326 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fa:	f7ff fb69 	bl	80019d0 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002300:	e00a      	b.n	8002318 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002302:	f7ff fb65 	bl	80019d0 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002310:	4293      	cmp	r3, r2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e0ab      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002318:	4b57      	ldr	r3, [pc, #348]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0ee      	beq.n	8002302 <HAL_RCC_OscConfig+0x37e>
 8002324:	e014      	b.n	8002350 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002326:	f7ff fb53 	bl	80019d0 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800232c:	e00a      	b.n	8002344 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232e:	f7ff fb4f 	bl	80019d0 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	f241 3288 	movw	r2, #5000	; 0x1388
 800233c:	4293      	cmp	r3, r2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e095      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002344:	4b4c      	ldr	r3, [pc, #304]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1ee      	bne.n	800232e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002350:	7dfb      	ldrb	r3, [r7, #23]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d105      	bne.n	8002362 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002356:	4b48      	ldr	r3, [pc, #288]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	4a47      	ldr	r2, [pc, #284]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 800235c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002360:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 8081 	beq.w	800246e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800236c:	4b42      	ldr	r3, [pc, #264]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 030c 	and.w	r3, r3, #12
 8002374:	2b08      	cmp	r3, #8
 8002376:	d061      	beq.n	800243c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	2b02      	cmp	r3, #2
 800237e:	d146      	bne.n	800240e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002380:	4b3f      	ldr	r3, [pc, #252]	; (8002480 <HAL_RCC_OscConfig+0x4fc>)
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002386:	f7ff fb23 	bl	80019d0 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238e:	f7ff fb1f 	bl	80019d0 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e067      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a0:	4b35      	ldr	r3, [pc, #212]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1f0      	bne.n	800238e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b4:	d108      	bne.n	80023c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023b6:	4b30      	ldr	r3, [pc, #192]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	492d      	ldr	r1, [pc, #180]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023c8:	4b2b      	ldr	r3, [pc, #172]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a19      	ldr	r1, [r3, #32]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	430b      	orrs	r3, r1
 80023da:	4927      	ldr	r1, [pc, #156]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023e0:	4b27      	ldr	r3, [pc, #156]	; (8002480 <HAL_RCC_OscConfig+0x4fc>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e6:	f7ff faf3 	bl	80019d0 <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ee:	f7ff faef 	bl	80019d0 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e037      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002400:	4b1d      	ldr	r3, [pc, #116]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0f0      	beq.n	80023ee <HAL_RCC_OscConfig+0x46a>
 800240c:	e02f      	b.n	800246e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240e:	4b1c      	ldr	r3, [pc, #112]	; (8002480 <HAL_RCC_OscConfig+0x4fc>)
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002414:	f7ff fadc 	bl	80019d0 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241c:	f7ff fad8 	bl	80019d0 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e020      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800242e:	4b12      	ldr	r3, [pc, #72]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x498>
 800243a:	e018      	b.n	800246e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d101      	bne.n	8002448 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e013      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	429a      	cmp	r2, r3
 800245a:	d106      	bne.n	800246a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002466:	429a      	cmp	r2, r3
 8002468:	d001      	beq.n	800246e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40021000 	.word	0x40021000
 800247c:	40007000 	.word	0x40007000
 8002480:	42420060 	.word	0x42420060

08002484 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0d0      	b.n	800263a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002498:	4b6a      	ldr	r3, [pc, #424]	; (8002644 <HAL_RCC_ClockConfig+0x1c0>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d910      	bls.n	80024c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a6:	4b67      	ldr	r3, [pc, #412]	; (8002644 <HAL_RCC_ClockConfig+0x1c0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f023 0207 	bic.w	r2, r3, #7
 80024ae:	4965      	ldr	r1, [pc, #404]	; (8002644 <HAL_RCC_ClockConfig+0x1c0>)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b6:	4b63      	ldr	r3, [pc, #396]	; (8002644 <HAL_RCC_ClockConfig+0x1c0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d001      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0b8      	b.n	800263a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d020      	beq.n	8002516 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024e0:	4b59      	ldr	r3, [pc, #356]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	4a58      	ldr	r2, [pc, #352]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024f8:	4b53      	ldr	r3, [pc, #332]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	4a52      	ldr	r2, [pc, #328]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 80024fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002502:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002504:	4b50      	ldr	r3, [pc, #320]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	494d      	ldr	r1, [pc, #308]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	4313      	orrs	r3, r2
 8002514:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d040      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d107      	bne.n	800253a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252a:	4b47      	ldr	r3, [pc, #284]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d115      	bne.n	8002562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e07f      	b.n	800263a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d107      	bne.n	8002552 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002542:	4b41      	ldr	r3, [pc, #260]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d109      	bne.n	8002562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e073      	b.n	800263a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002552:	4b3d      	ldr	r3, [pc, #244]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e06b      	b.n	800263a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002562:	4b39      	ldr	r3, [pc, #228]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f023 0203 	bic.w	r2, r3, #3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	4936      	ldr	r1, [pc, #216]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 8002570:	4313      	orrs	r3, r2
 8002572:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002574:	f7ff fa2c 	bl	80019d0 <HAL_GetTick>
 8002578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257a:	e00a      	b.n	8002592 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800257c:	f7ff fa28 	bl	80019d0 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	; 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e053      	b.n	800263a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002592:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 020c 	and.w	r2, r3, #12
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d1eb      	bne.n	800257c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025a4:	4b27      	ldr	r3, [pc, #156]	; (8002644 <HAL_RCC_ClockConfig+0x1c0>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d210      	bcs.n	80025d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b2:	4b24      	ldr	r3, [pc, #144]	; (8002644 <HAL_RCC_ClockConfig+0x1c0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 0207 	bic.w	r2, r3, #7
 80025ba:	4922      	ldr	r1, [pc, #136]	; (8002644 <HAL_RCC_ClockConfig+0x1c0>)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	4313      	orrs	r3, r2
 80025c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c2:	4b20      	ldr	r3, [pc, #128]	; (8002644 <HAL_RCC_ClockConfig+0x1c0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d001      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e032      	b.n	800263a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d008      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025e0:	4b19      	ldr	r3, [pc, #100]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	4916      	ldr	r1, [pc, #88]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d009      	beq.n	8002612 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025fe:	4b12      	ldr	r3, [pc, #72]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	490e      	ldr	r1, [pc, #56]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	4313      	orrs	r3, r2
 8002610:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002612:	f000 f821 	bl	8002658 <HAL_RCC_GetSysClockFreq>
 8002616:	4602      	mov	r2, r0
 8002618:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	091b      	lsrs	r3, r3, #4
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	490a      	ldr	r1, [pc, #40]	; (800264c <HAL_RCC_ClockConfig+0x1c8>)
 8002624:	5ccb      	ldrb	r3, [r1, r3]
 8002626:	fa22 f303 	lsr.w	r3, r2, r3
 800262a:	4a09      	ldr	r2, [pc, #36]	; (8002650 <HAL_RCC_ClockConfig+0x1cc>)
 800262c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800262e:	4b09      	ldr	r3, [pc, #36]	; (8002654 <HAL_RCC_ClockConfig+0x1d0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff f98a 	bl	800194c <HAL_InitTick>

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40022000 	.word	0x40022000
 8002648:	40021000 	.word	0x40021000
 800264c:	08002f64 	.word	0x08002f64
 8002650:	2000007c 	.word	0x2000007c
 8002654:	20000080 	.word	0x20000080

08002658 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002658:	b480      	push	{r7}
 800265a:	b087      	sub	sp, #28
 800265c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800265e:	2300      	movs	r3, #0
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	2300      	movs	r3, #0
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	2300      	movs	r3, #0
 800266c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800266e:	2300      	movs	r3, #0
 8002670:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002672:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <HAL_RCC_GetSysClockFreq+0x94>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f003 030c 	and.w	r3, r3, #12
 800267e:	2b04      	cmp	r3, #4
 8002680:	d002      	beq.n	8002688 <HAL_RCC_GetSysClockFreq+0x30>
 8002682:	2b08      	cmp	r3, #8
 8002684:	d003      	beq.n	800268e <HAL_RCC_GetSysClockFreq+0x36>
 8002686:	e027      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002688:	4b19      	ldr	r3, [pc, #100]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800268a:	613b      	str	r3, [r7, #16]
      break;
 800268c:	e027      	b.n	80026de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	0c9b      	lsrs	r3, r3, #18
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	4a17      	ldr	r2, [pc, #92]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002698:	5cd3      	ldrb	r3, [r2, r3]
 800269a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d010      	beq.n	80026c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026a6:	4b11      	ldr	r3, [pc, #68]	; (80026ec <HAL_RCC_GetSysClockFreq+0x94>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	0c5b      	lsrs	r3, r3, #17
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	4a11      	ldr	r2, [pc, #68]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80026b2:	5cd3      	ldrb	r3, [r2, r3]
 80026b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a0d      	ldr	r2, [pc, #52]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80026ba:	fb02 f203 	mul.w	r2, r2, r3
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	e004      	b.n	80026d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a0c      	ldr	r2, [pc, #48]	; (80026fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80026cc:	fb02 f303 	mul.w	r3, r2, r3
 80026d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	613b      	str	r3, [r7, #16]
      break;
 80026d6:	e002      	b.n	80026de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026d8:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80026da:	613b      	str	r3, [r7, #16]
      break;
 80026dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026de:	693b      	ldr	r3, [r7, #16]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	371c      	adds	r7, #28
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40021000 	.word	0x40021000
 80026f0:	007a1200 	.word	0x007a1200
 80026f4:	08002f74 	.word	0x08002f74
 80026f8:	08002f84 	.word	0x08002f84
 80026fc:	003d0900 	.word	0x003d0900

08002700 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002708:	4b0a      	ldr	r3, [pc, #40]	; (8002734 <RCC_Delay+0x34>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <RCC_Delay+0x38>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	0a5b      	lsrs	r3, r3, #9
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	fb02 f303 	mul.w	r3, r2, r3
 800271a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800271c:	bf00      	nop
  }
  while (Delay --);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1e5a      	subs	r2, r3, #1
 8002722:	60fa      	str	r2, [r7, #12]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f9      	bne.n	800271c <RCC_Delay+0x1c>
}
 8002728:	bf00      	nop
 800272a:	bf00      	nop
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr
 8002734:	2000007c 	.word	0x2000007c
 8002738:	10624dd3 	.word	0x10624dd3

0800273c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e041      	b.n	80027d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d106      	bne.n	8002768 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7fe fe68 	bl	8001438 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3304      	adds	r3, #4
 8002778:	4619      	mov	r1, r3
 800277a:	4610      	mov	r0, r2
 800277c:	f000 fa56 	bl	8002c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d001      	beq.n	80027f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e035      	b.n	8002860 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0201 	orr.w	r2, r2, #1
 800280a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a16      	ldr	r2, [pc, #88]	; (800286c <HAL_TIM_Base_Start_IT+0x90>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d009      	beq.n	800282a <HAL_TIM_Base_Start_IT+0x4e>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800281e:	d004      	beq.n	800282a <HAL_TIM_Base_Start_IT+0x4e>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a12      	ldr	r2, [pc, #72]	; (8002870 <HAL_TIM_Base_Start_IT+0x94>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d111      	bne.n	800284e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2b06      	cmp	r3, #6
 800283a:	d010      	beq.n	800285e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0201 	orr.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800284c:	e007      	b.n	800285e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f042 0201 	orr.w	r2, r2, #1
 800285c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	40012c00 	.word	0x40012c00
 8002870:	40000400 	.word	0x40000400

08002874 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d020      	beq.n	80028d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d01b      	beq.n	80028d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f06f 0202 	mvn.w	r2, #2
 80028a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f998 	bl	8002bf4 <HAL_TIM_IC_CaptureCallback>
 80028c4:	e005      	b.n	80028d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f98b 	bl	8002be2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 f99a 	bl	8002c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d020      	beq.n	8002924 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d01b      	beq.n	8002924 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f06f 0204 	mvn.w	r2, #4
 80028f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2202      	movs	r2, #2
 80028fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f972 	bl	8002bf4 <HAL_TIM_IC_CaptureCallback>
 8002910:	e005      	b.n	800291e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f965 	bl	8002be2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 f974 	bl	8002c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d020      	beq.n	8002970 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f003 0308 	and.w	r3, r3, #8
 8002934:	2b00      	cmp	r3, #0
 8002936:	d01b      	beq.n	8002970 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f06f 0208 	mvn.w	r2, #8
 8002940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2204      	movs	r2, #4
 8002946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f94c 	bl	8002bf4 <HAL_TIM_IC_CaptureCallback>
 800295c:	e005      	b.n	800296a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f93f 	bl	8002be2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f94e 	bl	8002c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	2b00      	cmp	r3, #0
 8002978:	d020      	beq.n	80029bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	2b00      	cmp	r3, #0
 8002982:	d01b      	beq.n	80029bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f06f 0210 	mvn.w	r2, #16
 800298c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2208      	movs	r2, #8
 8002992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f926 	bl	8002bf4 <HAL_TIM_IC_CaptureCallback>
 80029a8:	e005      	b.n	80029b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f919 	bl	8002be2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 f928 	bl	8002c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00c      	beq.n	80029e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d007      	beq.n	80029e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f06f 0201 	mvn.w	r2, #1
 80029d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7fe fc2a 	bl	8001234 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00c      	beq.n	8002a04 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d007      	beq.n	8002a04 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 fa6f 	bl	8002ee2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00c      	beq.n	8002a28 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d007      	beq.n	8002a28 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f8f8 	bl	8002c18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f003 0320 	and.w	r3, r3, #32
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00c      	beq.n	8002a4c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f003 0320 	and.w	r3, r3, #32
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d007      	beq.n	8002a4c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f06f 0220 	mvn.w	r2, #32
 8002a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 fa42 	bl	8002ed0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_TIM_ConfigClockSource+0x1c>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e0b4      	b.n	8002bda <HAL_TIM_ConfigClockSource+0x186>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aa8:	d03e      	beq.n	8002b28 <HAL_TIM_ConfigClockSource+0xd4>
 8002aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aae:	f200 8087 	bhi.w	8002bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab6:	f000 8086 	beq.w	8002bc6 <HAL_TIM_ConfigClockSource+0x172>
 8002aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002abe:	d87f      	bhi.n	8002bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ac0:	2b70      	cmp	r3, #112	; 0x70
 8002ac2:	d01a      	beq.n	8002afa <HAL_TIM_ConfigClockSource+0xa6>
 8002ac4:	2b70      	cmp	r3, #112	; 0x70
 8002ac6:	d87b      	bhi.n	8002bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ac8:	2b60      	cmp	r3, #96	; 0x60
 8002aca:	d050      	beq.n	8002b6e <HAL_TIM_ConfigClockSource+0x11a>
 8002acc:	2b60      	cmp	r3, #96	; 0x60
 8002ace:	d877      	bhi.n	8002bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ad0:	2b50      	cmp	r3, #80	; 0x50
 8002ad2:	d03c      	beq.n	8002b4e <HAL_TIM_ConfigClockSource+0xfa>
 8002ad4:	2b50      	cmp	r3, #80	; 0x50
 8002ad6:	d873      	bhi.n	8002bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ad8:	2b40      	cmp	r3, #64	; 0x40
 8002ada:	d058      	beq.n	8002b8e <HAL_TIM_ConfigClockSource+0x13a>
 8002adc:	2b40      	cmp	r3, #64	; 0x40
 8002ade:	d86f      	bhi.n	8002bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ae0:	2b30      	cmp	r3, #48	; 0x30
 8002ae2:	d064      	beq.n	8002bae <HAL_TIM_ConfigClockSource+0x15a>
 8002ae4:	2b30      	cmp	r3, #48	; 0x30
 8002ae6:	d86b      	bhi.n	8002bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ae8:	2b20      	cmp	r3, #32
 8002aea:	d060      	beq.n	8002bae <HAL_TIM_ConfigClockSource+0x15a>
 8002aec:	2b20      	cmp	r3, #32
 8002aee:	d867      	bhi.n	8002bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d05c      	beq.n	8002bae <HAL_TIM_ConfigClockSource+0x15a>
 8002af4:	2b10      	cmp	r3, #16
 8002af6:	d05a      	beq.n	8002bae <HAL_TIM_ConfigClockSource+0x15a>
 8002af8:	e062      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	6899      	ldr	r1, [r3, #8]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f000 f96a 	bl	8002de2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	609a      	str	r2, [r3, #8]
      break;
 8002b26:	e04f      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6818      	ldr	r0, [r3, #0]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	6899      	ldr	r1, [r3, #8]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f000 f953 	bl	8002de2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b4a:	609a      	str	r2, [r3, #8]
      break;
 8002b4c:	e03c      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6818      	ldr	r0, [r3, #0]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	6859      	ldr	r1, [r3, #4]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	f000 f8ca 	bl	8002cf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2150      	movs	r1, #80	; 0x50
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 f921 	bl	8002dae <TIM_ITRx_SetConfig>
      break;
 8002b6c:	e02c      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6818      	ldr	r0, [r3, #0]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	6859      	ldr	r1, [r3, #4]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	f000 f8e8 	bl	8002d50 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2160      	movs	r1, #96	; 0x60
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 f911 	bl	8002dae <TIM_ITRx_SetConfig>
      break;
 8002b8c:	e01c      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	6859      	ldr	r1, [r3, #4]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	f000 f8aa 	bl	8002cf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2140      	movs	r1, #64	; 0x40
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 f901 	bl	8002dae <TIM_ITRx_SetConfig>
      break;
 8002bac:	e00c      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4610      	mov	r0, r2
 8002bba:	f000 f8f8 	bl	8002dae <TIM_ITRx_SetConfig>
      break;
 8002bbe:	e003      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc4:	e000      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002bc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr

08002c06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr

08002c18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr
	...

08002c2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a2b      	ldr	r2, [pc, #172]	; (8002cec <TIM_Base_SetConfig+0xc0>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d007      	beq.n	8002c54 <TIM_Base_SetConfig+0x28>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c4a:	d003      	beq.n	8002c54 <TIM_Base_SetConfig+0x28>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a28      	ldr	r2, [pc, #160]	; (8002cf0 <TIM_Base_SetConfig+0xc4>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d108      	bne.n	8002c66 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a20      	ldr	r2, [pc, #128]	; (8002cec <TIM_Base_SetConfig+0xc0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d007      	beq.n	8002c7e <TIM_Base_SetConfig+0x52>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c74:	d003      	beq.n	8002c7e <TIM_Base_SetConfig+0x52>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a1d      	ldr	r2, [pc, #116]	; (8002cf0 <TIM_Base_SetConfig+0xc4>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d108      	bne.n	8002c90 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a0d      	ldr	r2, [pc, #52]	; (8002cec <TIM_Base_SetConfig+0xc0>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d103      	bne.n	8002cc4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	691a      	ldr	r2, [r3, #16]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d005      	beq.n	8002ce2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	f023 0201 	bic.w	r2, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	611a      	str	r2, [r3, #16]
  }
}
 8002ce2:	bf00      	nop
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr
 8002cec:	40012c00 	.word	0x40012c00
 8002cf0:	40000400 	.word	0x40000400

08002cf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b087      	sub	sp, #28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	f023 0201 	bic.w	r2, r3, #1
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f023 030a 	bic.w	r3, r3, #10
 8002d30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	621a      	str	r2, [r3, #32]
}
 8002d46:	bf00      	nop
 8002d48:	371c      	adds	r7, #28
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr

08002d50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	f023 0210 	bic.w	r2, r3, #16
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	031b      	lsls	r3, r3, #12
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d8c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	621a      	str	r2, [r3, #32]
}
 8002da4:	bf00      	nop
 8002da6:	371c      	adds	r7, #28
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr

08002dae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b085      	sub	sp, #20
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
 8002db6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f043 0307 	orr.w	r3, r3, #7
 8002dd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	609a      	str	r2, [r3, #8]
}
 8002dd8:	bf00      	nop
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr

08002de2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b087      	sub	sp, #28
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
 8002dee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dfc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	021a      	lsls	r2, r3, #8
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	431a      	orrs	r2, r3
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	609a      	str	r2, [r3, #8]
}
 8002e16:	bf00      	nop
 8002e18:	371c      	adds	r7, #28
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr

08002e20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e041      	b.n	8002ebc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a14      	ldr	r2, [pc, #80]	; (8002ec8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d009      	beq.n	8002e90 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e84:	d004      	beq.n	8002e90 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a10      	ldr	r2, [pc, #64]	; (8002ecc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d10c      	bne.n	8002eaa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40012c00 	.word	0x40012c00
 8002ecc:	40000400 	.word	0x40000400

08002ed0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bc80      	pop	{r7}
 8002ee0:	4770      	bx	lr

08002ee2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <__libc_init_array>:
 8002ef4:	b570      	push	{r4, r5, r6, lr}
 8002ef6:	2600      	movs	r6, #0
 8002ef8:	4d0c      	ldr	r5, [pc, #48]	; (8002f2c <__libc_init_array+0x38>)
 8002efa:	4c0d      	ldr	r4, [pc, #52]	; (8002f30 <__libc_init_array+0x3c>)
 8002efc:	1b64      	subs	r4, r4, r5
 8002efe:	10a4      	asrs	r4, r4, #2
 8002f00:	42a6      	cmp	r6, r4
 8002f02:	d109      	bne.n	8002f18 <__libc_init_array+0x24>
 8002f04:	f000 f822 	bl	8002f4c <_init>
 8002f08:	2600      	movs	r6, #0
 8002f0a:	4d0a      	ldr	r5, [pc, #40]	; (8002f34 <__libc_init_array+0x40>)
 8002f0c:	4c0a      	ldr	r4, [pc, #40]	; (8002f38 <__libc_init_array+0x44>)
 8002f0e:	1b64      	subs	r4, r4, r5
 8002f10:	10a4      	asrs	r4, r4, #2
 8002f12:	42a6      	cmp	r6, r4
 8002f14:	d105      	bne.n	8002f22 <__libc_init_array+0x2e>
 8002f16:	bd70      	pop	{r4, r5, r6, pc}
 8002f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f1c:	4798      	blx	r3
 8002f1e:	3601      	adds	r6, #1
 8002f20:	e7ee      	b.n	8002f00 <__libc_init_array+0xc>
 8002f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f26:	4798      	blx	r3
 8002f28:	3601      	adds	r6, #1
 8002f2a:	e7f2      	b.n	8002f12 <__libc_init_array+0x1e>
 8002f2c:	08002f88 	.word	0x08002f88
 8002f30:	08002f88 	.word	0x08002f88
 8002f34:	08002f88 	.word	0x08002f88
 8002f38:	08002f8c 	.word	0x08002f8c

08002f3c <memset>:
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	4402      	add	r2, r0
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d100      	bne.n	8002f46 <memset+0xa>
 8002f44:	4770      	bx	lr
 8002f46:	f803 1b01 	strb.w	r1, [r3], #1
 8002f4a:	e7f9      	b.n	8002f40 <memset+0x4>

08002f4c <_init>:
 8002f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f4e:	bf00      	nop
 8002f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f52:	bc08      	pop	{r3}
 8002f54:	469e      	mov	lr, r3
 8002f56:	4770      	bx	lr

08002f58 <_fini>:
 8002f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f5a:	bf00      	nop
 8002f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f5e:	bc08      	pop	{r3}
 8002f60:	469e      	mov	lr, r3
 8002f62:	4770      	bx	lr
