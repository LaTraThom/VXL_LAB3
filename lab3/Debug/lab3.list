
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080027ec  080027ec  000127ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002810  08002810  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08002810  08002810  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002810  08002810  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002810  08002810  00012810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002814  08002814  00012814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08002818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  2000006c  08002884  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002884  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009499  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a86  00000000  00000000  0002952e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0002afb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002b9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016bf2  00000000  00000000  0002c310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b331  00000000  00000000  00042f02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000826ef  00000000  00000000  0004e233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0922  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002844  00000000  00000000  000d0978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	080027d4 	.word	0x080027d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	080027d4 	.word	0x080027d4

0800014c <subKeyProcess>:
		return 1;
	}
	return 0;
}

void subKeyProcess(int button_id){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	//TODO
    switch (button_id) {
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b03      	cmp	r3, #3
 8000158:	d011      	beq.n	800017e <subKeyProcess+0x32>
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2b03      	cmp	r3, #3
 800015e:	dc12      	bgt.n	8000186 <subKeyProcess+0x3a>
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	2b01      	cmp	r3, #1
 8000164:	d003      	beq.n	800016e <subKeyProcess+0x22>
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	2b02      	cmp	r3, #2
 800016a:	d004      	beq.n	8000176 <subKeyProcess+0x2a>
            break;
        case 3:
            button3_flag = 1;
            break;
        default:
            break;
 800016c:	e00b      	b.n	8000186 <subKeyProcess+0x3a>
            button1_flag = 1;
 800016e:	4b09      	ldr	r3, [pc, #36]	; (8000194 <subKeyProcess+0x48>)
 8000170:	2201      	movs	r2, #1
 8000172:	601a      	str	r2, [r3, #0]
            break;
 8000174:	e008      	b.n	8000188 <subKeyProcess+0x3c>
            button2_flag = 1;
 8000176:	4b08      	ldr	r3, [pc, #32]	; (8000198 <subKeyProcess+0x4c>)
 8000178:	2201      	movs	r2, #1
 800017a:	601a      	str	r2, [r3, #0]
            break;
 800017c:	e004      	b.n	8000188 <subKeyProcess+0x3c>
            button3_flag = 1;
 800017e:	4b07      	ldr	r3, [pc, #28]	; (800019c <subKeyProcess+0x50>)
 8000180:	2201      	movs	r2, #1
 8000182:	601a      	str	r2, [r3, #0]
            break;
 8000184:	e000      	b.n	8000188 <subKeyProcess+0x3c>
            break;
 8000186:	bf00      	nop
    }
}
 8000188:	bf00      	nop
 800018a:	370c      	adds	r7, #12
 800018c:	46bd      	mov	sp, r7
 800018e:	bc80      	pop	{r7}
 8000190:	4770      	bx	lr
 8000192:	bf00      	nop
 8000194:	20000088 	.word	0x20000088
 8000198:	2000008c 	.word	0x2000008c
 800019c:	20000090 	.word	0x20000090

080001a0 <getKeyInput>:

void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0
    // Xử lý button 1
    KeyReg2_1 = KeyReg1_1;
 80001a4:	4b6b      	ldr	r3, [pc, #428]	; (8000354 <getKeyInput+0x1b4>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4a6b      	ldr	r2, [pc, #428]	; (8000358 <getKeyInput+0x1b8>)
 80001aa:	6013      	str	r3, [r2, #0]
    KeyReg1_1 = KeyReg0_1;
 80001ac:	4b6b      	ldr	r3, [pc, #428]	; (800035c <getKeyInput+0x1bc>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a68      	ldr	r2, [pc, #416]	; (8000354 <getKeyInput+0x1b4>)
 80001b2:	6013      	str	r3, [r2, #0]
    KeyReg0_1 = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 80001b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001b8:	4869      	ldr	r0, [pc, #420]	; (8000360 <getKeyInput+0x1c0>)
 80001ba:	f001 faf7 	bl	80017ac <HAL_GPIO_ReadPin>
 80001be:	4603      	mov	r3, r0
 80001c0:	461a      	mov	r2, r3
 80001c2:	4b66      	ldr	r3, [pc, #408]	; (800035c <getKeyInput+0x1bc>)
 80001c4:	601a      	str	r2, [r3, #0]

    if ((KeyReg1_1 == KeyReg0_1) && (KeyReg1_1 == KeyReg2_1)) {
 80001c6:	4b63      	ldr	r3, [pc, #396]	; (8000354 <getKeyInput+0x1b4>)
 80001c8:	681a      	ldr	r2, [r3, #0]
 80001ca:	4b64      	ldr	r3, [pc, #400]	; (800035c <getKeyInput+0x1bc>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	429a      	cmp	r2, r3
 80001d0:	d12f      	bne.n	8000232 <getKeyInput+0x92>
 80001d2:	4b60      	ldr	r3, [pc, #384]	; (8000354 <getKeyInput+0x1b4>)
 80001d4:	681a      	ldr	r2, [r3, #0]
 80001d6:	4b60      	ldr	r3, [pc, #384]	; (8000358 <getKeyInput+0x1b8>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	429a      	cmp	r2, r3
 80001dc:	d129      	bne.n	8000232 <getKeyInput+0x92>
        if (KeyReg2_1 != KeyReg3_1) {
 80001de:	4b5e      	ldr	r3, [pc, #376]	; (8000358 <getKeyInput+0x1b8>)
 80001e0:	681a      	ldr	r2, [r3, #0]
 80001e2:	4b60      	ldr	r3, [pc, #384]	; (8000364 <getKeyInput+0x1c4>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	429a      	cmp	r2, r3
 80001e8:	d00f      	beq.n	800020a <getKeyInput+0x6a>
            KeyReg3_1 = KeyReg2_1;
 80001ea:	4b5b      	ldr	r3, [pc, #364]	; (8000358 <getKeyInput+0x1b8>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a5d      	ldr	r2, [pc, #372]	; (8000364 <getKeyInput+0x1c4>)
 80001f0:	6013      	str	r3, [r2, #0]
            if (KeyReg3_1 == PRESSED_STATE) {
 80001f2:	4b5c      	ldr	r3, [pc, #368]	; (8000364 <getKeyInput+0x1c4>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d11b      	bne.n	8000232 <getKeyInput+0x92>
                TimeOutForKeyPress1 = 500;
 80001fa:	4b5b      	ldr	r3, [pc, #364]	; (8000368 <getKeyInput+0x1c8>)
 80001fc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000200:	601a      	str	r2, [r3, #0]
                subKeyProcess(1);
 8000202:	2001      	movs	r0, #1
 8000204:	f7ff ffa2 	bl	800014c <subKeyProcess>
 8000208:	e013      	b.n	8000232 <getKeyInput+0x92>
            }
        } else {
            TimeOutForKeyPress1--;
 800020a:	4b57      	ldr	r3, [pc, #348]	; (8000368 <getKeyInput+0x1c8>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	3b01      	subs	r3, #1
 8000210:	4a55      	ldr	r2, [pc, #340]	; (8000368 <getKeyInput+0x1c8>)
 8000212:	6013      	str	r3, [r2, #0]
            if (TimeOutForKeyPress1 == 0) {
 8000214:	4b54      	ldr	r3, [pc, #336]	; (8000368 <getKeyInput+0x1c8>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d10a      	bne.n	8000232 <getKeyInput+0x92>
                TimeOutForKeyPress1 = 500;
 800021c:	4b52      	ldr	r3, [pc, #328]	; (8000368 <getKeyInput+0x1c8>)
 800021e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000222:	601a      	str	r2, [r3, #0]
                if (KeyReg3_1 == PRESSED_STATE) {
 8000224:	4b4f      	ldr	r3, [pc, #316]	; (8000364 <getKeyInput+0x1c4>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d102      	bne.n	8000232 <getKeyInput+0x92>
                    subKeyProcess(1);
 800022c:	2001      	movs	r0, #1
 800022e:	f7ff ff8d 	bl	800014c <subKeyProcess>
            }
        }
    }

    // Xử lý button 2
    KeyReg2_2 = KeyReg1_2;
 8000232:	4b4e      	ldr	r3, [pc, #312]	; (800036c <getKeyInput+0x1cc>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	4a4e      	ldr	r2, [pc, #312]	; (8000370 <getKeyInput+0x1d0>)
 8000238:	6013      	str	r3, [r2, #0]
    KeyReg1_2 = KeyReg0_2;
 800023a:	4b4e      	ldr	r3, [pc, #312]	; (8000374 <getKeyInput+0x1d4>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a4b      	ldr	r2, [pc, #300]	; (800036c <getKeyInput+0x1cc>)
 8000240:	6013      	str	r3, [r2, #0]
    KeyReg0_2 = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000242:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000246:	4846      	ldr	r0, [pc, #280]	; (8000360 <getKeyInput+0x1c0>)
 8000248:	f001 fab0 	bl	80017ac <HAL_GPIO_ReadPin>
 800024c:	4603      	mov	r3, r0
 800024e:	461a      	mov	r2, r3
 8000250:	4b48      	ldr	r3, [pc, #288]	; (8000374 <getKeyInput+0x1d4>)
 8000252:	601a      	str	r2, [r3, #0]

    if ((KeyReg1_2 == KeyReg0_2) && (KeyReg1_2 == KeyReg2_2)) {
 8000254:	4b45      	ldr	r3, [pc, #276]	; (800036c <getKeyInput+0x1cc>)
 8000256:	681a      	ldr	r2, [r3, #0]
 8000258:	4b46      	ldr	r3, [pc, #280]	; (8000374 <getKeyInput+0x1d4>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	429a      	cmp	r2, r3
 800025e:	d12f      	bne.n	80002c0 <getKeyInput+0x120>
 8000260:	4b42      	ldr	r3, [pc, #264]	; (800036c <getKeyInput+0x1cc>)
 8000262:	681a      	ldr	r2, [r3, #0]
 8000264:	4b42      	ldr	r3, [pc, #264]	; (8000370 <getKeyInput+0x1d0>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	429a      	cmp	r2, r3
 800026a:	d129      	bne.n	80002c0 <getKeyInput+0x120>
        if (KeyReg2_2 != KeyReg3_2) {
 800026c:	4b40      	ldr	r3, [pc, #256]	; (8000370 <getKeyInput+0x1d0>)
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	4b41      	ldr	r3, [pc, #260]	; (8000378 <getKeyInput+0x1d8>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	429a      	cmp	r2, r3
 8000276:	d00f      	beq.n	8000298 <getKeyInput+0xf8>
            KeyReg3_2 = KeyReg2_2;
 8000278:	4b3d      	ldr	r3, [pc, #244]	; (8000370 <getKeyInput+0x1d0>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a3e      	ldr	r2, [pc, #248]	; (8000378 <getKeyInput+0x1d8>)
 800027e:	6013      	str	r3, [r2, #0]
            if (KeyReg3_2 == PRESSED_STATE) {
 8000280:	4b3d      	ldr	r3, [pc, #244]	; (8000378 <getKeyInput+0x1d8>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d11b      	bne.n	80002c0 <getKeyInput+0x120>
                TimeOutForKeyPress2 = 500;
 8000288:	4b3c      	ldr	r3, [pc, #240]	; (800037c <getKeyInput+0x1dc>)
 800028a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800028e:	601a      	str	r2, [r3, #0]
                subKeyProcess(2);
 8000290:	2002      	movs	r0, #2
 8000292:	f7ff ff5b 	bl	800014c <subKeyProcess>
 8000296:	e013      	b.n	80002c0 <getKeyInput+0x120>
            }
        } else {
            TimeOutForKeyPress2--;
 8000298:	4b38      	ldr	r3, [pc, #224]	; (800037c <getKeyInput+0x1dc>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	3b01      	subs	r3, #1
 800029e:	4a37      	ldr	r2, [pc, #220]	; (800037c <getKeyInput+0x1dc>)
 80002a0:	6013      	str	r3, [r2, #0]
            if (TimeOutForKeyPress2 == 0) {
 80002a2:	4b36      	ldr	r3, [pc, #216]	; (800037c <getKeyInput+0x1dc>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d10a      	bne.n	80002c0 <getKeyInput+0x120>
                TimeOutForKeyPress2 = 500;
 80002aa:	4b34      	ldr	r3, [pc, #208]	; (800037c <getKeyInput+0x1dc>)
 80002ac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80002b0:	601a      	str	r2, [r3, #0]
                if (KeyReg3_2 == PRESSED_STATE) {
 80002b2:	4b31      	ldr	r3, [pc, #196]	; (8000378 <getKeyInput+0x1d8>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d102      	bne.n	80002c0 <getKeyInput+0x120>
                    subKeyProcess(2);
 80002ba:	2002      	movs	r0, #2
 80002bc:	f7ff ff46 	bl	800014c <subKeyProcess>
            }
        }
    }

    // Xử lý button 3
    KeyReg2_3 = KeyReg1_3;
 80002c0:	4b2f      	ldr	r3, [pc, #188]	; (8000380 <getKeyInput+0x1e0>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a2f      	ldr	r2, [pc, #188]	; (8000384 <getKeyInput+0x1e4>)
 80002c6:	6013      	str	r3, [r2, #0]
    KeyReg1_3 = KeyReg0_3;
 80002c8:	4b2f      	ldr	r3, [pc, #188]	; (8000388 <getKeyInput+0x1e8>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a2c      	ldr	r2, [pc, #176]	; (8000380 <getKeyInput+0x1e0>)
 80002ce:	6013      	str	r3, [r2, #0]
    KeyReg0_3 = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 80002d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002d4:	4822      	ldr	r0, [pc, #136]	; (8000360 <getKeyInput+0x1c0>)
 80002d6:	f001 fa69 	bl	80017ac <HAL_GPIO_ReadPin>
 80002da:	4603      	mov	r3, r0
 80002dc:	461a      	mov	r2, r3
 80002de:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <getKeyInput+0x1e8>)
 80002e0:	601a      	str	r2, [r3, #0]

    if ((KeyReg1_3 == KeyReg0_3) && (KeyReg1_3 == KeyReg2_3)) {
 80002e2:	4b27      	ldr	r3, [pc, #156]	; (8000380 <getKeyInput+0x1e0>)
 80002e4:	681a      	ldr	r2, [r3, #0]
 80002e6:	4b28      	ldr	r3, [pc, #160]	; (8000388 <getKeyInput+0x1e8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d12f      	bne.n	800034e <getKeyInput+0x1ae>
 80002ee:	4b24      	ldr	r3, [pc, #144]	; (8000380 <getKeyInput+0x1e0>)
 80002f0:	681a      	ldr	r2, [r3, #0]
 80002f2:	4b24      	ldr	r3, [pc, #144]	; (8000384 <getKeyInput+0x1e4>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	429a      	cmp	r2, r3
 80002f8:	d129      	bne.n	800034e <getKeyInput+0x1ae>
        if (KeyReg2_3 != KeyReg3_3) {
 80002fa:	4b22      	ldr	r3, [pc, #136]	; (8000384 <getKeyInput+0x1e4>)
 80002fc:	681a      	ldr	r2, [r3, #0]
 80002fe:	4b23      	ldr	r3, [pc, #140]	; (800038c <getKeyInput+0x1ec>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	429a      	cmp	r2, r3
 8000304:	d00f      	beq.n	8000326 <getKeyInput+0x186>
            KeyReg3_3 = KeyReg2_3;
 8000306:	4b1f      	ldr	r3, [pc, #124]	; (8000384 <getKeyInput+0x1e4>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4a20      	ldr	r2, [pc, #128]	; (800038c <getKeyInput+0x1ec>)
 800030c:	6013      	str	r3, [r2, #0]
            if (KeyReg3_3 == PRESSED_STATE) {
 800030e:	4b1f      	ldr	r3, [pc, #124]	; (800038c <getKeyInput+0x1ec>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d11b      	bne.n	800034e <getKeyInput+0x1ae>
                TimeOutForKeyPress3 = 500;
 8000316:	4b1e      	ldr	r3, [pc, #120]	; (8000390 <getKeyInput+0x1f0>)
 8000318:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800031c:	601a      	str	r2, [r3, #0]
                subKeyProcess(3);
 800031e:	2003      	movs	r0, #3
 8000320:	f7ff ff14 	bl	800014c <subKeyProcess>
                    subKeyProcess(3);
                }
            }
        }
    }
}
 8000324:	e013      	b.n	800034e <getKeyInput+0x1ae>
            TimeOutForKeyPress3--;
 8000326:	4b1a      	ldr	r3, [pc, #104]	; (8000390 <getKeyInput+0x1f0>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	3b01      	subs	r3, #1
 800032c:	4a18      	ldr	r2, [pc, #96]	; (8000390 <getKeyInput+0x1f0>)
 800032e:	6013      	str	r3, [r2, #0]
            if (TimeOutForKeyPress3 == 0) {
 8000330:	4b17      	ldr	r3, [pc, #92]	; (8000390 <getKeyInput+0x1f0>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d10a      	bne.n	800034e <getKeyInput+0x1ae>
                TimeOutForKeyPress3 = 500;
 8000338:	4b15      	ldr	r3, [pc, #84]	; (8000390 <getKeyInput+0x1f0>)
 800033a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800033e:	601a      	str	r2, [r3, #0]
                if (KeyReg3_3 == PRESSED_STATE) {
 8000340:	4b12      	ldr	r3, [pc, #72]	; (800038c <getKeyInput+0x1ec>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d102      	bne.n	800034e <getKeyInput+0x1ae>
                    subKeyProcess(3);
 8000348:	2003      	movs	r0, #3
 800034a:	f7ff feff 	bl	800014c <subKeyProcess>
}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	20000004 	.word	0x20000004
 8000358:	20000008 	.word	0x20000008
 800035c:	20000000 	.word	0x20000000
 8000360:	40011000 	.word	0x40011000
 8000364:	2000000c 	.word	0x2000000c
 8000368:	20000030 	.word	0x20000030
 800036c:	20000014 	.word	0x20000014
 8000370:	20000018 	.word	0x20000018
 8000374:	20000010 	.word	0x20000010
 8000378:	2000001c 	.word	0x2000001c
 800037c:	20000034 	.word	0x20000034
 8000380:	20000024 	.word	0x20000024
 8000384:	20000028 	.word	0x20000028
 8000388:	20000020 	.word	0x20000020
 800038c:	2000002c 	.word	0x2000002c
 8000390:	20000038 	.word	0x20000038

08000394 <fsm_automatic>:
#include "global.h"
int RED_TIME = 5000;
int YELLOW_TIME = 2000;
int GREEN_TIME = 3000;
int status = INIT;
void fsm_automatic(){
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
	switch (status){
 8000398:	4b61      	ldr	r3, [pc, #388]	; (8000520 <fsm_automatic+0x18c>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	3b01      	subs	r3, #1
 800039e:	2b04      	cmp	r3, #4
 80003a0:	f200 80b3 	bhi.w	800050a <fsm_automatic+0x176>
 80003a4:	a201      	add	r2, pc, #4	; (adr r2, 80003ac <fsm_automatic+0x18>)
 80003a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003aa:	bf00      	nop
 80003ac:	080003c1 	.word	0x080003c1
 80003b0:	0800045b 	.word	0x0800045b
 80003b4:	08000487 	.word	0x08000487
 80003b8:	080004b3 	.word	0x080004b3
 80003bc:	080004df 	.word	0x080004df
		case INIT:
			HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	2102      	movs	r1, #2
 80003c4:	4857      	ldr	r0, [pc, #348]	; (8000524 <fsm_automatic+0x190>)
 80003c6:	f001 fa08 	bl	80017da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, SET);
 80003ca:	2201      	movs	r2, #1
 80003cc:	2104      	movs	r1, #4
 80003ce:	4855      	ldr	r0, [pc, #340]	; (8000524 <fsm_automatic+0x190>)
 80003d0:	f001 fa03 	bl	80017da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_YELLOW_GPIO_Port, LED_3_YELLOW_Pin, SET);
 80003d4:	2201      	movs	r2, #1
 80003d6:	2108      	movs	r1, #8
 80003d8:	4852      	ldr	r0, [pc, #328]	; (8000524 <fsm_automatic+0x190>)
 80003da:	f001 f9fe 	bl	80017da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_RED_GPIO_Port, LED_4_RED_Pin, SET);
 80003de:	2201      	movs	r2, #1
 80003e0:	2110      	movs	r1, #16
 80003e2:	4850      	ldr	r0, [pc, #320]	; (8000524 <fsm_automatic+0x190>)
 80003e4:	f001 f9f9 	bl	80017da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_5_GREEN_GPIO_Port, LED_5_GREEN_Pin, SET);
 80003e8:	2201      	movs	r2, #1
 80003ea:	2120      	movs	r1, #32
 80003ec:	484d      	ldr	r0, [pc, #308]	; (8000524 <fsm_automatic+0x190>)
 80003ee:	f001 f9f4 	bl	80017da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_YELLOW_GPIO_Port, LED_6_YELLOW_Pin, SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	2140      	movs	r1, #64	; 0x40
 80003f6:	484b      	ldr	r0, [pc, #300]	; (8000524 <fsm_automatic+0x190>)
 80003f8:	f001 f9ef 	bl	80017da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_7_RED_GPIO_Port, LED_7_RED_Pin, SET);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2180      	movs	r1, #128	; 0x80
 8000400:	4848      	ldr	r0, [pc, #288]	; (8000524 <fsm_automatic+0x190>)
 8000402:	f001 f9ea 	bl	80017da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_8_GREEN_GPIO_Port, LED_8_GREEN_Pin, SET);
 8000406:	2201      	movs	r2, #1
 8000408:	f44f 7180 	mov.w	r1, #256	; 0x100
 800040c:	4845      	ldr	r0, [pc, #276]	; (8000524 <fsm_automatic+0x190>)
 800040e:	f001 f9e4 	bl	80017da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_9_YELLOW_GPIO_Port, LED_9_YELLOW_Pin, SET);
 8000412:	2201      	movs	r2, #1
 8000414:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000418:	4842      	ldr	r0, [pc, #264]	; (8000524 <fsm_automatic+0x190>)
 800041a:	f001 f9de 	bl	80017da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_10_RED_GPIO_Port, LED_10_RED_Pin, SET);
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000424:	483f      	ldr	r0, [pc, #252]	; (8000524 <fsm_automatic+0x190>)
 8000426:	f001 f9d8 	bl	80017da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_11_GREEN_GPIO_Port, LED_11_GREEN_Pin, SET);
 800042a:	2201      	movs	r2, #1
 800042c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000430:	483c      	ldr	r0, [pc, #240]	; (8000524 <fsm_automatic+0x190>)
 8000432:	f001 f9d2 	bl	80017da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_12_YELLOW_GPIO_Port, LED_12_YELLOW_Pin, SET);
 8000436:	2201      	movs	r2, #1
 8000438:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800043c:	4839      	ldr	r0, [pc, #228]	; (8000524 <fsm_automatic+0x190>)
 800043e:	f001 f9cc 	bl	80017da <HAL_GPIO_WritePin>
			status =  AUTO_RED_GREEN;
 8000442:	4b37      	ldr	r3, [pc, #220]	; (8000520 <fsm_automatic+0x18c>)
 8000444:	2202      	movs	r2, #2
 8000446:	601a      	str	r2, [r3, #0]
			led7_segment(RED_GREEN);
 8000448:	200b      	movs	r0, #11
 800044a:	f000 fa17 	bl	800087c <led7_segment>
			setTimer1(GREEN_TIME);
 800044e:	4b36      	ldr	r3, [pc, #216]	; (8000528 <fsm_automatic+0x194>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4618      	mov	r0, r3
 8000454:	f000 fc72 	bl	8000d3c <setTimer1>
			break;
 8000458:	e060      	b.n	800051c <fsm_automatic+0x188>
		case AUTO_RED_GREEN:
			traffic_light(RED_GREEN);
 800045a:	200b      	movs	r0, #11
 800045c:	f000 fd72 	bl	8000f44 <traffic_light>
			if (timer1_flag == 1) {
 8000460:	4b32      	ldr	r3, [pc, #200]	; (800052c <fsm_automatic+0x198>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d152      	bne.n	800050e <fsm_automatic+0x17a>
				timer1_flag = 0;
 8000468:	4b30      	ldr	r3, [pc, #192]	; (800052c <fsm_automatic+0x198>)
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
				status = AUTO_RED_YELLOW;
 800046e:	4b2c      	ldr	r3, [pc, #176]	; (8000520 <fsm_automatic+0x18c>)
 8000470:	2203      	movs	r2, #3
 8000472:	601a      	str	r2, [r3, #0]
				led7_segment(RED_YELLOW);
 8000474:	200c      	movs	r0, #12
 8000476:	f000 fa01 	bl	800087c <led7_segment>
				setTimer1(YELLOW_TIME);
 800047a:	4b2d      	ldr	r3, [pc, #180]	; (8000530 <fsm_automatic+0x19c>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4618      	mov	r0, r3
 8000480:	f000 fc5c 	bl	8000d3c <setTimer1>
			}
			break;
 8000484:	e043      	b.n	800050e <fsm_automatic+0x17a>
		case AUTO_RED_YELLOW:
			traffic_light(RED_YELLOW);
 8000486:	200c      	movs	r0, #12
 8000488:	f000 fd5c 	bl	8000f44 <traffic_light>
			if (timer1_flag == 1) {
 800048c:	4b27      	ldr	r3, [pc, #156]	; (800052c <fsm_automatic+0x198>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2b01      	cmp	r3, #1
 8000492:	d13e      	bne.n	8000512 <fsm_automatic+0x17e>
				timer1_flag = 0;
 8000494:	4b25      	ldr	r3, [pc, #148]	; (800052c <fsm_automatic+0x198>)
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
				status = AUTO_GREEN_RED;
 800049a:	4b21      	ldr	r3, [pc, #132]	; (8000520 <fsm_automatic+0x18c>)
 800049c:	2204      	movs	r2, #4
 800049e:	601a      	str	r2, [r3, #0]
				led7_segment(GREEN_RED);
 80004a0:	200d      	movs	r0, #13
 80004a2:	f000 f9eb 	bl	800087c <led7_segment>
				setTimer1(GREEN_TIME);
 80004a6:	4b20      	ldr	r3, [pc, #128]	; (8000528 <fsm_automatic+0x194>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 fc46 	bl	8000d3c <setTimer1>
			}
			break;
 80004b0:	e02f      	b.n	8000512 <fsm_automatic+0x17e>
		case AUTO_GREEN_RED:
			traffic_light(GREEN_RED);
 80004b2:	200d      	movs	r0, #13
 80004b4:	f000 fd46 	bl	8000f44 <traffic_light>
			if (timer1_flag == 1) {
 80004b8:	4b1c      	ldr	r3, [pc, #112]	; (800052c <fsm_automatic+0x198>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d12a      	bne.n	8000516 <fsm_automatic+0x182>
				timer1_flag = 0;
 80004c0:	4b1a      	ldr	r3, [pc, #104]	; (800052c <fsm_automatic+0x198>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
				status = AUTO_YELLOW_RED;
 80004c6:	4b16      	ldr	r3, [pc, #88]	; (8000520 <fsm_automatic+0x18c>)
 80004c8:	2205      	movs	r2, #5
 80004ca:	601a      	str	r2, [r3, #0]
				led7_segment(YELLOW_RED);
 80004cc:	200e      	movs	r0, #14
 80004ce:	f000 f9d5 	bl	800087c <led7_segment>
				setTimer1(YELLOW_TIME);
 80004d2:	4b17      	ldr	r3, [pc, #92]	; (8000530 <fsm_automatic+0x19c>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4618      	mov	r0, r3
 80004d8:	f000 fc30 	bl	8000d3c <setTimer1>
			}
			break;
 80004dc:	e01b      	b.n	8000516 <fsm_automatic+0x182>
		case AUTO_YELLOW_RED:
			traffic_light(YELLOW_RED);
 80004de:	200e      	movs	r0, #14
 80004e0:	f000 fd30 	bl	8000f44 <traffic_light>
			if (timer1_flag == 1) {
 80004e4:	4b11      	ldr	r3, [pc, #68]	; (800052c <fsm_automatic+0x198>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d116      	bne.n	800051a <fsm_automatic+0x186>
				timer1_flag = 0;
 80004ec:	4b0f      	ldr	r3, [pc, #60]	; (800052c <fsm_automatic+0x198>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
				status = AUTO_RED_GREEN;
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <fsm_automatic+0x18c>)
 80004f4:	2202      	movs	r2, #2
 80004f6:	601a      	str	r2, [r3, #0]
				led7_segment(RED_GREEN);
 80004f8:	200b      	movs	r0, #11
 80004fa:	f000 f9bf 	bl	800087c <led7_segment>
				setTimer1(GREEN_TIME);
 80004fe:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <fsm_automatic+0x194>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4618      	mov	r0, r3
 8000504:	f000 fc1a 	bl	8000d3c <setTimer1>
			}
			break;
 8000508:	e007      	b.n	800051a <fsm_automatic+0x186>
		default:
			break;
 800050a:	bf00      	nop
 800050c:	e006      	b.n	800051c <fsm_automatic+0x188>
			break;
 800050e:	bf00      	nop
 8000510:	e004      	b.n	800051c <fsm_automatic+0x188>
			break;
 8000512:	bf00      	nop
 8000514:	e002      	b.n	800051c <fsm_automatic+0x188>
			break;
 8000516:	bf00      	nop
 8000518:	e000      	b.n	800051c <fsm_automatic+0x188>
			break;
 800051a:	bf00      	nop
	}
}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20000048 	.word	0x20000048
 8000524:	40010800 	.word	0x40010800
 8000528:	20000044 	.word	0x20000044
 800052c:	20000098 	.word	0x20000098
 8000530:	20000040 	.word	0x20000040

08000534 <display7SEG>:
extern int RED_TIME;
extern int GREEN_TIME;
extern int YELLOW_TIME;
int led_buffer[4] = {1,2,3,4};

void display7SEG(int num) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
	if (num == 0) {
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d125      	bne.n	800058e <display7SEG+0x5a>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	2110      	movs	r1, #16
 8000546:	48cc      	ldr	r0, [pc, #816]	; (8000878 <display7SEG+0x344>)
 8000548:	f001 f947 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	2120      	movs	r1, #32
 8000550:	48c9      	ldr	r0, [pc, #804]	; (8000878 <display7SEG+0x344>)
 8000552:	f001 f942 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	2140      	movs	r1, #64	; 0x40
 800055a:	48c7      	ldr	r0, [pc, #796]	; (8000878 <display7SEG+0x344>)
 800055c:	f001 f93d 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	2180      	movs	r1, #128	; 0x80
 8000564:	48c4      	ldr	r0, [pc, #784]	; (8000878 <display7SEG+0x344>)
 8000566:	f001 f938 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000570:	48c1      	ldr	r0, [pc, #772]	; (8000878 <display7SEG+0x344>)
 8000572:	f001 f932 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	f44f 7100 	mov.w	r1, #512	; 0x200
 800057c:	48be      	ldr	r0, [pc, #760]	; (8000878 <display7SEG+0x344>)
 800057e:	f001 f92c 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000582:	2201      	movs	r2, #1
 8000584:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000588:	48bb      	ldr	r0, [pc, #748]	; (8000878 <display7SEG+0x344>)
 800058a:	f001 f926 	bl	80017da <HAL_GPIO_WritePin>
	}
	if (num == 1) {
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2b01      	cmp	r3, #1
 8000592:	d125      	bne.n	80005e0 <display7SEG+0xac>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000594:	2201      	movs	r2, #1
 8000596:	2110      	movs	r1, #16
 8000598:	48b7      	ldr	r0, [pc, #732]	; (8000878 <display7SEG+0x344>)
 800059a:	f001 f91e 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	2120      	movs	r1, #32
 80005a2:	48b5      	ldr	r0, [pc, #724]	; (8000878 <display7SEG+0x344>)
 80005a4:	f001 f919 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2140      	movs	r1, #64	; 0x40
 80005ac:	48b2      	ldr	r0, [pc, #712]	; (8000878 <display7SEG+0x344>)
 80005ae:	f001 f914 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 80005b2:	2201      	movs	r2, #1
 80005b4:	2180      	movs	r1, #128	; 0x80
 80005b6:	48b0      	ldr	r0, [pc, #704]	; (8000878 <display7SEG+0x344>)
 80005b8:	f001 f90f 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c2:	48ad      	ldr	r0, [pc, #692]	; (8000878 <display7SEG+0x344>)
 80005c4:	f001 f909 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ce:	48aa      	ldr	r0, [pc, #680]	; (8000878 <display7SEG+0x344>)
 80005d0:	f001 f903 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005da:	48a7      	ldr	r0, [pc, #668]	; (8000878 <display7SEG+0x344>)
 80005dc:	f001 f8fd 	bl	80017da <HAL_GPIO_WritePin>
	}
	if (num == 2) {
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b02      	cmp	r3, #2
 80005e4:	d125      	bne.n	8000632 <display7SEG+0xfe>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2110      	movs	r1, #16
 80005ea:	48a3      	ldr	r0, [pc, #652]	; (8000878 <display7SEG+0x344>)
 80005ec:	f001 f8f5 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2120      	movs	r1, #32
 80005f4:	48a0      	ldr	r0, [pc, #640]	; (8000878 <display7SEG+0x344>)
 80005f6:	f001 f8f0 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	2140      	movs	r1, #64	; 0x40
 80005fe:	489e      	ldr	r0, [pc, #632]	; (8000878 <display7SEG+0x344>)
 8000600:	f001 f8eb 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	2180      	movs	r1, #128	; 0x80
 8000608:	489b      	ldr	r0, [pc, #620]	; (8000878 <display7SEG+0x344>)
 800060a:	f001 f8e6 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000614:	4898      	ldr	r0, [pc, #608]	; (8000878 <display7SEG+0x344>)
 8000616:	f001 f8e0 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000620:	4895      	ldr	r0, [pc, #596]	; (8000878 <display7SEG+0x344>)
 8000622:	f001 f8da 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800062c:	4892      	ldr	r0, [pc, #584]	; (8000878 <display7SEG+0x344>)
 800062e:	f001 f8d4 	bl	80017da <HAL_GPIO_WritePin>
	}
	if (num == 3) {
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b03      	cmp	r3, #3
 8000636:	d125      	bne.n	8000684 <display7SEG+0x150>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2110      	movs	r1, #16
 800063c:	488e      	ldr	r0, [pc, #568]	; (8000878 <display7SEG+0x344>)
 800063e:	f001 f8cc 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2120      	movs	r1, #32
 8000646:	488c      	ldr	r0, [pc, #560]	; (8000878 <display7SEG+0x344>)
 8000648:	f001 f8c7 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2140      	movs	r1, #64	; 0x40
 8000650:	4889      	ldr	r0, [pc, #548]	; (8000878 <display7SEG+0x344>)
 8000652:	f001 f8c2 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	2180      	movs	r1, #128	; 0x80
 800065a:	4887      	ldr	r0, [pc, #540]	; (8000878 <display7SEG+0x344>)
 800065c:	f001 f8bd 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000666:	4884      	ldr	r0, [pc, #528]	; (8000878 <display7SEG+0x344>)
 8000668:	f001 f8b7 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000672:	4881      	ldr	r0, [pc, #516]	; (8000878 <display7SEG+0x344>)
 8000674:	f001 f8b1 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800067e:	487e      	ldr	r0, [pc, #504]	; (8000878 <display7SEG+0x344>)
 8000680:	f001 f8ab 	bl	80017da <HAL_GPIO_WritePin>
	}
	if (num == 4) {
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2b04      	cmp	r3, #4
 8000688:	d125      	bne.n	80006d6 <display7SEG+0x1a2>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 800068a:	2201      	movs	r2, #1
 800068c:	2110      	movs	r1, #16
 800068e:	487a      	ldr	r0, [pc, #488]	; (8000878 <display7SEG+0x344>)
 8000690:	f001 f8a3 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	2120      	movs	r1, #32
 8000698:	4877      	ldr	r0, [pc, #476]	; (8000878 <display7SEG+0x344>)
 800069a:	f001 f89e 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2140      	movs	r1, #64	; 0x40
 80006a2:	4875      	ldr	r0, [pc, #468]	; (8000878 <display7SEG+0x344>)
 80006a4:	f001 f899 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	2180      	movs	r1, #128	; 0x80
 80006ac:	4872      	ldr	r0, [pc, #456]	; (8000878 <display7SEG+0x344>)
 80006ae:	f001 f894 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b8:	486f      	ldr	r0, [pc, #444]	; (8000878 <display7SEG+0x344>)
 80006ba:	f001 f88e 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006c4:	486c      	ldr	r0, [pc, #432]	; (8000878 <display7SEG+0x344>)
 80006c6:	f001 f888 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d0:	4869      	ldr	r0, [pc, #420]	; (8000878 <display7SEG+0x344>)
 80006d2:	f001 f882 	bl	80017da <HAL_GPIO_WritePin>
	}
	if (num == 5) {
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b05      	cmp	r3, #5
 80006da:	d125      	bne.n	8000728 <display7SEG+0x1f4>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	2110      	movs	r1, #16
 80006e0:	4865      	ldr	r0, [pc, #404]	; (8000878 <display7SEG+0x344>)
 80006e2:	f001 f87a 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 80006e6:	2201      	movs	r2, #1
 80006e8:	2120      	movs	r1, #32
 80006ea:	4863      	ldr	r0, [pc, #396]	; (8000878 <display7SEG+0x344>)
 80006ec:	f001 f875 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2140      	movs	r1, #64	; 0x40
 80006f4:	4860      	ldr	r0, [pc, #384]	; (8000878 <display7SEG+0x344>)
 80006f6:	f001 f870 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2180      	movs	r1, #128	; 0x80
 80006fe:	485e      	ldr	r0, [pc, #376]	; (8000878 <display7SEG+0x344>)
 8000700:	f001 f86b 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000704:	2201      	movs	r2, #1
 8000706:	f44f 7180 	mov.w	r1, #256	; 0x100
 800070a:	485b      	ldr	r0, [pc, #364]	; (8000878 <display7SEG+0x344>)
 800070c:	f001 f865 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4858      	ldr	r0, [pc, #352]	; (8000878 <display7SEG+0x344>)
 8000718:	f001 f85f 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000722:	4855      	ldr	r0, [pc, #340]	; (8000878 <display7SEG+0x344>)
 8000724:	f001 f859 	bl	80017da <HAL_GPIO_WritePin>
	}
	if (num == 6) {
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b06      	cmp	r3, #6
 800072c:	d125      	bne.n	800077a <display7SEG+0x246>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	2110      	movs	r1, #16
 8000732:	4851      	ldr	r0, [pc, #324]	; (8000878 <display7SEG+0x344>)
 8000734:	f001 f851 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2120      	movs	r1, #32
 800073c:	484e      	ldr	r0, [pc, #312]	; (8000878 <display7SEG+0x344>)
 800073e:	f001 f84c 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2140      	movs	r1, #64	; 0x40
 8000746:	484c      	ldr	r0, [pc, #304]	; (8000878 <display7SEG+0x344>)
 8000748:	f001 f847 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	2180      	movs	r1, #128	; 0x80
 8000750:	4849      	ldr	r0, [pc, #292]	; (8000878 <display7SEG+0x344>)
 8000752:	f001 f842 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 7180 	mov.w	r1, #256	; 0x100
 800075c:	4846      	ldr	r0, [pc, #280]	; (8000878 <display7SEG+0x344>)
 800075e:	f001 f83c 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000768:	4843      	ldr	r0, [pc, #268]	; (8000878 <display7SEG+0x344>)
 800076a:	f001 f836 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000774:	4840      	ldr	r0, [pc, #256]	; (8000878 <display7SEG+0x344>)
 8000776:	f001 f830 	bl	80017da <HAL_GPIO_WritePin>
	}
	if (num == 7) {
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2b07      	cmp	r3, #7
 800077e:	d125      	bne.n	80007cc <display7SEG+0x298>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	2110      	movs	r1, #16
 8000784:	483c      	ldr	r0, [pc, #240]	; (8000878 <display7SEG+0x344>)
 8000786:	f001 f828 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2120      	movs	r1, #32
 800078e:	483a      	ldr	r0, [pc, #232]	; (8000878 <display7SEG+0x344>)
 8000790:	f001 f823 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	2140      	movs	r1, #64	; 0x40
 8000798:	4837      	ldr	r0, [pc, #220]	; (8000878 <display7SEG+0x344>)
 800079a:	f001 f81e 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 800079e:	2201      	movs	r2, #1
 80007a0:	2180      	movs	r1, #128	; 0x80
 80007a2:	4835      	ldr	r0, [pc, #212]	; (8000878 <display7SEG+0x344>)
 80007a4:	f001 f819 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ae:	4832      	ldr	r0, [pc, #200]	; (8000878 <display7SEG+0x344>)
 80007b0:	f001 f813 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 80007b4:	2201      	movs	r2, #1
 80007b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ba:	482f      	ldr	r0, [pc, #188]	; (8000878 <display7SEG+0x344>)
 80007bc:	f001 f80d 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007c6:	482c      	ldr	r0, [pc, #176]	; (8000878 <display7SEG+0x344>)
 80007c8:	f001 f807 	bl	80017da <HAL_GPIO_WritePin>
	}
	if (num == 8) {
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2b08      	cmp	r3, #8
 80007d0:	d125      	bne.n	800081e <display7SEG+0x2ea>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2110      	movs	r1, #16
 80007d6:	4828      	ldr	r0, [pc, #160]	; (8000878 <display7SEG+0x344>)
 80007d8:	f000 ffff 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	2120      	movs	r1, #32
 80007e0:	4825      	ldr	r0, [pc, #148]	; (8000878 <display7SEG+0x344>)
 80007e2:	f000 fffa 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2140      	movs	r1, #64	; 0x40
 80007ea:	4823      	ldr	r0, [pc, #140]	; (8000878 <display7SEG+0x344>)
 80007ec:	f000 fff5 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2180      	movs	r1, #128	; 0x80
 80007f4:	4820      	ldr	r0, [pc, #128]	; (8000878 <display7SEG+0x344>)
 80007f6:	f000 fff0 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000800:	481d      	ldr	r0, [pc, #116]	; (8000878 <display7SEG+0x344>)
 8000802:	f000 ffea 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 7100 	mov.w	r1, #512	; 0x200
 800080c:	481a      	ldr	r0, [pc, #104]	; (8000878 <display7SEG+0x344>)
 800080e:	f000 ffe4 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000818:	4817      	ldr	r0, [pc, #92]	; (8000878 <display7SEG+0x344>)
 800081a:	f000 ffde 	bl	80017da <HAL_GPIO_WritePin>
	}
	if (num == 9) {
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2b09      	cmp	r3, #9
 8000822:	d125      	bne.n	8000870 <display7SEG+0x33c>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	2110      	movs	r1, #16
 8000828:	4813      	ldr	r0, [pc, #76]	; (8000878 <display7SEG+0x344>)
 800082a:	f000 ffd6 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2120      	movs	r1, #32
 8000832:	4811      	ldr	r0, [pc, #68]	; (8000878 <display7SEG+0x344>)
 8000834:	f000 ffd1 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000838:	2200      	movs	r2, #0
 800083a:	2140      	movs	r1, #64	; 0x40
 800083c:	480e      	ldr	r0, [pc, #56]	; (8000878 <display7SEG+0x344>)
 800083e:	f000 ffcc 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2180      	movs	r1, #128	; 0x80
 8000846:	480c      	ldr	r0, [pc, #48]	; (8000878 <display7SEG+0x344>)
 8000848:	f000 ffc7 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 800084c:	2201      	movs	r2, #1
 800084e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000852:	4809      	ldr	r0, [pc, #36]	; (8000878 <display7SEG+0x344>)
 8000854:	f000 ffc1 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800085e:	4806      	ldr	r0, [pc, #24]	; (8000878 <display7SEG+0x344>)
 8000860:	f000 ffbb 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800086a:	4803      	ldr	r0, [pc, #12]	; (8000878 <display7SEG+0x344>)
 800086c:	f000 ffb5 	bl	80017da <HAL_GPIO_WritePin>
	}
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40010c00 	.word	0x40010c00

0800087c <led7_segment>:

void led7_segment(int status_led) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	int index_led = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3b0b      	subs	r3, #11
 800088c:	2b03      	cmp	r3, #3
 800088e:	d85f      	bhi.n	8000950 <led7_segment+0xd4>
 8000890:	a201      	add	r2, pc, #4	; (adr r2, 8000898 <led7_segment+0x1c>)
 8000892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000896:	bf00      	nop
 8000898:	080008a9 	.word	0x080008a9
 800089c:	080008d3 	.word	0x080008d3
 80008a0:	080008fd 	.word	0x080008fd
 80008a4:	08000927 	.word	0x08000927
    switch (status_led) {
    case RED_GREEN:
        time_lane1 = RED_TIME / 1000;
 80008a8:	4b89      	ldr	r3, [pc, #548]	; (8000ad0 <led7_segment+0x254>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a89      	ldr	r2, [pc, #548]	; (8000ad4 <led7_segment+0x258>)
 80008ae:	fb82 1203 	smull	r1, r2, r2, r3
 80008b2:	1192      	asrs	r2, r2, #6
 80008b4:	17db      	asrs	r3, r3, #31
 80008b6:	1ad3      	subs	r3, r2, r3
 80008b8:	4a87      	ldr	r2, [pc, #540]	; (8000ad8 <led7_segment+0x25c>)
 80008ba:	6013      	str	r3, [r2, #0]
        time_lane2 = GREEN_TIME / 1000;
 80008bc:	4b87      	ldr	r3, [pc, #540]	; (8000adc <led7_segment+0x260>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a84      	ldr	r2, [pc, #528]	; (8000ad4 <led7_segment+0x258>)
 80008c2:	fb82 1203 	smull	r1, r2, r2, r3
 80008c6:	1192      	asrs	r2, r2, #6
 80008c8:	17db      	asrs	r3, r3, #31
 80008ca:	1ad3      	subs	r3, r2, r3
 80008cc:	4a84      	ldr	r2, [pc, #528]	; (8000ae0 <led7_segment+0x264>)
 80008ce:	6013      	str	r3, [r2, #0]
        break;
 80008d0:	e03f      	b.n	8000952 <led7_segment+0xd6>
    case RED_YELLOW:
        time_lane1 = RED_TIME / 1000;
 80008d2:	4b7f      	ldr	r3, [pc, #508]	; (8000ad0 <led7_segment+0x254>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a7f      	ldr	r2, [pc, #508]	; (8000ad4 <led7_segment+0x258>)
 80008d8:	fb82 1203 	smull	r1, r2, r2, r3
 80008dc:	1192      	asrs	r2, r2, #6
 80008de:	17db      	asrs	r3, r3, #31
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	4a7d      	ldr	r2, [pc, #500]	; (8000ad8 <led7_segment+0x25c>)
 80008e4:	6013      	str	r3, [r2, #0]
        time_lane2 = YELLOW_TIME / 1000;
 80008e6:	4b7f      	ldr	r3, [pc, #508]	; (8000ae4 <led7_segment+0x268>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a7a      	ldr	r2, [pc, #488]	; (8000ad4 <led7_segment+0x258>)
 80008ec:	fb82 1203 	smull	r1, r2, r2, r3
 80008f0:	1192      	asrs	r2, r2, #6
 80008f2:	17db      	asrs	r3, r3, #31
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	4a7a      	ldr	r2, [pc, #488]	; (8000ae0 <led7_segment+0x264>)
 80008f8:	6013      	str	r3, [r2, #0]
        break;
 80008fa:	e02a      	b.n	8000952 <led7_segment+0xd6>
    case GREEN_RED:
        time_lane1 = GREEN_TIME / 1000;
 80008fc:	4b77      	ldr	r3, [pc, #476]	; (8000adc <led7_segment+0x260>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a74      	ldr	r2, [pc, #464]	; (8000ad4 <led7_segment+0x258>)
 8000902:	fb82 1203 	smull	r1, r2, r2, r3
 8000906:	1192      	asrs	r2, r2, #6
 8000908:	17db      	asrs	r3, r3, #31
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	4a72      	ldr	r2, [pc, #456]	; (8000ad8 <led7_segment+0x25c>)
 800090e:	6013      	str	r3, [r2, #0]
        time_lane2 = RED_TIME / 1000;
 8000910:	4b6f      	ldr	r3, [pc, #444]	; (8000ad0 <led7_segment+0x254>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a6f      	ldr	r2, [pc, #444]	; (8000ad4 <led7_segment+0x258>)
 8000916:	fb82 1203 	smull	r1, r2, r2, r3
 800091a:	1192      	asrs	r2, r2, #6
 800091c:	17db      	asrs	r3, r3, #31
 800091e:	1ad3      	subs	r3, r2, r3
 8000920:	4a6f      	ldr	r2, [pc, #444]	; (8000ae0 <led7_segment+0x264>)
 8000922:	6013      	str	r3, [r2, #0]
        break;
 8000924:	e015      	b.n	8000952 <led7_segment+0xd6>
    case YELLOW_RED:
        time_lane1 = YELLOW_TIME / 1000;
 8000926:	4b6f      	ldr	r3, [pc, #444]	; (8000ae4 <led7_segment+0x268>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a6a      	ldr	r2, [pc, #424]	; (8000ad4 <led7_segment+0x258>)
 800092c:	fb82 1203 	smull	r1, r2, r2, r3
 8000930:	1192      	asrs	r2, r2, #6
 8000932:	17db      	asrs	r3, r3, #31
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	4a68      	ldr	r2, [pc, #416]	; (8000ad8 <led7_segment+0x25c>)
 8000938:	6013      	str	r3, [r2, #0]
        time_lane2 = RED_TIME / 1000;
 800093a:	4b65      	ldr	r3, [pc, #404]	; (8000ad0 <led7_segment+0x254>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a65      	ldr	r2, [pc, #404]	; (8000ad4 <led7_segment+0x258>)
 8000940:	fb82 1203 	smull	r1, r2, r2, r3
 8000944:	1192      	asrs	r2, r2, #6
 8000946:	17db      	asrs	r3, r3, #31
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	4a65      	ldr	r2, [pc, #404]	; (8000ae0 <led7_segment+0x264>)
 800094c:	6013      	str	r3, [r2, #0]
        break;
 800094e:	e000      	b.n	8000952 <led7_segment+0xd6>
    default:
        break;
 8000950:	bf00      	nop
    }

    led_buffer[0] = time_lane1 / 10;
 8000952:	4b61      	ldr	r3, [pc, #388]	; (8000ad8 <led7_segment+0x25c>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a64      	ldr	r2, [pc, #400]	; (8000ae8 <led7_segment+0x26c>)
 8000958:	fb82 1203 	smull	r1, r2, r2, r3
 800095c:	1092      	asrs	r2, r2, #2
 800095e:	17db      	asrs	r3, r3, #31
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	4a62      	ldr	r2, [pc, #392]	; (8000aec <led7_segment+0x270>)
 8000964:	6013      	str	r3, [r2, #0]
    led_buffer[1] = time_lane1 % 10;
 8000966:	4b5c      	ldr	r3, [pc, #368]	; (8000ad8 <led7_segment+0x25c>)
 8000968:	6819      	ldr	r1, [r3, #0]
 800096a:	4b5f      	ldr	r3, [pc, #380]	; (8000ae8 <led7_segment+0x26c>)
 800096c:	fb83 2301 	smull	r2, r3, r3, r1
 8000970:	109a      	asrs	r2, r3, #2
 8000972:	17cb      	asrs	r3, r1, #31
 8000974:	1ad2      	subs	r2, r2, r3
 8000976:	4613      	mov	r3, r2
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	4413      	add	r3, r2
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	1aca      	subs	r2, r1, r3
 8000980:	4b5a      	ldr	r3, [pc, #360]	; (8000aec <led7_segment+0x270>)
 8000982:	605a      	str	r2, [r3, #4]
    led_buffer[2] = time_lane2 / 10;
 8000984:	4b56      	ldr	r3, [pc, #344]	; (8000ae0 <led7_segment+0x264>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a57      	ldr	r2, [pc, #348]	; (8000ae8 <led7_segment+0x26c>)
 800098a:	fb82 1203 	smull	r1, r2, r2, r3
 800098e:	1092      	asrs	r2, r2, #2
 8000990:	17db      	asrs	r3, r3, #31
 8000992:	1ad3      	subs	r3, r2, r3
 8000994:	4a55      	ldr	r2, [pc, #340]	; (8000aec <led7_segment+0x270>)
 8000996:	6093      	str	r3, [r2, #8]
    led_buffer[3] = time_lane2 % 10;
 8000998:	4b51      	ldr	r3, [pc, #324]	; (8000ae0 <led7_segment+0x264>)
 800099a:	6819      	ldr	r1, [r3, #0]
 800099c:	4b52      	ldr	r3, [pc, #328]	; (8000ae8 <led7_segment+0x26c>)
 800099e:	fb83 2301 	smull	r2, r3, r3, r1
 80009a2:	109a      	asrs	r2, r3, #2
 80009a4:	17cb      	asrs	r3, r1, #31
 80009a6:	1ad2      	subs	r2, r2, r3
 80009a8:	4613      	mov	r3, r2
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	4413      	add	r3, r2
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	1aca      	subs	r2, r1, r3
 80009b2:	4b4e      	ldr	r3, [pc, #312]	; (8000aec <led7_segment+0x270>)
 80009b4:	60da      	str	r2, [r3, #12]

       if (timer3_flag == 1) {
 80009b6:	4b4e      	ldr	r3, [pc, #312]	; (8000af0 <led7_segment+0x274>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	f040 8083 	bne.w	8000ac6 <led7_segment+0x24a>
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	2b03      	cmp	r3, #3
 80009c4:	d872      	bhi.n	8000aac <led7_segment+0x230>
 80009c6:	a201      	add	r2, pc, #4	; (adr r2, 80009cc <led7_segment+0x150>)
 80009c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009cc:	080009dd 	.word	0x080009dd
 80009d0:	08000a11 	.word	0x08000a11
 80009d4:	08000a45 	.word	0x08000a45
 80009d8:	08000a79 	.word	0x08000a79
 		  switch (index_led) {
 		  	case 0:
 		  		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	2101      	movs	r1, #1
 80009e0:	4844      	ldr	r0, [pc, #272]	; (8000af4 <led7_segment+0x278>)
 80009e2:	f000 fefa 	bl	80017da <HAL_GPIO_WritePin>
 		  		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80009e6:	2201      	movs	r2, #1
 80009e8:	2102      	movs	r1, #2
 80009ea:	4842      	ldr	r0, [pc, #264]	; (8000af4 <led7_segment+0x278>)
 80009ec:	f000 fef5 	bl	80017da <HAL_GPIO_WritePin>
 		  		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80009f0:	2201      	movs	r2, #1
 80009f2:	2104      	movs	r1, #4
 80009f4:	483f      	ldr	r0, [pc, #252]	; (8000af4 <led7_segment+0x278>)
 80009f6:	f000 fef0 	bl	80017da <HAL_GPIO_WritePin>
 		  		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80009fa:	2201      	movs	r2, #1
 80009fc:	2108      	movs	r1, #8
 80009fe:	483d      	ldr	r0, [pc, #244]	; (8000af4 <led7_segment+0x278>)
 8000a00:	f000 feeb 	bl	80017da <HAL_GPIO_WritePin>
 		  		display7SEG(led_buffer[0]);
 8000a04:	4b39      	ldr	r3, [pc, #228]	; (8000aec <led7_segment+0x270>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fd93 	bl	8000534 <display7SEG>
 		  		break;
 8000a0e:	e04e      	b.n	8000aae <led7_segment+0x232>
 		  	case 1:
 		  		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000a10:	2201      	movs	r2, #1
 8000a12:	2101      	movs	r1, #1
 8000a14:	4837      	ldr	r0, [pc, #220]	; (8000af4 <led7_segment+0x278>)
 8000a16:	f000 fee0 	bl	80017da <HAL_GPIO_WritePin>
 		  		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2102      	movs	r1, #2
 8000a1e:	4835      	ldr	r0, [pc, #212]	; (8000af4 <led7_segment+0x278>)
 8000a20:	f000 fedb 	bl	80017da <HAL_GPIO_WritePin>
 		  		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2104      	movs	r1, #4
 8000a28:	4832      	ldr	r0, [pc, #200]	; (8000af4 <led7_segment+0x278>)
 8000a2a:	f000 fed6 	bl	80017da <HAL_GPIO_WritePin>
 		  		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2108      	movs	r1, #8
 8000a32:	4830      	ldr	r0, [pc, #192]	; (8000af4 <led7_segment+0x278>)
 8000a34:	f000 fed1 	bl	80017da <HAL_GPIO_WritePin>
 		  		display7SEG(led_buffer[1]);
 8000a38:	4b2c      	ldr	r3, [pc, #176]	; (8000aec <led7_segment+0x270>)
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fd79 	bl	8000534 <display7SEG>
 		  		break;
 8000a42:	e034      	b.n	8000aae <led7_segment+0x232>
 		  	case 2:
 		  		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	2101      	movs	r1, #1
 8000a48:	482a      	ldr	r0, [pc, #168]	; (8000af4 <led7_segment+0x278>)
 8000a4a:	f000 fec6 	bl	80017da <HAL_GPIO_WritePin>
 		  		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	2102      	movs	r1, #2
 8000a52:	4828      	ldr	r0, [pc, #160]	; (8000af4 <led7_segment+0x278>)
 8000a54:	f000 fec1 	bl	80017da <HAL_GPIO_WritePin>
 		  		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2104      	movs	r1, #4
 8000a5c:	4825      	ldr	r0, [pc, #148]	; (8000af4 <led7_segment+0x278>)
 8000a5e:	f000 febc 	bl	80017da <HAL_GPIO_WritePin>
 		  		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000a62:	2201      	movs	r2, #1
 8000a64:	2108      	movs	r1, #8
 8000a66:	4823      	ldr	r0, [pc, #140]	; (8000af4 <led7_segment+0x278>)
 8000a68:	f000 feb7 	bl	80017da <HAL_GPIO_WritePin>
 		  		display7SEG(led_buffer[2]);
 8000a6c:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <led7_segment+0x270>)
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fd5f 	bl	8000534 <display7SEG>
 		  		break;
 8000a76:	e01a      	b.n	8000aae <led7_segment+0x232>
 		  	case 3:
 		  		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	481d      	ldr	r0, [pc, #116]	; (8000af4 <led7_segment+0x278>)
 8000a7e:	f000 feac 	bl	80017da <HAL_GPIO_WritePin>
 		  		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000a82:	2201      	movs	r2, #1
 8000a84:	2102      	movs	r1, #2
 8000a86:	481b      	ldr	r0, [pc, #108]	; (8000af4 <led7_segment+0x278>)
 8000a88:	f000 fea7 	bl	80017da <HAL_GPIO_WritePin>
 		  		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2104      	movs	r1, #4
 8000a90:	4818      	ldr	r0, [pc, #96]	; (8000af4 <led7_segment+0x278>)
 8000a92:	f000 fea2 	bl	80017da <HAL_GPIO_WritePin>
 		  		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2108      	movs	r1, #8
 8000a9a:	4816      	ldr	r0, [pc, #88]	; (8000af4 <led7_segment+0x278>)
 8000a9c:	f000 fe9d 	bl	80017da <HAL_GPIO_WritePin>
 		  		display7SEG(led_buffer[3]);
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <led7_segment+0x270>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fd45 	bl	8000534 <display7SEG>
 		  		break;
 8000aaa:	e000      	b.n	8000aae <led7_segment+0x232>
 		  	default:
 		  		break;
 8000aac:	bf00      	nop
 		  	}
 		  index_led++;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 		  if (index_led > 3) {
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	2b03      	cmp	r3, #3
 8000ab8:	dd01      	ble.n	8000abe <led7_segment+0x242>
 			  index_led = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 		  }
 		  setTimer3(1000);
 8000abe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ac2:	f000 f955 	bl	8000d70 <setTimer3>
       }
   }
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	2000003c 	.word	0x2000003c
 8000ad4:	10624dd3 	.word	0x10624dd3
 8000ad8:	200000ac 	.word	0x200000ac
 8000adc:	20000044 	.word	0x20000044
 8000ae0:	200000b0 	.word	0x200000b0
 8000ae4:	20000040 	.word	0x20000040
 8000ae8:	66666667 	.word	0x66666667
 8000aec:	2000004c 	.word	0x2000004c
 8000af0:	200000a8 	.word	0x200000a8
 8000af4:	40010c00 	.word	0x40010c00

08000af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000afc:	f000 fb6c 	bl	80011d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b00:	f000 f810 	bl	8000b24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b04:	f000 f896 	bl	8000c34 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b08:	f000 f848 	bl	8000b9c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <main+0x28>)
 8000b0e:	f001 faa9 	bl	8002064 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(100);
 8000b12:	2064      	movs	r0, #100	; 0x64
 8000b14:	f000 f912 	bl	8000d3c <setTimer1>
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_automatic();
 8000b18:	f7ff fc3c 	bl	8000394 <fsm_automatic>
 8000b1c:	e7fc      	b.n	8000b18 <main+0x20>
 8000b1e:	bf00      	nop
 8000b20:	200000b4 	.word	0x200000b4

08000b24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b090      	sub	sp, #64	; 0x40
 8000b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2a:	f107 0318 	add.w	r3, r7, #24
 8000b2e:	2228      	movs	r2, #40	; 0x28
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f001 fe46 	bl	80027c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
 8000b44:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b46:	2302      	movs	r3, #2
 8000b48:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b4e:	2310      	movs	r3, #16
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b56:	f107 0318 	add.w	r3, r7, #24
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 fe56 	bl	800180c <HAL_RCC_OscConfig>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b66:	f000 f8e3 	bl	8000d30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b6a:	230f      	movs	r3, #15
 8000b6c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f001 f8c2 	bl	8001d0c <HAL_RCC_ClockConfig>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b8e:	f000 f8cf 	bl	8000d30 <Error_Handler>
  }
}
 8000b92:	bf00      	nop
 8000b94:	3740      	adds	r7, #64	; 0x40
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba2:	f107 0308 	add.w	r3, r7, #8
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bb8:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bc2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000bc6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc8:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000bce:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bd0:	2209      	movs	r2, #9
 8000bd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd4:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000be0:	4813      	ldr	r0, [pc, #76]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000be2:	f001 f9ef 	bl	8001fc4 <HAL_TIM_Base_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bec:	f000 f8a0 	bl	8000d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bf6:	f107 0308 	add.w	r3, r7, #8
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480c      	ldr	r0, [pc, #48]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bfe:	f001 fb6d 	bl	80022dc <HAL_TIM_ConfigClockSource>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c08:	f000 f892 	bl	8000d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c14:	463b      	mov	r3, r7
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000c1a:	f001 fd45 	bl	80026a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c24:	f000 f884 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c28:	bf00      	nop
 8000c2a:	3718      	adds	r7, #24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200000b4 	.word	0x200000b4

08000c34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b088      	sub	sp, #32
 8000c38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3a:	f107 0310 	add.w	r3, r7, #16
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c48:	4b2f      	ldr	r3, [pc, #188]	; (8000d08 <MX_GPIO_Init+0xd4>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	4a2e      	ldr	r2, [pc, #184]	; (8000d08 <MX_GPIO_Init+0xd4>)
 8000c4e:	f043 0310 	orr.w	r3, r3, #16
 8000c52:	6193      	str	r3, [r2, #24]
 8000c54:	4b2c      	ldr	r3, [pc, #176]	; (8000d08 <MX_GPIO_Init+0xd4>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	f003 0310 	and.w	r3, r3, #16
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c60:	4b29      	ldr	r3, [pc, #164]	; (8000d08 <MX_GPIO_Init+0xd4>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	4a28      	ldr	r2, [pc, #160]	; (8000d08 <MX_GPIO_Init+0xd4>)
 8000c66:	f043 0304 	orr.w	r3, r3, #4
 8000c6a:	6193      	str	r3, [r2, #24]
 8000c6c:	4b26      	ldr	r3, [pc, #152]	; (8000d08 <MX_GPIO_Init+0xd4>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f003 0304 	and.w	r3, r3, #4
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c78:	4b23      	ldr	r3, [pc, #140]	; (8000d08 <MX_GPIO_Init+0xd4>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	4a22      	ldr	r2, [pc, #136]	; (8000d08 <MX_GPIO_Init+0xd4>)
 8000c7e:	f043 0308 	orr.w	r3, r3, #8
 8000c82:	6193      	str	r3, [r2, #24]
 8000c84:	4b20      	ldr	r3, [pc, #128]	; (8000d08 <MX_GPIO_Init+0xd4>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	f003 0308 	and.w	r3, r3, #8
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_RED_Pin|LED_2_GREEN_Pin|LED_3_YELLOW_Pin|LED_4_RED_Pin
 8000c90:	2200      	movs	r2, #0
 8000c92:	f641 71fe 	movw	r1, #8190	; 0x1ffe
 8000c96:	481d      	ldr	r0, [pc, #116]	; (8000d0c <MX_GPIO_Init+0xd8>)
 8000c98:	f000 fd9f 	bl	80017da <HAL_GPIO_WritePin>
                          |LED_5_GREEN_Pin|LED_6_YELLOW_Pin|LED_7_RED_Pin|LED_8_GREEN_Pin
                          |LED_9_YELLOW_Pin|LED_10_RED_Pin|LED_11_GREEN_Pin|LED_12_YELLOW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|EN2_Pin|SEG6_Pin
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000ca2:	481b      	ldr	r0, [pc, #108]	; (8000d10 <MX_GPIO_Init+0xdc>)
 8000ca4:	f000 fd99 	bl	80017da <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|EN3_Pin|SEG0_Pin|SEG1_Pin
                          |SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8000ca8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000cac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb6:	f107 0310 	add.w	r3, r7, #16
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4815      	ldr	r0, [pc, #84]	; (8000d14 <MX_GPIO_Init+0xe0>)
 8000cbe:	f000 fbfb 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_RED_Pin LED_2_GREEN_Pin LED_3_YELLOW_Pin LED_4_RED_Pin
                           LED_5_GREEN_Pin LED_6_YELLOW_Pin LED_7_RED_Pin LED_8_GREEN_Pin
                           LED_9_YELLOW_Pin LED_10_RED_Pin LED_11_GREEN_Pin LED_12_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_1_RED_Pin|LED_2_GREEN_Pin|LED_3_YELLOW_Pin|LED_4_RED_Pin
 8000cc2:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 8000cc6:	613b      	str	r3, [r7, #16]
                          |LED_5_GREEN_Pin|LED_6_YELLOW_Pin|LED_7_RED_Pin|LED_8_GREEN_Pin
                          |LED_9_YELLOW_Pin|LED_10_RED_Pin|LED_11_GREEN_Pin|LED_12_YELLOW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd4:	f107 0310 	add.w	r3, r7, #16
 8000cd8:	4619      	mov	r1, r3
 8000cda:	480c      	ldr	r0, [pc, #48]	; (8000d0c <MX_GPIO_Init+0xd8>)
 8000cdc:	f000 fbec 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin SEG6_Pin
                           PB11 EN3_Pin SEG0_Pin SEG1_Pin
                           SEG2_Pin SEG3_Pin SEG4_Pin SEG5_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|SEG6_Pin
 8000ce0:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000ce4:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|EN3_Pin|SEG0_Pin|SEG1_Pin
                          |SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf2:	f107 0310 	add.w	r3, r7, #16
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4805      	ldr	r0, [pc, #20]	; (8000d10 <MX_GPIO_Init+0xdc>)
 8000cfa:	f000 fbdd 	bl	80014b8 <HAL_GPIO_Init>

}
 8000cfe:	bf00      	nop
 8000d00:	3720      	adds	r7, #32
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40010800 	.word	0x40010800
 8000d10:	40010c00 	.word	0x40010c00
 8000d14:	40011000 	.word	0x40011000

08000d18 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	timerRun();
 8000d20:	f000 f840 	bl	8000da4 <timerRun>
	getKeyInput();
 8000d24:	f7ff fa3c 	bl	80001a0 <getKeyInput>
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i
}
 8000d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <Error_Handler+0x8>
	...

08000d3c <setTimer1>:

int timer3_counter = 0;
int timer3_flag = 0;

int TIMER_CYCLE = 10;
void setTimer1(int duration) {
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <setTimer1+0x28>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d4e:	4a06      	ldr	r2, [pc, #24]	; (8000d68 <setTimer1+0x2c>)
 8000d50:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <setTimer1+0x30>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	2000005c 	.word	0x2000005c
 8000d68:	20000094 	.word	0x20000094
 8000d6c:	20000098 	.word	0x20000098

08000d70 <setTimer3>:
void setTimer2(int duration) {
	timer2_counter = duration / TIMER_CYCLE;
	timer2_flag = 0;
}

void setTimer3(int duration) {
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 8000d78:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <setTimer3+0x28>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d82:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <setTimer3+0x2c>)
 8000d84:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <setTimer3+0x30>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	2000005c 	.word	0x2000005c
 8000d9c:	200000a4 	.word	0x200000a4
 8000da0:	200000a8 	.word	0x200000a8

08000da4 <timerRun>:

void timerRun() {
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8000da8:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <timerRun+0x6c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	dd0b      	ble.n	8000dc8 <timerRun+0x24>
		timer1_counter--;
 8000db0:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <timerRun+0x6c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	3b01      	subs	r3, #1
 8000db6:	4a16      	ldr	r2, [pc, #88]	; (8000e10 <timerRun+0x6c>)
 8000db8:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <timerRun+0x6c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	dc02      	bgt.n	8000dc8 <timerRun+0x24>
			timer1_flag = 1;
 8000dc2:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <timerRun+0x70>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	601a      	str	r2, [r3, #0]
		}
	}

	if (timer2_counter > 0) {
 8000dc8:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <timerRun+0x74>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	dd0b      	ble.n	8000de8 <timerRun+0x44>
		timer2_counter--;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <timerRun+0x74>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	4a10      	ldr	r2, [pc, #64]	; (8000e18 <timerRun+0x74>)
 8000dd8:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 8000dda:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <timerRun+0x74>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	dc02      	bgt.n	8000de8 <timerRun+0x44>
			timer2_flag = 1;
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <timerRun+0x78>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	601a      	str	r2, [r3, #0]
		}
	}

	if (timer3_counter > 0) {
 8000de8:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <timerRun+0x7c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	dd0b      	ble.n	8000e08 <timerRun+0x64>
		timer3_counter--;
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <timerRun+0x7c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	3b01      	subs	r3, #1
 8000df6:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <timerRun+0x7c>)
 8000df8:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) {
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <timerRun+0x7c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	dc02      	bgt.n	8000e08 <timerRun+0x64>
			timer3_flag = 1;
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <timerRun+0x80>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	20000094 	.word	0x20000094
 8000e14:	20000098 	.word	0x20000098
 8000e18:	2000009c 	.word	0x2000009c
 8000e1c:	200000a0 	.word	0x200000a0
 8000e20:	200000a4 	.word	0x200000a4
 8000e24:	200000a8 	.word	0x200000a8

08000e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <HAL_MspInit+0x5c>)
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <HAL_MspInit+0x5c>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6193      	str	r3, [r2, #24]
 8000e3a:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_MspInit+0x5c>)
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e46:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <HAL_MspInit+0x5c>)
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	4a0e      	ldr	r2, [pc, #56]	; (8000e84 <HAL_MspInit+0x5c>)
 8000e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e50:	61d3      	str	r3, [r2, #28]
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <HAL_MspInit+0x5c>)
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <HAL_MspInit+0x60>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <HAL_MspInit+0x60>)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	3714      	adds	r7, #20
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40010000 	.word	0x40010000

08000e8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e9c:	d113      	bne.n	8000ec6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <HAL_TIM_Base_MspInit+0x44>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	4a0b      	ldr	r2, [pc, #44]	; (8000ed0 <HAL_TIM_Base_MspInit+0x44>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	61d3      	str	r3, [r2, #28]
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <HAL_TIM_Base_MspInit+0x44>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2100      	movs	r1, #0
 8000eba:	201c      	movs	r0, #28
 8000ebc:	f000 fac5 	bl	800144a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ec0:	201c      	movs	r0, #28
 8000ec2:	f000 fade 	bl	8001482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <NMI_Handler+0x4>

08000eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <HardFault_Handler+0x4>

08000ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <MemManage_Handler+0x4>

08000ee6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <BusFault_Handler+0x4>

08000eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <UsageFault_Handler+0x4>

08000ef2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr

08000efe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr

08000f0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr

08000f16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f1a:	f000 f9a3 	bl	8001264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f28:	4802      	ldr	r0, [pc, #8]	; (8000f34 <TIM2_IRQHandler+0x10>)
 8000f2a:	f001 f8e7 	bl	80020fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200000b4 	.word	0x200000b4

08000f38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr

08000f44 <traffic_light>:
 *      Author: TIEN DUY
 */

#include "traffic_light.h"

void traffic_light(int status_light) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b0b      	subs	r3, #11
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	f200 8113 	bhi.w	800117c <traffic_light+0x238>
 8000f56:	a201      	add	r2, pc, #4	; (adr r2, 8000f5c <traffic_light+0x18>)
 8000f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f5c:	08000f6d 	.word	0x08000f6d
 8000f60:	08000ff1 	.word	0x08000ff1
 8000f64:	08001075 	.word	0x08001075
 8000f68:	080010f9 	.word	0x080010f9
	switch (status_light) {
	case RED_GREEN:
		HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2102      	movs	r1, #2
 8000f70:	4885      	ldr	r0, [pc, #532]	; (8001188 <traffic_light+0x244>)
 8000f72:	f000 fc32 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2104      	movs	r1, #4
 8000f7a:	4883      	ldr	r0, [pc, #524]	; (8001188 <traffic_light+0x244>)
 8000f7c:	f000 fc2d 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_YELLOW_GPIO_Port, LED_3_YELLOW_Pin, SET);
 8000f80:	2201      	movs	r2, #1
 8000f82:	2108      	movs	r1, #8
 8000f84:	4880      	ldr	r0, [pc, #512]	; (8001188 <traffic_light+0x244>)
 8000f86:	f000 fc28 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_4_RED_GPIO_Port, LED_4_RED_Pin, SET);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2110      	movs	r1, #16
 8000f8e:	487e      	ldr	r0, [pc, #504]	; (8001188 <traffic_light+0x244>)
 8000f90:	f000 fc23 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_5_GREEN_GPIO_Port, LED_5_GREEN_Pin, SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	2120      	movs	r1, #32
 8000f98:	487b      	ldr	r0, [pc, #492]	; (8001188 <traffic_light+0x244>)
 8000f9a:	f000 fc1e 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_6_YELLOW_GPIO_Port, LED_6_YELLOW_Pin, SET);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	2140      	movs	r1, #64	; 0x40
 8000fa2:	4879      	ldr	r0, [pc, #484]	; (8001188 <traffic_light+0x244>)
 8000fa4:	f000 fc19 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_7_RED_GPIO_Port, LED_7_RED_Pin, RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2180      	movs	r1, #128	; 0x80
 8000fac:	4876      	ldr	r0, [pc, #472]	; (8001188 <traffic_light+0x244>)
 8000fae:	f000 fc14 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_8_GREEN_GPIO_Port, LED_8_GREEN_Pin, RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb8:	4873      	ldr	r0, [pc, #460]	; (8001188 <traffic_light+0x244>)
 8000fba:	f000 fc0e 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_9_YELLOW_GPIO_Port, LED_9_YELLOW_Pin, SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc4:	4870      	ldr	r0, [pc, #448]	; (8001188 <traffic_light+0x244>)
 8000fc6:	f000 fc08 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_10_RED_GPIO_Port, LED_10_RED_Pin, SET);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fd0:	486d      	ldr	r0, [pc, #436]	; (8001188 <traffic_light+0x244>)
 8000fd2:	f000 fc02 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_11_GREEN_GPIO_Port, LED_11_GREEN_Pin, SET);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fdc:	486a      	ldr	r0, [pc, #424]	; (8001188 <traffic_light+0x244>)
 8000fde:	f000 fbfc 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_12_YELLOW_GPIO_Port, LED_12_YELLOW_Pin, SET);
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fe8:	4867      	ldr	r0, [pc, #412]	; (8001188 <traffic_light+0x244>)
 8000fea:	f000 fbf6 	bl	80017da <HAL_GPIO_WritePin>
		break;
 8000fee:	e0c6      	b.n	800117e <traffic_light+0x23a>
	case RED_YELLOW:
		HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2102      	movs	r1, #2
 8000ff4:	4864      	ldr	r0, [pc, #400]	; (8001188 <traffic_light+0x244>)
 8000ff6:	f000 fbf0 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, SET);
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	2104      	movs	r1, #4
 8000ffe:	4862      	ldr	r0, [pc, #392]	; (8001188 <traffic_light+0x244>)
 8001000:	f000 fbeb 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_YELLOW_GPIO_Port, LED_3_YELLOW_Pin, RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	2108      	movs	r1, #8
 8001008:	485f      	ldr	r0, [pc, #380]	; (8001188 <traffic_light+0x244>)
 800100a:	f000 fbe6 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_4_RED_GPIO_Port, LED_4_RED_Pin, SET);
 800100e:	2201      	movs	r2, #1
 8001010:	2110      	movs	r1, #16
 8001012:	485d      	ldr	r0, [pc, #372]	; (8001188 <traffic_light+0x244>)
 8001014:	f000 fbe1 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_5_GREEN_GPIO_Port, LED_5_GREEN_Pin, SET);
 8001018:	2201      	movs	r2, #1
 800101a:	2120      	movs	r1, #32
 800101c:	485a      	ldr	r0, [pc, #360]	; (8001188 <traffic_light+0x244>)
 800101e:	f000 fbdc 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_6_YELLOW_GPIO_Port, LED_6_YELLOW_Pin, SET);
 8001022:	2201      	movs	r2, #1
 8001024:	2140      	movs	r1, #64	; 0x40
 8001026:	4858      	ldr	r0, [pc, #352]	; (8001188 <traffic_light+0x244>)
 8001028:	f000 fbd7 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_7_RED_GPIO_Port, LED_7_RED_Pin, RESET);
 800102c:	2200      	movs	r2, #0
 800102e:	2180      	movs	r1, #128	; 0x80
 8001030:	4855      	ldr	r0, [pc, #340]	; (8001188 <traffic_light+0x244>)
 8001032:	f000 fbd2 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_8_GREEN_GPIO_Port, LED_8_GREEN_Pin, SET);
 8001036:	2201      	movs	r2, #1
 8001038:	f44f 7180 	mov.w	r1, #256	; 0x100
 800103c:	4852      	ldr	r0, [pc, #328]	; (8001188 <traffic_light+0x244>)
 800103e:	f000 fbcc 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_9_YELLOW_GPIO_Port, LED_9_YELLOW_Pin, RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001048:	484f      	ldr	r0, [pc, #316]	; (8001188 <traffic_light+0x244>)
 800104a:	f000 fbc6 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_10_RED_GPIO_Port, LED_10_RED_Pin, SET);
 800104e:	2201      	movs	r2, #1
 8001050:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001054:	484c      	ldr	r0, [pc, #304]	; (8001188 <traffic_light+0x244>)
 8001056:	f000 fbc0 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_11_GREEN_GPIO_Port, LED_11_GREEN_Pin, SET);
 800105a:	2201      	movs	r2, #1
 800105c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001060:	4849      	ldr	r0, [pc, #292]	; (8001188 <traffic_light+0x244>)
 8001062:	f000 fbba 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_12_YELLOW_GPIO_Port, LED_12_YELLOW_Pin, SET);
 8001066:	2201      	movs	r2, #1
 8001068:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800106c:	4846      	ldr	r0, [pc, #280]	; (8001188 <traffic_light+0x244>)
 800106e:	f000 fbb4 	bl	80017da <HAL_GPIO_WritePin>
		break;
 8001072:	e084      	b.n	800117e <traffic_light+0x23a>
	case GREEN_RED:
		HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, SET);
 8001074:	2201      	movs	r2, #1
 8001076:	2102      	movs	r1, #2
 8001078:	4843      	ldr	r0, [pc, #268]	; (8001188 <traffic_light+0x244>)
 800107a:	f000 fbae 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, SET);
 800107e:	2201      	movs	r2, #1
 8001080:	2104      	movs	r1, #4
 8001082:	4841      	ldr	r0, [pc, #260]	; (8001188 <traffic_light+0x244>)
 8001084:	f000 fba9 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_YELLOW_GPIO_Port, LED_3_YELLOW_Pin, SET);
 8001088:	2201      	movs	r2, #1
 800108a:	2108      	movs	r1, #8
 800108c:	483e      	ldr	r0, [pc, #248]	; (8001188 <traffic_light+0x244>)
 800108e:	f000 fba4 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_4_RED_GPIO_Port, LED_4_RED_Pin, RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	2110      	movs	r1, #16
 8001096:	483c      	ldr	r0, [pc, #240]	; (8001188 <traffic_light+0x244>)
 8001098:	f000 fb9f 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_5_GREEN_GPIO_Port, LED_5_GREEN_Pin, RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	2120      	movs	r1, #32
 80010a0:	4839      	ldr	r0, [pc, #228]	; (8001188 <traffic_light+0x244>)
 80010a2:	f000 fb9a 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_6_YELLOW_GPIO_Port, LED_6_YELLOW_Pin, SET);
 80010a6:	2201      	movs	r2, #1
 80010a8:	2140      	movs	r1, #64	; 0x40
 80010aa:	4837      	ldr	r0, [pc, #220]	; (8001188 <traffic_light+0x244>)
 80010ac:	f000 fb95 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_7_RED_GPIO_Port, LED_7_RED_Pin, SET);
 80010b0:	2201      	movs	r2, #1
 80010b2:	2180      	movs	r1, #128	; 0x80
 80010b4:	4834      	ldr	r0, [pc, #208]	; (8001188 <traffic_light+0x244>)
 80010b6:	f000 fb90 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_8_GREEN_GPIO_Port, LED_8_GREEN_Pin, SET);
 80010ba:	2201      	movs	r2, #1
 80010bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c0:	4831      	ldr	r0, [pc, #196]	; (8001188 <traffic_light+0x244>)
 80010c2:	f000 fb8a 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_9_YELLOW_GPIO_Port, LED_9_YELLOW_Pin, SET);
 80010c6:	2201      	movs	r2, #1
 80010c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010cc:	482e      	ldr	r0, [pc, #184]	; (8001188 <traffic_light+0x244>)
 80010ce:	f000 fb84 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_10_RED_GPIO_Port, LED_10_RED_Pin, RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d8:	482b      	ldr	r0, [pc, #172]	; (8001188 <traffic_light+0x244>)
 80010da:	f000 fb7e 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_11_GREEN_GPIO_Port, LED_11_GREEN_Pin, RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010e4:	4828      	ldr	r0, [pc, #160]	; (8001188 <traffic_light+0x244>)
 80010e6:	f000 fb78 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_12_YELLOW_GPIO_Port, LED_12_YELLOW_Pin, SET);
 80010ea:	2201      	movs	r2, #1
 80010ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010f0:	4825      	ldr	r0, [pc, #148]	; (8001188 <traffic_light+0x244>)
 80010f2:	f000 fb72 	bl	80017da <HAL_GPIO_WritePin>
		break;
 80010f6:	e042      	b.n	800117e <traffic_light+0x23a>
	case YELLOW_RED:
		HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, SET);
 80010f8:	2201      	movs	r2, #1
 80010fa:	2102      	movs	r1, #2
 80010fc:	4822      	ldr	r0, [pc, #136]	; (8001188 <traffic_light+0x244>)
 80010fe:	f000 fb6c 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, SET);
 8001102:	2201      	movs	r2, #1
 8001104:	2104      	movs	r1, #4
 8001106:	4820      	ldr	r0, [pc, #128]	; (8001188 <traffic_light+0x244>)
 8001108:	f000 fb67 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_YELLOW_GPIO_Port, LED_3_YELLOW_Pin, SET);
 800110c:	2201      	movs	r2, #1
 800110e:	2108      	movs	r1, #8
 8001110:	481d      	ldr	r0, [pc, #116]	; (8001188 <traffic_light+0x244>)
 8001112:	f000 fb62 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_4_RED_GPIO_Port, LED_4_RED_Pin, RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	2110      	movs	r1, #16
 800111a:	481b      	ldr	r0, [pc, #108]	; (8001188 <traffic_light+0x244>)
 800111c:	f000 fb5d 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_5_GREEN_GPIO_Port, LED_5_GREEN_Pin, SET);
 8001120:	2201      	movs	r2, #1
 8001122:	2120      	movs	r1, #32
 8001124:	4818      	ldr	r0, [pc, #96]	; (8001188 <traffic_light+0x244>)
 8001126:	f000 fb58 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_6_YELLOW_GPIO_Port, LED_6_YELLOW_Pin, RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	2140      	movs	r1, #64	; 0x40
 800112e:	4816      	ldr	r0, [pc, #88]	; (8001188 <traffic_light+0x244>)
 8001130:	f000 fb53 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_7_RED_GPIO_Port, LED_7_RED_Pin, SET);
 8001134:	2201      	movs	r2, #1
 8001136:	2180      	movs	r1, #128	; 0x80
 8001138:	4813      	ldr	r0, [pc, #76]	; (8001188 <traffic_light+0x244>)
 800113a:	f000 fb4e 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_8_GREEN_GPIO_Port, LED_8_GREEN_Pin, SET);
 800113e:	2201      	movs	r2, #1
 8001140:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001144:	4810      	ldr	r0, [pc, #64]	; (8001188 <traffic_light+0x244>)
 8001146:	f000 fb48 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_9_YELLOW_GPIO_Port, LED_9_YELLOW_Pin, SET);
 800114a:	2201      	movs	r2, #1
 800114c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001150:	480d      	ldr	r0, [pc, #52]	; (8001188 <traffic_light+0x244>)
 8001152:	f000 fb42 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_10_RED_GPIO_Port, LED_10_RED_Pin, RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800115c:	480a      	ldr	r0, [pc, #40]	; (8001188 <traffic_light+0x244>)
 800115e:	f000 fb3c 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_11_GREEN_GPIO_Port, LED_11_GREEN_Pin, SET);
 8001162:	2201      	movs	r2, #1
 8001164:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001168:	4807      	ldr	r0, [pc, #28]	; (8001188 <traffic_light+0x244>)
 800116a:	f000 fb36 	bl	80017da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_12_YELLOW_GPIO_Port, LED_12_YELLOW_Pin, RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001174:	4804      	ldr	r0, [pc, #16]	; (8001188 <traffic_light+0x244>)
 8001176:	f000 fb30 	bl	80017da <HAL_GPIO_WritePin>
		break;
 800117a:	e000      	b.n	800117e <traffic_light+0x23a>
	default:
		break;
 800117c:	bf00      	nop
	}
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40010800 	.word	0x40010800

0800118c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800118c:	f7ff fed4 	bl	8000f38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001190:	480b      	ldr	r0, [pc, #44]	; (80011c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001192:	490c      	ldr	r1, [pc, #48]	; (80011c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001194:	4a0c      	ldr	r2, [pc, #48]	; (80011c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001198:	e002      	b.n	80011a0 <LoopCopyDataInit>

0800119a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800119c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119e:	3304      	adds	r3, #4

080011a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a4:	d3f9      	bcc.n	800119a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a6:	4a09      	ldr	r2, [pc, #36]	; (80011cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011a8:	4c09      	ldr	r4, [pc, #36]	; (80011d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ac:	e001      	b.n	80011b2 <LoopFillZerobss>

080011ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b0:	3204      	adds	r2, #4

080011b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b4:	d3fb      	bcc.n	80011ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011b6:	f001 fae1 	bl	800277c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ba:	f7ff fc9d 	bl	8000af8 <main>
  bx lr
 80011be:	4770      	bx	lr
  ldr r0, =_sdata
 80011c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80011c8:	08002818 	.word	0x08002818
  ldr r2, =_sbss
 80011cc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80011d0:	20000100 	.word	0x20000100

080011d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011d4:	e7fe      	b.n	80011d4 <ADC1_2_IRQHandler>
	...

080011d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <HAL_Init+0x28>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a07      	ldr	r2, [pc, #28]	; (8001200 <HAL_Init+0x28>)
 80011e2:	f043 0310 	orr.w	r3, r3, #16
 80011e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e8:	2003      	movs	r0, #3
 80011ea:	f000 f923 	bl	8001434 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ee:	200f      	movs	r0, #15
 80011f0:	f000 f808 	bl	8001204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f4:	f7ff fe18 	bl	8000e28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40022000 	.word	0x40022000

08001204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_InitTick+0x54>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_InitTick+0x58>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121a:	fbb3 f3f1 	udiv	r3, r3, r1
 800121e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f93b 	bl	800149e <HAL_SYSTICK_Config>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e00e      	b.n	8001250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b0f      	cmp	r3, #15
 8001236:	d80a      	bhi.n	800124e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001238:	2200      	movs	r2, #0
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f000 f903 	bl	800144a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001244:	4a06      	ldr	r2, [pc, #24]	; (8001260 <HAL_InitTick+0x5c>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	e000      	b.n	8001250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000060 	.word	0x20000060
 800125c:	20000068 	.word	0x20000068
 8001260:	20000064 	.word	0x20000064

08001264 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <HAL_IncTick+0x1c>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4b05      	ldr	r3, [pc, #20]	; (8001284 <HAL_IncTick+0x20>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4413      	add	r3, r2
 8001274:	4a03      	ldr	r2, [pc, #12]	; (8001284 <HAL_IncTick+0x20>)
 8001276:	6013      	str	r3, [r2, #0]
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	20000068 	.word	0x20000068
 8001284:	200000fc 	.word	0x200000fc

08001288 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return uwTick;
 800128c:	4b02      	ldr	r3, [pc, #8]	; (8001298 <HAL_GetTick+0x10>)
 800128e:	681b      	ldr	r3, [r3, #0]
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	200000fc 	.word	0x200000fc

0800129c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <__NVIC_SetPriorityGrouping+0x44>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b8:	4013      	ands	r3, r2
 80012ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ce:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <__NVIC_SetPriorityGrouping+0x44>)
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	60d3      	str	r3, [r2, #12]
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e8:	4b04      	ldr	r3, [pc, #16]	; (80012fc <__NVIC_GetPriorityGrouping+0x18>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	0a1b      	lsrs	r3, r3, #8
 80012ee:	f003 0307 	and.w	r3, r3, #7
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	2b00      	cmp	r3, #0
 8001310:	db0b      	blt.n	800132a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	f003 021f 	and.w	r2, r3, #31
 8001318:	4906      	ldr	r1, [pc, #24]	; (8001334 <__NVIC_EnableIRQ+0x34>)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	095b      	lsrs	r3, r3, #5
 8001320:	2001      	movs	r0, #1
 8001322:	fa00 f202 	lsl.w	r2, r0, r2
 8001326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	e000e100 	.word	0xe000e100

08001338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	2b00      	cmp	r3, #0
 800134a:	db0a      	blt.n	8001362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	b2da      	uxtb	r2, r3
 8001350:	490c      	ldr	r1, [pc, #48]	; (8001384 <__NVIC_SetPriority+0x4c>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	0112      	lsls	r2, r2, #4
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	440b      	add	r3, r1
 800135c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001360:	e00a      	b.n	8001378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4908      	ldr	r1, [pc, #32]	; (8001388 <__NVIC_SetPriority+0x50>)
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	3b04      	subs	r3, #4
 8001370:	0112      	lsls	r2, r2, #4
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	440b      	add	r3, r1
 8001376:	761a      	strb	r2, [r3, #24]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000e100 	.word	0xe000e100
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800138c:	b480      	push	{r7}
 800138e:	b089      	sub	sp, #36	; 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f1c3 0307 	rsb	r3, r3, #7
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	bf28      	it	cs
 80013aa:	2304      	movcs	r3, #4
 80013ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3304      	adds	r3, #4
 80013b2:	2b06      	cmp	r3, #6
 80013b4:	d902      	bls.n	80013bc <NVIC_EncodePriority+0x30>
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3b03      	subs	r3, #3
 80013ba:	e000      	b.n	80013be <NVIC_EncodePriority+0x32>
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	f04f 32ff 	mov.w	r2, #4294967295
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43da      	mvns	r2, r3
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	401a      	ands	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d4:	f04f 31ff 	mov.w	r1, #4294967295
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	fa01 f303 	lsl.w	r3, r1, r3
 80013de:	43d9      	mvns	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	4313      	orrs	r3, r2
         );
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3724      	adds	r7, #36	; 0x24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001400:	d301      	bcc.n	8001406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001402:	2301      	movs	r3, #1
 8001404:	e00f      	b.n	8001426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001406:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <SysTick_Config+0x40>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140e:	210f      	movs	r1, #15
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	f7ff ff90 	bl	8001338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <SysTick_Config+0x40>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <SysTick_Config+0x40>)
 8001420:	2207      	movs	r2, #7
 8001422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	e000e010 	.word	0xe000e010

08001434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ff2d 	bl	800129c <__NVIC_SetPriorityGrouping>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800145c:	f7ff ff42 	bl	80012e4 <__NVIC_GetPriorityGrouping>
 8001460:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	68b9      	ldr	r1, [r7, #8]
 8001466:	6978      	ldr	r0, [r7, #20]
 8001468:	f7ff ff90 	bl	800138c <NVIC_EncodePriority>
 800146c:	4602      	mov	r2, r0
 800146e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff5f 	bl	8001338 <__NVIC_SetPriority>
}
 800147a:	bf00      	nop
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	4603      	mov	r3, r0
 800148a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800148c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff35 	bl	8001300 <__NVIC_EnableIRQ>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff ffa2 	bl	80013f0 <SysTick_Config>
 80014ac:	4603      	mov	r3, r0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b08b      	sub	sp, #44	; 0x2c
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014c2:	2300      	movs	r3, #0
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014c6:	2300      	movs	r3, #0
 80014c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ca:	e148      	b.n	800175e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014cc:	2201      	movs	r2, #1
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	69fa      	ldr	r2, [r7, #28]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	f040 8137 	bne.w	8001758 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	4aa3      	ldr	r2, [pc, #652]	; (800177c <HAL_GPIO_Init+0x2c4>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d05e      	beq.n	80015b2 <HAL_GPIO_Init+0xfa>
 80014f4:	4aa1      	ldr	r2, [pc, #644]	; (800177c <HAL_GPIO_Init+0x2c4>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d875      	bhi.n	80015e6 <HAL_GPIO_Init+0x12e>
 80014fa:	4aa1      	ldr	r2, [pc, #644]	; (8001780 <HAL_GPIO_Init+0x2c8>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d058      	beq.n	80015b2 <HAL_GPIO_Init+0xfa>
 8001500:	4a9f      	ldr	r2, [pc, #636]	; (8001780 <HAL_GPIO_Init+0x2c8>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d86f      	bhi.n	80015e6 <HAL_GPIO_Init+0x12e>
 8001506:	4a9f      	ldr	r2, [pc, #636]	; (8001784 <HAL_GPIO_Init+0x2cc>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d052      	beq.n	80015b2 <HAL_GPIO_Init+0xfa>
 800150c:	4a9d      	ldr	r2, [pc, #628]	; (8001784 <HAL_GPIO_Init+0x2cc>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d869      	bhi.n	80015e6 <HAL_GPIO_Init+0x12e>
 8001512:	4a9d      	ldr	r2, [pc, #628]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d04c      	beq.n	80015b2 <HAL_GPIO_Init+0xfa>
 8001518:	4a9b      	ldr	r2, [pc, #620]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d863      	bhi.n	80015e6 <HAL_GPIO_Init+0x12e>
 800151e:	4a9b      	ldr	r2, [pc, #620]	; (800178c <HAL_GPIO_Init+0x2d4>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d046      	beq.n	80015b2 <HAL_GPIO_Init+0xfa>
 8001524:	4a99      	ldr	r2, [pc, #612]	; (800178c <HAL_GPIO_Init+0x2d4>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d85d      	bhi.n	80015e6 <HAL_GPIO_Init+0x12e>
 800152a:	2b12      	cmp	r3, #18
 800152c:	d82a      	bhi.n	8001584 <HAL_GPIO_Init+0xcc>
 800152e:	2b12      	cmp	r3, #18
 8001530:	d859      	bhi.n	80015e6 <HAL_GPIO_Init+0x12e>
 8001532:	a201      	add	r2, pc, #4	; (adr r2, 8001538 <HAL_GPIO_Init+0x80>)
 8001534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001538:	080015b3 	.word	0x080015b3
 800153c:	0800158d 	.word	0x0800158d
 8001540:	0800159f 	.word	0x0800159f
 8001544:	080015e1 	.word	0x080015e1
 8001548:	080015e7 	.word	0x080015e7
 800154c:	080015e7 	.word	0x080015e7
 8001550:	080015e7 	.word	0x080015e7
 8001554:	080015e7 	.word	0x080015e7
 8001558:	080015e7 	.word	0x080015e7
 800155c:	080015e7 	.word	0x080015e7
 8001560:	080015e7 	.word	0x080015e7
 8001564:	080015e7 	.word	0x080015e7
 8001568:	080015e7 	.word	0x080015e7
 800156c:	080015e7 	.word	0x080015e7
 8001570:	080015e7 	.word	0x080015e7
 8001574:	080015e7 	.word	0x080015e7
 8001578:	080015e7 	.word	0x080015e7
 800157c:	08001595 	.word	0x08001595
 8001580:	080015a9 	.word	0x080015a9
 8001584:	4a82      	ldr	r2, [pc, #520]	; (8001790 <HAL_GPIO_Init+0x2d8>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d013      	beq.n	80015b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800158a:	e02c      	b.n	80015e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	623b      	str	r3, [r7, #32]
          break;
 8001592:	e029      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	3304      	adds	r3, #4
 800159a:	623b      	str	r3, [r7, #32]
          break;
 800159c:	e024      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	3308      	adds	r3, #8
 80015a4:	623b      	str	r3, [r7, #32]
          break;
 80015a6:	e01f      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	330c      	adds	r3, #12
 80015ae:	623b      	str	r3, [r7, #32]
          break;
 80015b0:	e01a      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d102      	bne.n	80015c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015ba:	2304      	movs	r3, #4
 80015bc:	623b      	str	r3, [r7, #32]
          break;
 80015be:	e013      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d105      	bne.n	80015d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015c8:	2308      	movs	r3, #8
 80015ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	69fa      	ldr	r2, [r7, #28]
 80015d0:	611a      	str	r2, [r3, #16]
          break;
 80015d2:	e009      	b.n	80015e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015d4:	2308      	movs	r3, #8
 80015d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69fa      	ldr	r2, [r7, #28]
 80015dc:	615a      	str	r2, [r3, #20]
          break;
 80015de:	e003      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015e0:	2300      	movs	r3, #0
 80015e2:	623b      	str	r3, [r7, #32]
          break;
 80015e4:	e000      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          break;
 80015e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	2bff      	cmp	r3, #255	; 0xff
 80015ec:	d801      	bhi.n	80015f2 <HAL_GPIO_Init+0x13a>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	e001      	b.n	80015f6 <HAL_GPIO_Init+0x13e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3304      	adds	r3, #4
 80015f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	2bff      	cmp	r3, #255	; 0xff
 80015fc:	d802      	bhi.n	8001604 <HAL_GPIO_Init+0x14c>
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	e002      	b.n	800160a <HAL_GPIO_Init+0x152>
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	3b08      	subs	r3, #8
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	210f      	movs	r1, #15
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	fa01 f303 	lsl.w	r3, r1, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	401a      	ands	r2, r3
 800161c:	6a39      	ldr	r1, [r7, #32]
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	fa01 f303 	lsl.w	r3, r1, r3
 8001624:	431a      	orrs	r2, r3
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 8090 	beq.w	8001758 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001638:	4b56      	ldr	r3, [pc, #344]	; (8001794 <HAL_GPIO_Init+0x2dc>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	4a55      	ldr	r2, [pc, #340]	; (8001794 <HAL_GPIO_Init+0x2dc>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6193      	str	r3, [r2, #24]
 8001644:	4b53      	ldr	r3, [pc, #332]	; (8001794 <HAL_GPIO_Init+0x2dc>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001650:	4a51      	ldr	r2, [pc, #324]	; (8001798 <HAL_GPIO_Init+0x2e0>)
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	089b      	lsrs	r3, r3, #2
 8001656:	3302      	adds	r3, #2
 8001658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	220f      	movs	r2, #15
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	4013      	ands	r3, r2
 8001672:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a49      	ldr	r2, [pc, #292]	; (800179c <HAL_GPIO_Init+0x2e4>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d00d      	beq.n	8001698 <HAL_GPIO_Init+0x1e0>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a48      	ldr	r2, [pc, #288]	; (80017a0 <HAL_GPIO_Init+0x2e8>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d007      	beq.n	8001694 <HAL_GPIO_Init+0x1dc>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a47      	ldr	r2, [pc, #284]	; (80017a4 <HAL_GPIO_Init+0x2ec>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d101      	bne.n	8001690 <HAL_GPIO_Init+0x1d8>
 800168c:	2302      	movs	r3, #2
 800168e:	e004      	b.n	800169a <HAL_GPIO_Init+0x1e2>
 8001690:	2303      	movs	r3, #3
 8001692:	e002      	b.n	800169a <HAL_GPIO_Init+0x1e2>
 8001694:	2301      	movs	r3, #1
 8001696:	e000      	b.n	800169a <HAL_GPIO_Init+0x1e2>
 8001698:	2300      	movs	r3, #0
 800169a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800169c:	f002 0203 	and.w	r2, r2, #3
 80016a0:	0092      	lsls	r2, r2, #2
 80016a2:	4093      	lsls	r3, r2
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016aa:	493b      	ldr	r1, [pc, #236]	; (8001798 <HAL_GPIO_Init+0x2e0>)
 80016ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	3302      	adds	r3, #2
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d006      	beq.n	80016d2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016c4:	4b38      	ldr	r3, [pc, #224]	; (80017a8 <HAL_GPIO_Init+0x2f0>)
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	4937      	ldr	r1, [pc, #220]	; (80017a8 <HAL_GPIO_Init+0x2f0>)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	608b      	str	r3, [r1, #8]
 80016d0:	e006      	b.n	80016e0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016d2:	4b35      	ldr	r3, [pc, #212]	; (80017a8 <HAL_GPIO_Init+0x2f0>)
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	43db      	mvns	r3, r3
 80016da:	4933      	ldr	r1, [pc, #204]	; (80017a8 <HAL_GPIO_Init+0x2f0>)
 80016dc:	4013      	ands	r3, r2
 80016de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d006      	beq.n	80016fa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016ec:	4b2e      	ldr	r3, [pc, #184]	; (80017a8 <HAL_GPIO_Init+0x2f0>)
 80016ee:	68da      	ldr	r2, [r3, #12]
 80016f0:	492d      	ldr	r1, [pc, #180]	; (80017a8 <HAL_GPIO_Init+0x2f0>)
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	60cb      	str	r3, [r1, #12]
 80016f8:	e006      	b.n	8001708 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016fa:	4b2b      	ldr	r3, [pc, #172]	; (80017a8 <HAL_GPIO_Init+0x2f0>)
 80016fc:	68da      	ldr	r2, [r3, #12]
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	43db      	mvns	r3, r3
 8001702:	4929      	ldr	r1, [pc, #164]	; (80017a8 <HAL_GPIO_Init+0x2f0>)
 8001704:	4013      	ands	r3, r2
 8001706:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d006      	beq.n	8001722 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001714:	4b24      	ldr	r3, [pc, #144]	; (80017a8 <HAL_GPIO_Init+0x2f0>)
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	4923      	ldr	r1, [pc, #140]	; (80017a8 <HAL_GPIO_Init+0x2f0>)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	4313      	orrs	r3, r2
 800171e:	604b      	str	r3, [r1, #4]
 8001720:	e006      	b.n	8001730 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001722:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <HAL_GPIO_Init+0x2f0>)
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	43db      	mvns	r3, r3
 800172a:	491f      	ldr	r1, [pc, #124]	; (80017a8 <HAL_GPIO_Init+0x2f0>)
 800172c:	4013      	ands	r3, r2
 800172e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d006      	beq.n	800174a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800173c:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <HAL_GPIO_Init+0x2f0>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4919      	ldr	r1, [pc, #100]	; (80017a8 <HAL_GPIO_Init+0x2f0>)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	4313      	orrs	r3, r2
 8001746:	600b      	str	r3, [r1, #0]
 8001748:	e006      	b.n	8001758 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800174a:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <HAL_GPIO_Init+0x2f0>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	43db      	mvns	r3, r3
 8001752:	4915      	ldr	r1, [pc, #84]	; (80017a8 <HAL_GPIO_Init+0x2f0>)
 8001754:	4013      	ands	r3, r2
 8001756:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	3301      	adds	r3, #1
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	fa22 f303 	lsr.w	r3, r2, r3
 8001768:	2b00      	cmp	r3, #0
 800176a:	f47f aeaf 	bne.w	80014cc <HAL_GPIO_Init+0x14>
  }
}
 800176e:	bf00      	nop
 8001770:	bf00      	nop
 8001772:	372c      	adds	r7, #44	; 0x2c
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	10320000 	.word	0x10320000
 8001780:	10310000 	.word	0x10310000
 8001784:	10220000 	.word	0x10220000
 8001788:	10210000 	.word	0x10210000
 800178c:	10120000 	.word	0x10120000
 8001790:	10110000 	.word	0x10110000
 8001794:	40021000 	.word	0x40021000
 8001798:	40010000 	.word	0x40010000
 800179c:	40010800 	.word	0x40010800
 80017a0:	40010c00 	.word	0x40010c00
 80017a4:	40011000 	.word	0x40011000
 80017a8:	40010400 	.word	0x40010400

080017ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	887b      	ldrh	r3, [r7, #2]
 80017be:	4013      	ands	r3, r2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d002      	beq.n	80017ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017c4:	2301      	movs	r3, #1
 80017c6:	73fb      	strb	r3, [r7, #15]
 80017c8:	e001      	b.n	80017ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017ca:	2300      	movs	r3, #0
 80017cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr

080017da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	460b      	mov	r3, r1
 80017e4:	807b      	strh	r3, [r7, #2]
 80017e6:	4613      	mov	r3, r2
 80017e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017ea:	787b      	ldrb	r3, [r7, #1]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d003      	beq.n	80017f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017f0:	887a      	ldrh	r2, [r7, #2]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017f6:	e003      	b.n	8001800 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017f8:	887b      	ldrh	r3, [r7, #2]
 80017fa:	041a      	lsls	r2, r3, #16
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	611a      	str	r2, [r3, #16]
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
	...

0800180c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e26c      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 8087 	beq.w	800193a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800182c:	4b92      	ldr	r3, [pc, #584]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 030c 	and.w	r3, r3, #12
 8001834:	2b04      	cmp	r3, #4
 8001836:	d00c      	beq.n	8001852 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001838:	4b8f      	ldr	r3, [pc, #572]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 030c 	and.w	r3, r3, #12
 8001840:	2b08      	cmp	r3, #8
 8001842:	d112      	bne.n	800186a <HAL_RCC_OscConfig+0x5e>
 8001844:	4b8c      	ldr	r3, [pc, #560]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800184c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001850:	d10b      	bne.n	800186a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001852:	4b89      	ldr	r3, [pc, #548]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d06c      	beq.n	8001938 <HAL_RCC_OscConfig+0x12c>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d168      	bne.n	8001938 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e246      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001872:	d106      	bne.n	8001882 <HAL_RCC_OscConfig+0x76>
 8001874:	4b80      	ldr	r3, [pc, #512]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a7f      	ldr	r2, [pc, #508]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 800187a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	e02e      	b.n	80018e0 <HAL_RCC_OscConfig+0xd4>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10c      	bne.n	80018a4 <HAL_RCC_OscConfig+0x98>
 800188a:	4b7b      	ldr	r3, [pc, #492]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a7a      	ldr	r2, [pc, #488]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 8001890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	4b78      	ldr	r3, [pc, #480]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a77      	ldr	r2, [pc, #476]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 800189c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	e01d      	b.n	80018e0 <HAL_RCC_OscConfig+0xd4>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018ac:	d10c      	bne.n	80018c8 <HAL_RCC_OscConfig+0xbc>
 80018ae:	4b72      	ldr	r3, [pc, #456]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a71      	ldr	r2, [pc, #452]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	4b6f      	ldr	r3, [pc, #444]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a6e      	ldr	r2, [pc, #440]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 80018c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e00b      	b.n	80018e0 <HAL_RCC_OscConfig+0xd4>
 80018c8:	4b6b      	ldr	r3, [pc, #428]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a6a      	ldr	r2, [pc, #424]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 80018ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	4b68      	ldr	r3, [pc, #416]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a67      	ldr	r2, [pc, #412]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 80018da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d013      	beq.n	8001910 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e8:	f7ff fcce 	bl	8001288 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018f0:	f7ff fcca 	bl	8001288 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b64      	cmp	r3, #100	; 0x64
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e1fa      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001902:	4b5d      	ldr	r3, [pc, #372]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0f0      	beq.n	80018f0 <HAL_RCC_OscConfig+0xe4>
 800190e:	e014      	b.n	800193a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001910:	f7ff fcba 	bl	8001288 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001918:	f7ff fcb6 	bl	8001288 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b64      	cmp	r3, #100	; 0x64
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e1e6      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192a:	4b53      	ldr	r3, [pc, #332]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x10c>
 8001936:	e000      	b.n	800193a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d063      	beq.n	8001a0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001946:	4b4c      	ldr	r3, [pc, #304]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00b      	beq.n	800196a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001952:	4b49      	ldr	r3, [pc, #292]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 030c 	and.w	r3, r3, #12
 800195a:	2b08      	cmp	r3, #8
 800195c:	d11c      	bne.n	8001998 <HAL_RCC_OscConfig+0x18c>
 800195e:	4b46      	ldr	r3, [pc, #280]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d116      	bne.n	8001998 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196a:	4b43      	ldr	r3, [pc, #268]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d005      	beq.n	8001982 <HAL_RCC_OscConfig+0x176>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d001      	beq.n	8001982 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e1ba      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001982:	4b3d      	ldr	r3, [pc, #244]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	4939      	ldr	r1, [pc, #228]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 8001992:	4313      	orrs	r3, r2
 8001994:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001996:	e03a      	b.n	8001a0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d020      	beq.n	80019e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a0:	4b36      	ldr	r3, [pc, #216]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a6:	f7ff fc6f 	bl	8001288 <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ae:	f7ff fc6b 	bl	8001288 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e19b      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c0:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0f0      	beq.n	80019ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019cc:	4b2a      	ldr	r3, [pc, #168]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	4927      	ldr	r1, [pc, #156]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	600b      	str	r3, [r1, #0]
 80019e0:	e015      	b.n	8001a0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019e2:	4b26      	ldr	r3, [pc, #152]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e8:	f7ff fc4e 	bl	8001288 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f0:	f7ff fc4a 	bl	8001288 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e17a      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a02:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d03a      	beq.n	8001a90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d019      	beq.n	8001a56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a22:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <HAL_RCC_OscConfig+0x274>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a28:	f7ff fc2e 	bl	8001288 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a30:	f7ff fc2a 	bl	8001288 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e15a      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a42:	4b0d      	ldr	r3, [pc, #52]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0f0      	beq.n	8001a30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a4e:	2001      	movs	r0, #1
 8001a50:	f000 fa9a 	bl	8001f88 <RCC_Delay>
 8001a54:	e01c      	b.n	8001a90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a56:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <HAL_RCC_OscConfig+0x274>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5c:	f7ff fc14 	bl	8001288 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a62:	e00f      	b.n	8001a84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a64:	f7ff fc10 	bl	8001288 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d908      	bls.n	8001a84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e140      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4ec>
 8001a76:	bf00      	nop
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	42420000 	.word	0x42420000
 8001a80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a84:	4b9e      	ldr	r3, [pc, #632]	; (8001d00 <HAL_RCC_OscConfig+0x4f4>)
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1e9      	bne.n	8001a64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 80a6 	beq.w	8001bea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aa2:	4b97      	ldr	r3, [pc, #604]	; (8001d00 <HAL_RCC_OscConfig+0x4f4>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10d      	bne.n	8001aca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	4b94      	ldr	r3, [pc, #592]	; (8001d00 <HAL_RCC_OscConfig+0x4f4>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	4a93      	ldr	r2, [pc, #588]	; (8001d00 <HAL_RCC_OscConfig+0x4f4>)
 8001ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	61d3      	str	r3, [r2, #28]
 8001aba:	4b91      	ldr	r3, [pc, #580]	; (8001d00 <HAL_RCC_OscConfig+0x4f4>)
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aca:	4b8e      	ldr	r3, [pc, #568]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d118      	bne.n	8001b08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ad6:	4b8b      	ldr	r3, [pc, #556]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a8a      	ldr	r2, [pc, #552]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ae2:	f7ff fbd1 	bl	8001288 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aea:	f7ff fbcd 	bl	8001288 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b64      	cmp	r3, #100	; 0x64
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e0fd      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afc:	4b81      	ldr	r3, [pc, #516]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0f0      	beq.n	8001aea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d106      	bne.n	8001b1e <HAL_RCC_OscConfig+0x312>
 8001b10:	4b7b      	ldr	r3, [pc, #492]	; (8001d00 <HAL_RCC_OscConfig+0x4f4>)
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	4a7a      	ldr	r2, [pc, #488]	; (8001d00 <HAL_RCC_OscConfig+0x4f4>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	6213      	str	r3, [r2, #32]
 8001b1c:	e02d      	b.n	8001b7a <HAL_RCC_OscConfig+0x36e>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10c      	bne.n	8001b40 <HAL_RCC_OscConfig+0x334>
 8001b26:	4b76      	ldr	r3, [pc, #472]	; (8001d00 <HAL_RCC_OscConfig+0x4f4>)
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	4a75      	ldr	r2, [pc, #468]	; (8001d00 <HAL_RCC_OscConfig+0x4f4>)
 8001b2c:	f023 0301 	bic.w	r3, r3, #1
 8001b30:	6213      	str	r3, [r2, #32]
 8001b32:	4b73      	ldr	r3, [pc, #460]	; (8001d00 <HAL_RCC_OscConfig+0x4f4>)
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	4a72      	ldr	r2, [pc, #456]	; (8001d00 <HAL_RCC_OscConfig+0x4f4>)
 8001b38:	f023 0304 	bic.w	r3, r3, #4
 8001b3c:	6213      	str	r3, [r2, #32]
 8001b3e:	e01c      	b.n	8001b7a <HAL_RCC_OscConfig+0x36e>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	2b05      	cmp	r3, #5
 8001b46:	d10c      	bne.n	8001b62 <HAL_RCC_OscConfig+0x356>
 8001b48:	4b6d      	ldr	r3, [pc, #436]	; (8001d00 <HAL_RCC_OscConfig+0x4f4>)
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	4a6c      	ldr	r2, [pc, #432]	; (8001d00 <HAL_RCC_OscConfig+0x4f4>)
 8001b4e:	f043 0304 	orr.w	r3, r3, #4
 8001b52:	6213      	str	r3, [r2, #32]
 8001b54:	4b6a      	ldr	r3, [pc, #424]	; (8001d00 <HAL_RCC_OscConfig+0x4f4>)
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	4a69      	ldr	r2, [pc, #420]	; (8001d00 <HAL_RCC_OscConfig+0x4f4>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	6213      	str	r3, [r2, #32]
 8001b60:	e00b      	b.n	8001b7a <HAL_RCC_OscConfig+0x36e>
 8001b62:	4b67      	ldr	r3, [pc, #412]	; (8001d00 <HAL_RCC_OscConfig+0x4f4>)
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	4a66      	ldr	r2, [pc, #408]	; (8001d00 <HAL_RCC_OscConfig+0x4f4>)
 8001b68:	f023 0301 	bic.w	r3, r3, #1
 8001b6c:	6213      	str	r3, [r2, #32]
 8001b6e:	4b64      	ldr	r3, [pc, #400]	; (8001d00 <HAL_RCC_OscConfig+0x4f4>)
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	4a63      	ldr	r2, [pc, #396]	; (8001d00 <HAL_RCC_OscConfig+0x4f4>)
 8001b74:	f023 0304 	bic.w	r3, r3, #4
 8001b78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d015      	beq.n	8001bae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b82:	f7ff fb81 	bl	8001288 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b88:	e00a      	b.n	8001ba0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b8a:	f7ff fb7d 	bl	8001288 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e0ab      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba0:	4b57      	ldr	r3, [pc, #348]	; (8001d00 <HAL_RCC_OscConfig+0x4f4>)
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0ee      	beq.n	8001b8a <HAL_RCC_OscConfig+0x37e>
 8001bac:	e014      	b.n	8001bd8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bae:	f7ff fb6b 	bl	8001288 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb4:	e00a      	b.n	8001bcc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb6:	f7ff fb67 	bl	8001288 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e095      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bcc:	4b4c      	ldr	r3, [pc, #304]	; (8001d00 <HAL_RCC_OscConfig+0x4f4>)
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1ee      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bd8:	7dfb      	ldrb	r3, [r7, #23]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d105      	bne.n	8001bea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bde:	4b48      	ldr	r3, [pc, #288]	; (8001d00 <HAL_RCC_OscConfig+0x4f4>)
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	4a47      	ldr	r2, [pc, #284]	; (8001d00 <HAL_RCC_OscConfig+0x4f4>)
 8001be4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001be8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 8081 	beq.w	8001cf6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bf4:	4b42      	ldr	r3, [pc, #264]	; (8001d00 <HAL_RCC_OscConfig+0x4f4>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 030c 	and.w	r3, r3, #12
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	d061      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d146      	bne.n	8001c96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c08:	4b3f      	ldr	r3, [pc, #252]	; (8001d08 <HAL_RCC_OscConfig+0x4fc>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0e:	f7ff fb3b 	bl	8001288 <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c16:	f7ff fb37 	bl	8001288 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e067      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c28:	4b35      	ldr	r3, [pc, #212]	; (8001d00 <HAL_RCC_OscConfig+0x4f4>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1f0      	bne.n	8001c16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c3c:	d108      	bne.n	8001c50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c3e:	4b30      	ldr	r3, [pc, #192]	; (8001d00 <HAL_RCC_OscConfig+0x4f4>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	492d      	ldr	r1, [pc, #180]	; (8001d00 <HAL_RCC_OscConfig+0x4f4>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c50:	4b2b      	ldr	r3, [pc, #172]	; (8001d00 <HAL_RCC_OscConfig+0x4f4>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a19      	ldr	r1, [r3, #32]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	430b      	orrs	r3, r1
 8001c62:	4927      	ldr	r1, [pc, #156]	; (8001d00 <HAL_RCC_OscConfig+0x4f4>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c68:	4b27      	ldr	r3, [pc, #156]	; (8001d08 <HAL_RCC_OscConfig+0x4fc>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6e:	f7ff fb0b 	bl	8001288 <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c76:	f7ff fb07 	bl	8001288 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e037      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c88:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <HAL_RCC_OscConfig+0x4f4>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCC_OscConfig+0x46a>
 8001c94:	e02f      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c96:	4b1c      	ldr	r3, [pc, #112]	; (8001d08 <HAL_RCC_OscConfig+0x4fc>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9c:	f7ff faf4 	bl	8001288 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca4:	f7ff faf0 	bl	8001288 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e020      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb6:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <HAL_RCC_OscConfig+0x4f4>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x498>
 8001cc2:	e018      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d101      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e013      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_RCC_OscConfig+0x4f4>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d106      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d001      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40007000 	.word	0x40007000
 8001d08:	42420060 	.word	0x42420060

08001d0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e0d0      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d20:	4b6a      	ldr	r3, [pc, #424]	; (8001ecc <HAL_RCC_ClockConfig+0x1c0>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d910      	bls.n	8001d50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2e:	4b67      	ldr	r3, [pc, #412]	; (8001ecc <HAL_RCC_ClockConfig+0x1c0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 0207 	bic.w	r2, r3, #7
 8001d36:	4965      	ldr	r1, [pc, #404]	; (8001ecc <HAL_RCC_ClockConfig+0x1c0>)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3e:	4b63      	ldr	r3, [pc, #396]	; (8001ecc <HAL_RCC_ClockConfig+0x1c0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e0b8      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d020      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d005      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d68:	4b59      	ldr	r3, [pc, #356]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	4a58      	ldr	r2, [pc, #352]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d005      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d80:	4b53      	ldr	r3, [pc, #332]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	4a52      	ldr	r2, [pc, #328]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d8c:	4b50      	ldr	r3, [pc, #320]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	494d      	ldr	r1, [pc, #308]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d040      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d107      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db2:	4b47      	ldr	r3, [pc, #284]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d115      	bne.n	8001dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e07f      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d107      	bne.n	8001dda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dca:	4b41      	ldr	r3, [pc, #260]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d109      	bne.n	8001dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e073      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dda:	4b3d      	ldr	r3, [pc, #244]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e06b      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dea:	4b39      	ldr	r3, [pc, #228]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f023 0203 	bic.w	r2, r3, #3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	4936      	ldr	r1, [pc, #216]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dfc:	f7ff fa44 	bl	8001288 <HAL_GetTick>
 8001e00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e02:	e00a      	b.n	8001e1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e04:	f7ff fa40 	bl	8001288 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e053      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1a:	4b2d      	ldr	r3, [pc, #180]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 020c 	and.w	r2, r3, #12
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d1eb      	bne.n	8001e04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e2c:	4b27      	ldr	r3, [pc, #156]	; (8001ecc <HAL_RCC_ClockConfig+0x1c0>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d210      	bcs.n	8001e5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3a:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <HAL_RCC_ClockConfig+0x1c0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f023 0207 	bic.w	r2, r3, #7
 8001e42:	4922      	ldr	r1, [pc, #136]	; (8001ecc <HAL_RCC_ClockConfig+0x1c0>)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4a:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <HAL_RCC_ClockConfig+0x1c0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d001      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e032      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d008      	beq.n	8001e7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e68:	4b19      	ldr	r3, [pc, #100]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	4916      	ldr	r1, [pc, #88]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d009      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e86:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	490e      	ldr	r1, [pc, #56]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e9a:	f000 f821 	bl	8001ee0 <HAL_RCC_GetSysClockFreq>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	091b      	lsrs	r3, r3, #4
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	490a      	ldr	r1, [pc, #40]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8001eac:	5ccb      	ldrb	r3, [r1, r3]
 8001eae:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb2:	4a09      	ldr	r2, [pc, #36]	; (8001ed8 <HAL_RCC_ClockConfig+0x1cc>)
 8001eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eb6:	4b09      	ldr	r3, [pc, #36]	; (8001edc <HAL_RCC_ClockConfig+0x1d0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff f9a2 	bl	8001204 <HAL_InitTick>

  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40022000 	.word	0x40022000
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	080027ec 	.word	0x080027ec
 8001ed8:	20000060 	.word	0x20000060
 8001edc:	20000064 	.word	0x20000064

08001ee0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b087      	sub	sp, #28
 8001ee4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	2300      	movs	r3, #0
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001efa:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x94>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d002      	beq.n	8001f10 <HAL_RCC_GetSysClockFreq+0x30>
 8001f0a:	2b08      	cmp	r3, #8
 8001f0c:	d003      	beq.n	8001f16 <HAL_RCC_GetSysClockFreq+0x36>
 8001f0e:	e027      	b.n	8001f60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f10:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f12:	613b      	str	r3, [r7, #16]
      break;
 8001f14:	e027      	b.n	8001f66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	0c9b      	lsrs	r3, r3, #18
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	4a17      	ldr	r2, [pc, #92]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f20:	5cd3      	ldrb	r3, [r2, r3]
 8001f22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d010      	beq.n	8001f50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	0c5b      	lsrs	r3, r3, #17
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	4a11      	ldr	r2, [pc, #68]	; (8001f80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f3a:	5cd3      	ldrb	r3, [r2, r3]
 8001f3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a0d      	ldr	r2, [pc, #52]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f42:	fb02 f203 	mul.w	r2, r2, r3
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	e004      	b.n	8001f5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a0c      	ldr	r2, [pc, #48]	; (8001f84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f54:	fb02 f303 	mul.w	r3, r2, r3
 8001f58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	613b      	str	r3, [r7, #16]
      break;
 8001f5e:	e002      	b.n	8001f66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f62:	613b      	str	r3, [r7, #16]
      break;
 8001f64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f66:	693b      	ldr	r3, [r7, #16]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	371c      	adds	r7, #28
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40021000 	.word	0x40021000
 8001f78:	007a1200 	.word	0x007a1200
 8001f7c:	080027fc 	.word	0x080027fc
 8001f80:	0800280c 	.word	0x0800280c
 8001f84:	003d0900 	.word	0x003d0900

08001f88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f90:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <RCC_Delay+0x34>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a0a      	ldr	r2, [pc, #40]	; (8001fc0 <RCC_Delay+0x38>)
 8001f96:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9a:	0a5b      	lsrs	r3, r3, #9
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	fb02 f303 	mul.w	r3, r2, r3
 8001fa2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fa4:	bf00      	nop
  }
  while (Delay --);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1e5a      	subs	r2, r3, #1
 8001faa:	60fa      	str	r2, [r7, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1f9      	bne.n	8001fa4 <RCC_Delay+0x1c>
}
 8001fb0:	bf00      	nop
 8001fb2:	bf00      	nop
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr
 8001fbc:	20000060 	.word	0x20000060
 8001fc0:	10624dd3 	.word	0x10624dd3

08001fc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e041      	b.n	800205a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d106      	bne.n	8001ff0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7fe ff4e 	bl	8000e8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3304      	adds	r3, #4
 8002000:	4619      	mov	r1, r3
 8002002:	4610      	mov	r0, r2
 8002004:	f000 fa56 	bl	80024b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b01      	cmp	r3, #1
 8002076:	d001      	beq.n	800207c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e035      	b.n	80020e8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2202      	movs	r2, #2
 8002080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0201 	orr.w	r2, r2, #1
 8002092:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a16      	ldr	r2, [pc, #88]	; (80020f4 <HAL_TIM_Base_Start_IT+0x90>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d009      	beq.n	80020b2 <HAL_TIM_Base_Start_IT+0x4e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a6:	d004      	beq.n	80020b2 <HAL_TIM_Base_Start_IT+0x4e>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a12      	ldr	r2, [pc, #72]	; (80020f8 <HAL_TIM_Base_Start_IT+0x94>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d111      	bne.n	80020d6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2b06      	cmp	r3, #6
 80020c2:	d010      	beq.n	80020e6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0201 	orr.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020d4:	e007      	b.n	80020e6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f042 0201 	orr.w	r2, r2, #1
 80020e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40012c00 	.word	0x40012c00
 80020f8:	40000400 	.word	0x40000400

080020fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d020      	beq.n	8002160 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d01b      	beq.n	8002160 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0202 	mvn.w	r2, #2
 8002130:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f998 	bl	800247c <HAL_TIM_IC_CaptureCallback>
 800214c:	e005      	b.n	800215a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f98b 	bl	800246a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 f99a 	bl	800248e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	2b00      	cmp	r3, #0
 8002168:	d020      	beq.n	80021ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d01b      	beq.n	80021ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f06f 0204 	mvn.w	r2, #4
 800217c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2202      	movs	r2, #2
 8002182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f972 	bl	800247c <HAL_TIM_IC_CaptureCallback>
 8002198:	e005      	b.n	80021a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f965 	bl	800246a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f974 	bl	800248e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d020      	beq.n	80021f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d01b      	beq.n	80021f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f06f 0208 	mvn.w	r2, #8
 80021c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2204      	movs	r2, #4
 80021ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f94c 	bl	800247c <HAL_TIM_IC_CaptureCallback>
 80021e4:	e005      	b.n	80021f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f93f 	bl	800246a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 f94e 	bl	800248e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	f003 0310 	and.w	r3, r3, #16
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d020      	beq.n	8002244 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f003 0310 	and.w	r3, r3, #16
 8002208:	2b00      	cmp	r3, #0
 800220a:	d01b      	beq.n	8002244 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f06f 0210 	mvn.w	r2, #16
 8002214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2208      	movs	r2, #8
 800221a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f926 	bl	800247c <HAL_TIM_IC_CaptureCallback>
 8002230:	e005      	b.n	800223e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f919 	bl	800246a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f928 	bl	800248e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00c      	beq.n	8002268 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b00      	cmp	r3, #0
 8002256:	d007      	beq.n	8002268 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f06f 0201 	mvn.w	r2, #1
 8002260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7fe fd58 	bl	8000d18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00c      	beq.n	800228c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002278:	2b00      	cmp	r3, #0
 800227a:	d007      	beq.n	800228c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 fa6f 	bl	800276a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00c      	beq.n	80022b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229c:	2b00      	cmp	r3, #0
 800229e:	d007      	beq.n	80022b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f8f8 	bl	80024a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	f003 0320 	and.w	r3, r3, #32
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00c      	beq.n	80022d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f003 0320 	and.w	r3, r3, #32
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d007      	beq.n	80022d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f06f 0220 	mvn.w	r2, #32
 80022cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 fa42 	bl	8002758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022d4:	bf00      	nop
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022e6:	2300      	movs	r3, #0
 80022e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_TIM_ConfigClockSource+0x1c>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e0b4      	b.n	8002462 <HAL_TIM_ConfigClockSource+0x186>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002316:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800231e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002330:	d03e      	beq.n	80023b0 <HAL_TIM_ConfigClockSource+0xd4>
 8002332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002336:	f200 8087 	bhi.w	8002448 <HAL_TIM_ConfigClockSource+0x16c>
 800233a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800233e:	f000 8086 	beq.w	800244e <HAL_TIM_ConfigClockSource+0x172>
 8002342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002346:	d87f      	bhi.n	8002448 <HAL_TIM_ConfigClockSource+0x16c>
 8002348:	2b70      	cmp	r3, #112	; 0x70
 800234a:	d01a      	beq.n	8002382 <HAL_TIM_ConfigClockSource+0xa6>
 800234c:	2b70      	cmp	r3, #112	; 0x70
 800234e:	d87b      	bhi.n	8002448 <HAL_TIM_ConfigClockSource+0x16c>
 8002350:	2b60      	cmp	r3, #96	; 0x60
 8002352:	d050      	beq.n	80023f6 <HAL_TIM_ConfigClockSource+0x11a>
 8002354:	2b60      	cmp	r3, #96	; 0x60
 8002356:	d877      	bhi.n	8002448 <HAL_TIM_ConfigClockSource+0x16c>
 8002358:	2b50      	cmp	r3, #80	; 0x50
 800235a:	d03c      	beq.n	80023d6 <HAL_TIM_ConfigClockSource+0xfa>
 800235c:	2b50      	cmp	r3, #80	; 0x50
 800235e:	d873      	bhi.n	8002448 <HAL_TIM_ConfigClockSource+0x16c>
 8002360:	2b40      	cmp	r3, #64	; 0x40
 8002362:	d058      	beq.n	8002416 <HAL_TIM_ConfigClockSource+0x13a>
 8002364:	2b40      	cmp	r3, #64	; 0x40
 8002366:	d86f      	bhi.n	8002448 <HAL_TIM_ConfigClockSource+0x16c>
 8002368:	2b30      	cmp	r3, #48	; 0x30
 800236a:	d064      	beq.n	8002436 <HAL_TIM_ConfigClockSource+0x15a>
 800236c:	2b30      	cmp	r3, #48	; 0x30
 800236e:	d86b      	bhi.n	8002448 <HAL_TIM_ConfigClockSource+0x16c>
 8002370:	2b20      	cmp	r3, #32
 8002372:	d060      	beq.n	8002436 <HAL_TIM_ConfigClockSource+0x15a>
 8002374:	2b20      	cmp	r3, #32
 8002376:	d867      	bhi.n	8002448 <HAL_TIM_ConfigClockSource+0x16c>
 8002378:	2b00      	cmp	r3, #0
 800237a:	d05c      	beq.n	8002436 <HAL_TIM_ConfigClockSource+0x15a>
 800237c:	2b10      	cmp	r3, #16
 800237e:	d05a      	beq.n	8002436 <HAL_TIM_ConfigClockSource+0x15a>
 8002380:	e062      	b.n	8002448 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	6899      	ldr	r1, [r3, #8]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f000 f96a 	bl	800266a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	609a      	str	r2, [r3, #8]
      break;
 80023ae:	e04f      	b.n	8002450 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6818      	ldr	r0, [r3, #0]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	6899      	ldr	r1, [r3, #8]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f000 f953 	bl	800266a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023d2:	609a      	str	r2, [r3, #8]
      break;
 80023d4:	e03c      	b.n	8002450 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6818      	ldr	r0, [r3, #0]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	6859      	ldr	r1, [r3, #4]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	461a      	mov	r2, r3
 80023e4:	f000 f8ca 	bl	800257c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2150      	movs	r1, #80	; 0x50
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 f921 	bl	8002636 <TIM_ITRx_SetConfig>
      break;
 80023f4:	e02c      	b.n	8002450 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	6859      	ldr	r1, [r3, #4]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	461a      	mov	r2, r3
 8002404:	f000 f8e8 	bl	80025d8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2160      	movs	r1, #96	; 0x60
 800240e:	4618      	mov	r0, r3
 8002410:	f000 f911 	bl	8002636 <TIM_ITRx_SetConfig>
      break;
 8002414:	e01c      	b.n	8002450 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	6859      	ldr	r1, [r3, #4]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	461a      	mov	r2, r3
 8002424:	f000 f8aa 	bl	800257c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2140      	movs	r1, #64	; 0x40
 800242e:	4618      	mov	r0, r3
 8002430:	f000 f901 	bl	8002636 <TIM_ITRx_SetConfig>
      break;
 8002434:	e00c      	b.n	8002450 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4619      	mov	r1, r3
 8002440:	4610      	mov	r0, r2
 8002442:	f000 f8f8 	bl	8002636 <TIM_ITRx_SetConfig>
      break;
 8002446:	e003      	b.n	8002450 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	73fb      	strb	r3, [r7, #15]
      break;
 800244c:	e000      	b.n	8002450 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800244e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002460:	7bfb      	ldrb	r3, [r7, #15]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr

0800247c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr

0800248e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr

080024a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr
	...

080024b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a2b      	ldr	r2, [pc, #172]	; (8002574 <TIM_Base_SetConfig+0xc0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d007      	beq.n	80024dc <TIM_Base_SetConfig+0x28>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d2:	d003      	beq.n	80024dc <TIM_Base_SetConfig+0x28>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a28      	ldr	r2, [pc, #160]	; (8002578 <TIM_Base_SetConfig+0xc4>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d108      	bne.n	80024ee <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a20      	ldr	r2, [pc, #128]	; (8002574 <TIM_Base_SetConfig+0xc0>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d007      	beq.n	8002506 <TIM_Base_SetConfig+0x52>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024fc:	d003      	beq.n	8002506 <TIM_Base_SetConfig+0x52>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a1d      	ldr	r2, [pc, #116]	; (8002578 <TIM_Base_SetConfig+0xc4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d108      	bne.n	8002518 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800250c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	4313      	orrs	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	4313      	orrs	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a0d      	ldr	r2, [pc, #52]	; (8002574 <TIM_Base_SetConfig+0xc0>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d103      	bne.n	800254c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f023 0201 	bic.w	r2, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	611a      	str	r2, [r3, #16]
  }
}
 800256a:	bf00      	nop
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr
 8002574:	40012c00 	.word	0x40012c00
 8002578:	40000400 	.word	0x40000400

0800257c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	f023 0201 	bic.w	r2, r3, #1
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f023 030a 	bic.w	r3, r3, #10
 80025b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	4313      	orrs	r3, r2
 80025c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	621a      	str	r2, [r3, #32]
}
 80025ce:	bf00      	nop
 80025d0:	371c      	adds	r7, #28
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr

080025d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025d8:	b480      	push	{r7}
 80025da:	b087      	sub	sp, #28
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	f023 0210 	bic.w	r2, r3, #16
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002602:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	031b      	lsls	r3, r3, #12
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002614:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	4313      	orrs	r3, r2
 800261e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	621a      	str	r2, [r3, #32]
}
 800262c:	bf00      	nop
 800262e:	371c      	adds	r7, #28
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr

08002636 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002636:	b480      	push	{r7}
 8002638:	b085      	sub	sp, #20
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800264c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4313      	orrs	r3, r2
 8002654:	f043 0307 	orr.w	r3, r3, #7
 8002658:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	609a      	str	r2, [r3, #8]
}
 8002660:	bf00      	nop
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800266a:	b480      	push	{r7}
 800266c:	b087      	sub	sp, #28
 800266e:	af00      	add	r7, sp, #0
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
 8002676:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002684:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	021a      	lsls	r2, r3, #8
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	431a      	orrs	r2, r3
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	4313      	orrs	r3, r2
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	4313      	orrs	r3, r2
 8002696:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	609a      	str	r2, [r3, #8]
}
 800269e:	bf00      	nop
 80026a0:	371c      	adds	r7, #28
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr

080026a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026bc:	2302      	movs	r3, #2
 80026be:	e041      	b.n	8002744 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2202      	movs	r2, #2
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a14      	ldr	r2, [pc, #80]	; (8002750 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d009      	beq.n	8002718 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800270c:	d004      	beq.n	8002718 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a10      	ldr	r2, [pc, #64]	; (8002754 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d10c      	bne.n	8002732 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800271e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	4313      	orrs	r3, r2
 8002728:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40012c00 	.word	0x40012c00
 8002754:	40000400 	.word	0x40000400

08002758 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr

0800276a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <__libc_init_array>:
 800277c:	b570      	push	{r4, r5, r6, lr}
 800277e:	2600      	movs	r6, #0
 8002780:	4d0c      	ldr	r5, [pc, #48]	; (80027b4 <__libc_init_array+0x38>)
 8002782:	4c0d      	ldr	r4, [pc, #52]	; (80027b8 <__libc_init_array+0x3c>)
 8002784:	1b64      	subs	r4, r4, r5
 8002786:	10a4      	asrs	r4, r4, #2
 8002788:	42a6      	cmp	r6, r4
 800278a:	d109      	bne.n	80027a0 <__libc_init_array+0x24>
 800278c:	f000 f822 	bl	80027d4 <_init>
 8002790:	2600      	movs	r6, #0
 8002792:	4d0a      	ldr	r5, [pc, #40]	; (80027bc <__libc_init_array+0x40>)
 8002794:	4c0a      	ldr	r4, [pc, #40]	; (80027c0 <__libc_init_array+0x44>)
 8002796:	1b64      	subs	r4, r4, r5
 8002798:	10a4      	asrs	r4, r4, #2
 800279a:	42a6      	cmp	r6, r4
 800279c:	d105      	bne.n	80027aa <__libc_init_array+0x2e>
 800279e:	bd70      	pop	{r4, r5, r6, pc}
 80027a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80027a4:	4798      	blx	r3
 80027a6:	3601      	adds	r6, #1
 80027a8:	e7ee      	b.n	8002788 <__libc_init_array+0xc>
 80027aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ae:	4798      	blx	r3
 80027b0:	3601      	adds	r6, #1
 80027b2:	e7f2      	b.n	800279a <__libc_init_array+0x1e>
 80027b4:	08002810 	.word	0x08002810
 80027b8:	08002810 	.word	0x08002810
 80027bc:	08002810 	.word	0x08002810
 80027c0:	08002814 	.word	0x08002814

080027c4 <memset>:
 80027c4:	4603      	mov	r3, r0
 80027c6:	4402      	add	r2, r0
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d100      	bne.n	80027ce <memset+0xa>
 80027cc:	4770      	bx	lr
 80027ce:	f803 1b01 	strb.w	r1, [r3], #1
 80027d2:	e7f9      	b.n	80027c8 <memset+0x4>

080027d4 <_init>:
 80027d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027d6:	bf00      	nop
 80027d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027da:	bc08      	pop	{r3}
 80027dc:	469e      	mov	lr, r3
 80027de:	4770      	bx	lr

080027e0 <_fini>:
 80027e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027e2:	bf00      	nop
 80027e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027e6:	bc08      	pop	{r3}
 80027e8:	469e      	mov	lr, r3
 80027ea:	4770      	bx	lr
